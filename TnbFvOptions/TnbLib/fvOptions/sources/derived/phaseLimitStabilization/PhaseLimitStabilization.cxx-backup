#include <PhaseLimitStabilization.hxx>

#include <fvMatrices.hxx>
#include <fvmSup.hxx>
#include <uniformDimensionedFields.hxx>

// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

template<class Type>
tnbLib::fv::PhaseLimitStabilization<Type>::PhaseLimitStabilization
(
	const word& name,
	const word& modelType,
	const dictionary& dict,
	const fvMesh& mesh
)
	:
	option(name, modelType, dict, mesh),
	fieldName_(coeffs_.lookup("field")),
	rateName_(coeffs_.lookup("rate")),
	residualAlpha_(readScalar(coeffs_.lookup("residualAlpha")))
{
	fieldNames_.setSize(1, fieldName_);
	applied_.setSize(1, false);
}


// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

template<class Type>
void tnbLib::fv::PhaseLimitStabilization<Type>::addSup
(
	const volScalarField& alpha,
	const volScalarField& rho,
	fvMatrix<Type>& eqn,
	const label fieldi
)
{
	const GeometricField<Type, fvPatchField, volMesh>& psi = eqn.psi();

	uniformDimensionedScalarField& rate =
		mesh_.lookupObjectRef<uniformDimensionedScalarField>(rateName_);

	eqn -= fvm::Sp(max(residualAlpha_ - alpha, scalar(0))*rho*rate, psi);
}


template<class Type>
bool tnbLib::fv::PhaseLimitStabilization<Type>::read(const dictionary& dict)
{
	if (option::read(dict))
	{
		coeffs_.lookup("residualAlpha") >> residualAlpha_;

		return true;
	}
	else
	{
		return false;
	}
}


// ************************************************************************* //