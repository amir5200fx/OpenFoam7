#line 1 "fluentMeshToFoam.cxx"

#line 3 "fluentMeshToFoam.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer fluentMeshToFoamFlexLexer

    #define yyalloc fluentMeshToFoamalloc

    #define yyrealloc fluentMeshToFoamrealloc

    #define yyfree fluentMeshToFoamfree

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *fluentMeshToFoamalloc ( yy_size_t  );
void *fluentMeshToFoamrealloc ( void *, yy_size_t  );
void fluentMeshToFoamfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[651] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   36,   36,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       53,   53,   53,   53,   61,   59,   59,   59,   59,   60,
       50,   60,   50,   50,   51,    3,   50,   60,   60,   60,
       48,   60,    7,   60,   60,   11,   60,   13,   10,   60,

       60,   60,   60,   14,   58,   58,   58,   17,   58,   58,
       15,   15,   58,   58,   58,   58,   16,   16,   60,   60,
       21,   60,   60,   23,   20,   60,   60,   60,   60,   24,
       60,   60,   27,   25,   60,   60,   26,   60,   60,   31,
       60,   34,   30,   60,   60,   60,   60,   35,   36,   36,
       37,   36,   60,   60,   40,   60,   43,   41,   60,   60,
       44,   45,   60,   45,   46,   47,   45,   50,   53,   50,
       52,   60,   57,   50,   53,   53,   50,   50,   50,    0,
        0,    0,    1,    4,    6,   49,   49,   49,   50,    0,
       50,   51,    3,   50,   50,   50,   50,   50,   50,    0,

        2,   50,   50,    3,    0,    0,   48,    0,    5,    0,
       48,    0,    7,    7,    7,    0,    0,   11,    0,    0,
        0,   13,   10,   13,   10,   10,    0,    0,    0,    0,
        0,    0,   14,    0,    0,   17,    0,    0,   15,   15,
       17,   15,   15,   15,   15,    0,    0,    0,    0,    0,
       16,   16,   16,   16,   16,   16,    0,    0,    0,   21,
        0,    0,    0,    0,   23,   20,    0,   23,   20,   20,
        0,    0,    0,    0,    0,    0,   24,    0,    0,   27,
       25,   27,   25,    0,    0,   26,   26,    0,    0,   31,
        0,    0,    0,   34,   30,   34,   30,   30,    0,    0,

        0,    0,    0,    0,   35,   36,   36,   37,   36,   37,
       36,    0,    0,   40,    0,   43,   41,   43,   41,   41,
       41,   41,    0,    0,   44,   45,    0,   45,   47,   45,
       45,   45,   45,   45,   45,   45,   47,   50,   53,   50,
       52,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,    0,   57,   50,   53,   53,   50,   50,   50,   56,
       50,   50,   50,   50,   52,    0,   55,   57,   57,   57,
       55,   56,   50,   50,   50,   50,   50,   53,   55,   54,
       54,   54,   50,   50,    4,    6,    0,    0,    1,    4,
        8,   49,   28,   18,    6,   38,   39,    2,    0,    0,

        0,    0,    9,   10,    0,    0,   12,    0,   15,   15,
        0,   15,    0,   16,   16,    0,   16,    0,   19,   20,
        0,    0,    0,    0,   29,   30,    0,    0,    0,   41,
       41,   41,   41,   45,   50,   50,   50,   50,   53,   50,
       50,   56,   56,   56,   56,   55,   55,   55,   55,   55,
        0,   55,   55,   55,   55,   57,   56,   56,   56,   56,
       55,   50,   50,   50,   55,   55,   54,    0,   57,   54,
       54,   54,    8,   28,   18,   38,   39,    8,   28,   18,
       38,   39,    9,   10,    0,   12,   12,   12,    0,   15,
       15,   15,    0,   16,   16,   16,   19,   20,    0,    0,

        0,   22,   29,   30,    0,    0,    0,   32,   41,   41,
       41,   41,   50,   55,   50,   50,   50,   50,   50,   50,
       56,   56,   56,   53,   53,   50,   50,   50,   55,   55,
        0,    0,   55,   57,   57,   55,   55,   55,   50,   50,
       50,   50,   55,   55,   54,   54,   54,   12,   12,   12,
       15,   15,   16,   16,    0,    0,   22,    0,    0,   32,
        0,   32,    0,   41,   41,   50,   50,   56,   55,   55,
       50,   50,   55,   55,   55,   55,   54,   50,   50,   54,
       50,   50,   55,   55,   55,   55,   56,   50,   50,   55,
       55,   55,   55,   54,   54,   12,   12,    0,   22,    0,

       32,    0,   32,   42,   55,   55,   56,   50,   50,   56,
       56,   55,   55,   56,   56,   54,   50,   50,   50,   50,
       54,   54,   55,   12,   22,   32,    0,   32,   42,   55,
       55,   55,   56,   55,   56,   55,   54,   54,   55,   55,
        0,   32,   55,   55,   55,   55,   55,   55,   33,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    5,    5,    5,    5,    1,    7,
        8,    5,    9,    1,   10,   11,    5,   12,   13,   14,
       15,   16,   17,   18,   18,   18,   19,   20,    1,    5,
        5,    5,    5,    1,   21,   21,   21,   21,   22,   21,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
        1,    1,    1,    5,   24,    1,   21,   21,   21,   21,

       22,   21,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,    1,    1,    1,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[25] =
    {   0,
        1,    2,    3,    3,    4,    5,    1,    6,    7,    8,
        9,   10,   11,   11,   11,   11,   11,   11,   11,   12,
       13,   13,   12,   12
    } ;

static const flex_int16_t yy_base[756] =
    {   0,
        0,    6,   13,    0,    0,    0,   36,    0,   43,    0,
        0,    0,   61,   67,   73,    0,   94,    0,  115,    0,
      123,    0,  147,    0,    0,    0,  170,  176,  183,    0,
      206,    0,  227,  233,  240,    0,  264,    0,    0,    0,
      287,  293,  299,    0,  320,    0,  341,  347,  353,    0,
        0,    0,    0,    0,  371,  377,  383,    0,  401,  407,
      414,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      438,    0,    0,    0, 1372, 4046,  461,    0,  457, 4046,
      475,  498,   30,  521, 4046, 1369,   42,  544,    0,   41,
     1368,  551, 1362,  558,    0,   65,    3, 1356,   76,    4,

     1355,  564,    0, 4046, 4046,  571,    0, 1349, 1339,    0,
      589,    0,  610,    0, 1334,    0,  628,    0,  649,    0,
       70,  655,  662, 1342,   78,  669, 1341,  676,    0, 4046,
      683,  690, 1336,  697,  704,  711,  718,  725,    0,   71,
       44, 1335,   82,  112, 1334,  731,    0, 4046,  738,  745,
     1329,  752,  759,    0, 4046,  173, 1328,  765,  788,    0,
     4046,  795,  818,  841, 4046, 1327,    0,  848,  871,  894,
     1322, 1312,  917,  940,  963,    0,  976,  994,    0, 1017,
        0, 1013, 1320, 1028, 1046,   74,  209, 1315, 1060, 1083,
      281, 4046, 1314,  282,  299,  316,  335,  336,  352,   49,

      353, 1106,    0, 1313, 1129,    0, 1307,   99, 4046,  207,
     1306, 1136, 1301, 1300, 1299, 1143,    0,  296,  297,  317,
      174, 1294,  385, 1293, 1292,  391,  208, 1287, 1286, 1280,
     1149,    0, 4046, 1156,    0, 1279, 1264,    0, 1174,    0,
     1261, 1240, 1195,  372,    0,  205, 1216,    0, 1250,    0,
     1234,    0, 1231, 1255,  502,    0,  223, 1276,    0,  350,
      380,  512, 1282, 1289, 1244,  548,    0, 1221, 1220,  555,
     1296, 1219, 1214, 1213, 1303,    0, 4046, 1310, 1317, 1201,
     1324, 1200,    0, 1331, 1338, 1345,    0, 1352,    0,  505,
      592,  593,  323, 1199,  594, 1191, 1184,  633,  387, 1161,

     1160, 1159, 1358,    0, 4046, 1365, 1372, 1153, 1379, 1147,
        0, 1386,    0, 4046,  508, 1146, 1392, 1140, 1405, 1139,
        0, 1413, 1431,    0, 4046, 1438, 1461, 1484, 1134,    0,
        0,    0,  556,    0,    0,    0, 1133, 1491, 1514, 1537,
     1132, 1551, 1569, 1583, 1601,    0, 1614, 1632,    0,    0,
        0, 1103, 1655,    0, 1678,    0,    0,    0,    0, 1701,
        0,    0,    0,    0, 1099,    0, 1724, 1098, 1095, 1745,
     1768, 1791,    0,    0, 1814,    0,    0,  587, 1837, 1860,
     1883, 1906,    0,    0, 1929, 1094, 1076, 1076, 1090, 1057,
     1055, 1054, 1053, 1052, 1051, 1050, 1049, 4046,  322,  384,

      506,  597, 1035, 1034, 1033, 1030,  639,  229, 1943,    0,
        0, 1964,  293, 1982,    0,    0, 2003,  631, 1029, 1000,
      999,  996,  995,  632,  969,  968,  967,  966,  965, 2021,
     2044, 2067,    0,  599, 2080, 2098,    0, 2112, 2130,    0,
     2153,    0,    0,    0,    0, 2176,  626,    0,  944,  926,
      457,    0,  627,  925,  922, 2197,    0,    0,    0,    0,
     2220,  714,  746, 2243,  747,  748,    0,    0, 2266, 2289,
        0,    0,  941,  924,  923,  922,  921,  920,  919,  918,
      900,  899,  896,  895,  846,  660,  667,  674,  519, 2312,
      814,  815,  598, 2330,  824, 1011,  845,  832,  831,  830,

      829,  828,  826,  825,  800,  792,  791,  772,    0,    0,
      771, 2348, 2362, 2380,    0,  750,  749, 2403,  730,  723,
     2417, 2426, 2434, 2452,    0, 2475, 2498, 2521, 2544,    0,
      633,    0, 2565,  637, 2573, 2591, 2614,    0,  658,  665,
     2627, 2645, 2668, 2676, 2694, 2717,    0,  688,  695,  702,
     1012, 1027, 1028, 1087,  735,  716,  709,  638,  615,  603,
      576,  561,  554,    0,    0, 1088, 1091, 2730, 1132, 1168,
      693, 2738, 1169,  529, 2759,    0, 2782, 2795, 2803, 2821,
     1170, 1172, 1173, 1176, 1177, 1178, 2844, 1228, 1229, 1230,
     1232, 1233, 1236, 1237, 1238,  547,  513,  509,  386,  356,

      351,  327,  324,    0, 2857,    0, 2878, 1265, 1341, 2901,
     2924, 1373, 1374,  721,  734, 2937, 1375, 1457, 1458, 1467,
     1924, 1925, 2945,  302,  215,  210,  119,  100,    0, 1926,
     1927, 2956,  741, 2964,  755, 2972, 1928, 1929, 2981, 2982,
       77,   48, 2983, 2984, 2985, 2986, 2987, 2988,   46, 4046,
     3010, 3023, 3033, 3045, 3057, 3067, 3077, 3089, 3101, 3113,
     3118, 3120, 3123, 3125, 3135, 3147, 3159, 3171, 3183, 3195,
     3207, 3219, 3231, 3243, 3255, 3265, 3268, 3276, 3288, 3300,
     3312, 3322, 3332, 3344, 3356, 3366, 3378, 3390, 3402, 3407,
     3409, 3414, 3417, 3419, 3424, 3434, 3446, 3458, 3468, 3480,

     3492, 3504, 3516, 3528, 3540, 3552, 3564, 3574, 3586, 3598,
     3610, 3622, 3632, 3635, 3637, 3647, 3659, 3669, 3681, 3693,
     3703, 3715, 3722, 3724, 3729, 3731, 3741, 3751, 3763, 3775,
     3785, 3797, 3804, 3806, 3816, 3828, 3840, 3852, 3864, 3876,
     3888, 3892, 3902, 3914, 3926, 3938, 3950, 3962, 3972, 3982,
     3994, 4006, 4010, 4020, 4032
    } ;

static const flex_int16_t yy_def[756] =
    {   0,
      651,  651,  650,    3,  652,  652,  652,    7,    7,    9,
      652,  652,  652,  652,  652,   15,   15,   17,  652,   19,
      650,   21,  650,   23,  652,  652,  652,  652,  650,   29,
       29,   31,   19,   19,  650,   35,  650,   37,  652,  652,
      652,  652,  652,   43,   43,   45,   19,   19,  652,   49,
      652,  652,  652,  652,  652,  652,  652,   57,   19,   19,
      650,   61,  652,  652,  652,  652,  652,  652,  652,  652,
      650,   71,   71,   71,  650,  650,  650,   77,  650,  650,
      650,  650,  653,  650,  650,  650,  653,  650,   88,  654,
      650,  655,  656,  650,   94,  650,  657,  650,  658,  659,

      660,  650,  102,  650,  650,  650,  106,  650,  661,  662,
      106,  111,  650,  113,  663,  664,  113,  117,  650,  119,
      650,  665,  650,  650,  666,  667,  668,  650,  128,  650,
      669,  669,  650,  669,  670,  670,  670,  650,  138,  650,
      671,  650,  672,  673,  674,  650,  146,  650,  675,  675,
      650,  675,  650,  153,  650,  676,  650,  650,  650,  159,
      650,  650,  650,  162,  650,  650,  164,  650,  650,  650,
      650,  677,  650,  650,  650,  175,  174,  650,  177,  650,
      180,  650,  650,  650,  184,  185,  185,  185,  650,  650,
      678,  650,  650,  678,  678,  678,  678,  678,  678,  679,

      678,  650,  202,  650,  650,  205,  650,  680,  650,  680,
      650,  681,  682,  650,  682,  650,  216,  650,  650,  650,
      683,  650,  684,  650,  685,  684,  686,  687,  688,  689,
      650,  231,  650,  650,  234,  650,  690,  691,  234,  239,
      650,  239,  650,  239,  243,  692,  650,  247,  693,  694,
      247,  251,  251,  650,  251,  254,  695,  650,  258,  650,
      650,  650,  696,  650,  650,  697,  264,  650,  698,  697,
      699,  700,  701,  702,  650,  275,  650,  703,  703,  650,
      703,  650,  281,  704,  704,  704,  286,  650,  288,  650,
      650,  650,  705,  650,  706,  650,  707,  706,  708,  709,

      710,  711,  650,  303,  650,  712,  712,  650,  712,  650,
      309,  650,  312,  650,  713,  650,  650,  650,  317,  319,
      317,  317,  650,  323,  650,  650,  650,  326,  650,  328,
      328,  328,  326,  328,  328,  328,  650,  650,  650,  650,
      650,  340,  650,  343,  650,  345,  344,  650,  347,  338,
      340,  714,  650,  344,  650,  355,  347,  348,  347,  650,
      340,  340,  340,  340,  650,  715,  650,  716,  716,  650,
      650,  650,  347,  347,  650,  347,  347,  355,  650,  650,
      650,  650,  348,  348,  650,  650,  650,  650,  650,  650,
      717,  717,  717,  717,  650,  717,  717,  650,  718,  718,

      719,  650,  650,  720,  721,  721,  722,  723,  650,  409,
      724,  650,  725,  650,  414,  726,  650,  650,  650,  727,
      728,  728,  729,  650,  650,  730,  731,  731,  732,  650,
      650,  650,  432,  328,  340,  650,  344,  375,  650,  375,
      650,  360,  360,  360,  360,  650,  367,  446,  367,  367,
      733,  379,  371,  371,  371,  650,  372,  372,  372,  372,
      650,  375,  375,  650,  379,  379,  380,  734,  650,  650,
      382,  382,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  720,  735,  736,  736,  722,  723,  650,
      412,  412,  725,  650,  417,  417,  650,  727,  737,  738,

      738,  729,  650,  730,  739,  740,  740,  741,  430,  430,
      431,  650,  436,  650,  513,  436,  436,  650,  438,  438,
      360,  372,  372,  650,  524,  650,  650,  650,  650,  529,
      734,  742,  650,  469,  469,  650,  650,  537,  527,  518,
      527,  650,  650,  536,  650,  650,  546,  743,  743,  744,
      490,  490,  494,  494,  745,  745,  738,  746,  746,  747,
      747,  741,  748,  512,  512,  513,  513,  360,  514,  514,
      526,  513,  514,  537,  650,  575,  650,  572,  542,  650,
      528,  528,  533,  533,  536,  536,  650,  542,  542,  543,
      543,  544,  544,  545,  545,  749,  549,  750,  745,  751,

      752,  752,  747,  753,  514,  605,  650,  572,  572,  650,
      650,  575,  575,  607,  587,  580,  578,  578,  579,  579,
      580,  580,  575,  749,  750,  754,  754,  752,  753,  605,
      605,  514,  610,  514,  611,  623,  616,  616,  623,  623,
      755,  754,  632,  632,  634,  634,  636,  636,  755,    0,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650
    } ;

static const flex_int16_t yy_nxt[4071] =
    {   0,
      650,   77,   78,   78,  221,  227,   79,   77,   78,   78,
      222,  222,   79,   80,   81,   82,   82,   83,   84,   85,
       86,   80,   80,   83,   80,   80,   80,   80,   80,   80,
       80,   80,   83,   83,   83,   83,   87,   88,   89,   89,
      199,   90,  208,   91,   92,  293,  209,  650,   80,  641,
      200,  294,  199,  199,  398,   93,   93,   93,   93,   93,
       93,   93,   94,   95,   95,  199,  219,   96,   94,   95,
       95,  261,  291,   96,   97,  650,  220,  225,  641,  269,
       98,  262,  292,  297,   99,   99,   99,   99,   99,   99,
       99,   99,  396,   99,   99,  100,  223,  223,  266,  266,

      208,  627,  295,  295,  209,  101,  101,  101,  101,  101,
      101,  101,  101,  299,  101,  101,  102,  103,  103,  294,
      627,  104,   91,  105,  106,  107,  107,  105,  105,  105,
      108,  109,  109,  110,  111,  112,  112,  112,  112,  112,
      112,  112,  105,  105,  105,  105,  105,  105,  113,  114,
      114,  105,  105,  105,  108,  115,  115,  116,  117,  118,
      118,  118,  118,  118,  118,  118,  105,  105,  105,  105,
      105,  119,  120,  120,  315,  221,  121,  119,  120,  120,
      316,  222,  121,   80,  122,  123,  123,   80,   80,   80,
      124,   80,   80,   80,  125,  125,  125,  125,  125,  125,

      125,  125,   80,  125,  125,   80,   80,  126,  401,  227,
      650,  641,  209,  411,  411,  222,  598,  127,  127,  127,
      127,  127,  127,  127,  127,  397,  127,  127,  128,  129,
      129,  416,  416,  130,  128,  129,  129,  489,  489,  130,
       80,  131,  132,  132,   80,   80,   80,  133,   80,   80,
       80,  134,  134,  134,  134,  134,  134,  134,  134,   80,
      134,  134,   80,   80,   80,  135,  136,  136,   80,   80,
       80,  133,   80,   80,   80,  137,  137,  137,  137,  137,
      137,  137,  137,   80,  137,  137,   80,   80,  138,  139,
      139,  199,  199,  140,  138,  139,  139,  219,  219,  140,

      141,  493,  493,  596,  199,  199,  142,  220,  220,  199,
      143,  143,  143,  143,  143,  143,  143,  143,  402,  143,
      143,  144,  199,  400,  293,  602,  199,  398,  602,  403,
      294,  145,  145,  145,  145,  145,  145,  145,  145,  199,
      145,  145,  146,  147,  147,  199,  199,  148,  146,  147,
      147,  261,  627,  148,  149,  150,  150,  600,  199,  199,
      151,  262,  199,  199,  152,  152,  152,  152,  152,  152,
      152,  152,  153,  154,  154,  199,  199,  155,  153,  154,
      154,  261,  238,  155,  156,  400,  225,  598,  299,  398,
      157,  262,  225,  650,  294,  158,  158,  158,  158,  158,

      158,  158,  159,  160,  160,  223,  223,  161,  159,  160,
      160,  223,  223,  161,   80,  162,  163,  163,  164,  164,
      165,  166,   80,   80,  164,   80,   80,   80,   80,   80,
       80,   80,   80,  164,  164,  164,  164,  167,   80,  168,
      169,  169,  170,  170,   85,  171,  172,  173,  174,  175,
      176,  176,  176,  176,  176,  176,  176,  177,  178,  178,
      177,  179,  180,  181,  181,  532,  532,  182,  183,  184,
      185,  186,  187,  188,  188,  188,  189,  190,  190,  191,
      191,  192,  193,  194,  194,  195,  194,  194,  194,  194,
      194,  194,  194,  194,  191,  191,  191,  191,  196,  189,

      190,  190,  197,  197,  192,  193,  291,  401,  197,  315,
      598,  209,  250,  418,  596,  316,  292,  197,  197,  197,
      197,  198,  200,  650,  419,  194,  201,  650,  650,  194,
      202,  203,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  203,  205,  206,  206,  596,  269,
      611,  207,  212,  206,  206,  563,  269,  434,  207,  216,
      217,  217,  561,  650,  218,  231,  232,  232,  266,  266,
      233,  207,  234,  235,  235,  266,  266,  561,  236,  237,
      237,  238,  239,  240,  240,  240,  240,  240,  240,  240,
      244,  650,  650,  291,  424,  297,  650,  370,  402,  245,

      434,  327,  327,  292,  602,  425,  650,  650,  380,  403,
      246,  247,  248,  248,  295,  295,  559,  236,  249,  249,
      250,  251,  252,  252,  252,  252,  252,  252,  252,  255,
      650,  650,  418,  424,  297,  650,  366,  370,  256,  600,
      487,  468,  468,  419,  425,  468,  469,  650,  369,  257,
      258,  259,  259,  295,  295,  260,  263,  264,  264,  407,
      407,  549,  265,  267,  264,  264,  526,  527,  487,  265,
      271,  264,  264,  362,  362,  487,  265,  275,  276,  276,
      486,  486,  277,  207,  278,  279,  279,  486,  486,  596,
      280,  278,  279,  279,  407,  407,  549,  280,  283,  650,

      650,  526,  526,  549,  650,  284,  285,  285,  548,  548,
      556,  280,  284,  285,  285,  548,  548,  556,  280,  287,
      650,  650,  486,  486,  440,  650,  288,  289,  289,  443,
      443,  290,  303,  304,  304,  539,  598,  305,  207,  306,
      307,  307,  443,  457,  539,  308,  306,  307,  307,  443,
      443,  539,  308,  311,  650,  650,  440,  379,  379,  650,
      312,  313,  313,  443,  457,  314,  319,  539,  534,  534,
      571,  571,  563,  561,  320,  320,  321,  322,  322,  322,
      322,  322,  322,  322,  320,  320,  320,  320,  320,  323,
      324,  324,  507,  559,  325,  207,  326,  327,  327,  328,

      328,  505,  329,  330,  330,  331,  330,  330,  330,  330,
      330,  330,  330,  330,  328,  328,  328,  328,  332,  333,
      327,  327,  334,  334,  245,  245,  504,  503,  334,  501,
      501,  556,  499,  498,  256,  246,  246,  334,  334,  334,
      334,  335,  336,  650,  650,  257,  497,  485,  650,  338,
      339,  339,  340,  340,  192,  341,  342,  343,  344,  345,
      346,  346,  346,  346,  346,  346,  346,  347,  348,  348,
      347,  349,  350,  339,  339,  351,  351,  192,  341,  352,
      353,  354,  355,  356,  356,  356,  356,  356,  356,  356,
      357,  358,  358,  357,  359,  360,  484,  483,  361,  361,

      482,  481,  362,  362,  363,  362,  362,  362,  362,  362,
      362,  362,  362,  361,  361,  361,  361,  364,  368,  480,
      479,  478,  482,  481,  480,  479,  369,  370,  371,  371,
      371,  371,  371,  371,  371,  371,  369,  369,  369,  369,
      369,  372,  478,  534,  361,  361,  534,  531,  362,  373,
      374,  375,  375,  375,  375,  375,  375,  375,  375,  376,
      376,  376,  376,  377,  378,  531,  507,  428,  505,  504,
      503,  352,  353,  379,  355,  356,  356,  356,  356,  356,
      356,  356,  369,  380,  381,  369,  369,  373,  373,  373,
      373,  373,  373,  373,  373,  382,  501,  422,  361,  361,

      499,  498,  362,  373,  374,  383,  383,  383,  383,  383,
      383,  383,  383,  376,  384,  384,  376,  377,  180,  181,
      181,  256,  245,  182,  183,  385,  386,  387,  388,  390,
      497,  406,  257,  246,  485,  484,  483,  245,  256,  391,
      392,  393,  394,  392,  392,  392,  392,  395,  246,  257,
      482,  481,  395,  480,  479,  650,  478,  392,  390,  392,
      392,  189,  190,  190,  191,  191,  192,  193,  194,  194,
      195,  194,  194,  194,  194,  194,  194,  194,  194,  191,
      191,  191,  191,  196,  189,  190,  190,  197,  197,  192,
      193,  389,  477,  197,  476,  395,  368,  256,  515,  368,

      365,  515,  197,  197,  197,  197,  198,  400,  257,  571,
      194,  201,  571,  366,  194,  202,  203,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  203,
      205,  206,  206,  365,  337,  337,  207,  212,  206,  206,
      431,  318,  606,  207,  216,  217,  217,  318,  310,  218,
      231,  232,  232,  607,  310,  233,  207,  234,  235,  235,
      428,  301,  301,  236,  237,  237,  238,  239,  240,  240,
      240,  240,  240,  240,  240,  244,  650,  650,  606,  606,
      440,  650,  440,  448,  245,  297,  448,  379,  379,  607,
      610,  441,  296,  441,  531,  246,  244,  531,  534,  534,

      296,  282,  282,  237,  237,  238,  409,  410,  410,  410,
      410,  410,  410,  410,  422,  273,  408,  247,  248,  248,
      273,  269,  268,  236,  249,  249,  250,  251,  252,  252,
      252,  252,  252,  252,  252,  255,  650,  650,  440,  440,
      448,  650,  448,  379,  256,  268,  379,  379,  379,  539,
      539,  531,  413,  531,  534,  257,  255,  534,  381,  381,
      250,  408,  241,  249,  249,  250,  414,  415,  415,  415,
      415,  415,  415,  415,  238,  515,  413,  258,  259,  259,
      241,  406,  260,  263,  264,  264,  571,  229,  229,  265,
      267,  264,  264,  225,  224,  224,  265,  271,  264,  264,

      214,  214,  214,  265,  275,  276,  276,  211,  211,  277,
      207,  278,  279,  279,  204,  204,  650,  280,  278,  279,
      279,  389,  366,  365,  280,  283,  650,  650,  337,  318,
      310,  650,  284,  285,  285,  301,  296,  282,  280,  284,
      285,  285,  273,  268,  250,  280,  287,  650,  650,  238,
      241,  515,  650,  288,  289,  289,  229,  224,  290,  303,
      304,  304,  571,  214,  305,  207,  306,  307,  307,  211,
      204,  650,  308,  306,  307,  307,  650,  650,  650,  308,
      311,  650,  650,  576,  576,  515,  650,  312,  313,  313,
      650,  650,  314,  319,  587,  587,  571,  650,  650,  650,

      650,  320,  320,  321,  322,  322,  322,  322,  322,  322,
      322,  320,  320,  320,  320,  320,  320,  430,  430,  430,
      430,  430,  430,  430,  432,  433,  433,  433,  433,  433,
      433,  433,  323,  324,  324,  650,  650,  325,  207,  326,
      327,  327,  328,  328,  650,  329,  330,  330,  331,  330,
      330,  330,  330,  330,  330,  330,  330,  328,  328,  328,
      328,  332,  333,  327,  327,  334,  334,  515,  440,  650,
      650,  334,  650,  650,  650,  650,  650,  440,  571,  539,
      334,  334,  334,  334,  335,  336,  650,  650,  539,  650,
      650,  650,  338,  339,  339,  340,  340,  192,  341,  342,

      343,  344,  345,  346,  346,  346,  346,  346,  346,  346,
      347,  348,  348,  347,  349,  350,  339,  339,  351,  351,
      192,  341,  352,  353,  354,  355,  356,  356,  356,  356,
      356,  356,  356,  357,  358,  358,  357,  359,  360,  650,
      650,  361,  361,  650,  650,  362,  362,  363,  362,  362,
      362,  362,  362,  362,  362,  362,  361,  361,  361,  361,
      364,  435,  436,  436,  436,  436,  436,  436,  436,  436,
      372,  650,  650,  361,  361,  650,  650,  362,  373,  437,
      438,  438,  438,  438,  438,  438,  438,  438,  376,  376,
      376,  376,  377,  374,  375,  375,  375,  375,  375,  375,

      375,  375,  439,  650,  650,  361,  361,  650,  650,  342,
      343,  440,  345,  346,  346,  346,  346,  346,  346,  346,
      376,  384,  441,  376,  377,  373,  373,  373,  373,  373,
      373,  373,  373,  382,  650,  650,  361,  361,  650,  650,
      362,  373,  374,  383,  383,  383,  383,  383,  383,  383,
      383,  376,  384,  384,  376,  377,  368,  650,  650,  650,
      650,  650,  650,  650,  369,  370,  371,  371,  371,  371,
      371,  371,  371,  371,  369,  369,  369,  369,  369,  378,
      650,  650,  650,  650,  650,  650,  352,  353,  379,  355,
      356,  356,  356,  356,  356,  356,  356,  369,  380,  381,

      369,  369,  360,  650,  650,  442,  442,  650,  650,  443,
      443,  444,  443,  443,  443,  443,  443,  443,  443,  443,
      442,  442,  442,  442,  445,  447,  650,  650,  650,  650,
      650,  650,  352,  352,  448,  449,  450,  450,  450,  450,
      450,  450,  450,  650,  650,  451,  368,  650,  650,  650,
      650,  650,  650,  650,  369,  369,  452,  452,  452,  452,
      452,  452,  452,  452,  369,  369,  369,  369,  369,  453,
      650,  650,  650,  650,  650,  650,  352,  353,  379,  454,
      455,  455,  455,  455,  455,  455,  455,  369,  369,  456,
      369,  369,  372,  650,  650,  442,  442,  650,  650,  443,

      457,  458,  457,  457,  457,  457,  457,  457,  457,  457,
      459,  459,  459,  459,  460,  461,  650,  650,  361,  361,
      650,  650,  342,  343,  437,  462,  463,  463,  463,  463,
      463,  463,  463,  376,  376,  464,  376,  377,  453,  650,
      650,  650,  650,  650,  650,  352,  353,  370,  465,  466,
      466,  466,  466,  466,  466,  466,  369,  369,  456,  369,
      369,  467,  650,  650,  650,  650,  650,  650,  650,  369,
      369,  380,  380,  380,  380,  380,  380,  380,  380,  369,
      380,  380,  369,  369,  467,  650,  650,  650,  650,  650,
      650,  468,  469,  369,  470,  470,  470,  470,  470,  470,

      470,  470,  369,  380,  380,  369,  369,  382,  650,  650,
      442,  442,  650,  650,  443,  457,  458,  471,  471,  471,
      471,  471,  471,  471,  471,  459,  472,  472,  459,  460,
      390,  650,  650,  650,  576,  576,  606,  606,  576,  576,
      473,  650,  474,  475,  244,  577,  577,  607,  607,  577,
      577,  237,  237,  245,  409,  410,  410,  410,  410,  410,
      410,  410,  650,  650,  246,  244,  650,  650,  650,  650,
      650,  650,  237,  237,  238,  491,  492,  492,  492,  492,
      492,  492,  492,  255,  650,  650,  650,  650,  650,  650,
      249,  249,  256,  414,  415,  415,  415,  415,  415,  415,

      415,  650,  650,  257,  255,  650,  650,  650,  650,  650,
      650,  249,  249,  250,  495,  496,  496,  496,  496,  496,
      496,  496,  431,  650,  650,  650,  650,  650,  650,  650,
      320,  320,  509,  510,  510,  510,  510,  510,  510,  510,
      320,  320,  320,  320,  320,  431,  650,  650,  650,  650,
      650,  650,  650,  511,  511,  511,  512,  512,  512,  512,
      512,  512,  512,  511,  511,  511,  511,  511,  319,  650,
      650,  650,  650,  650,  650,  650,  320,  320,  432,  433,
      433,  433,  433,  433,  433,  433,  320,  320,  320,  320,
      320,  513,  513,  513,  513,  513,  513,  513,  513,  514,

      650,  650,  361,  361,  650,  650,  342,  342,  515,  516,
      517,  517,  517,  517,  517,  517,  517,  361,  361,  518,
      361,  364,  440,  519,  520,  520,  520,  520,  520,  520,
      520,  439,  650,  650,  442,  442,  650,  650,  521,  522,
      523,  524,  525,  525,  525,  525,  525,  525,  525,  459,
      472,  472,  459,  460,  382,  650,  650,  361,  361,  650,
      650,  526,  527,  374,  528,  528,  528,  528,  528,  528,
      528,  528,  376,  384,  384,  376,  377,  447,  650,  650,
      650,  650,  650,  650,  352,  352,  366,  529,  530,  530,
      530,  530,  530,  530,  530,  650,  650,  451,  368,  650,

      650,  650,  650,  650,  650,  532,  535,  369,  536,  536,
      536,  536,  536,  536,  536,  536,  369,  369,  369,  369,
      369,  461,  650,  650,  442,  442,  650,  650,  521,  522,
      523,  537,  538,  538,  538,  538,  538,  538,  538,  459,
      459,  459,  459,  460,  372,  650,  650,  361,  361,  650,
      650,  540,  541,  374,  542,  542,  542,  542,  542,  542,
      542,  542,  376,  376,  376,  376,  377,  368,  650,  650,
      650,  650,  650,  650,  650,  369,  369,  544,  544,  544,
      544,  544,  544,  544,  544,  369,  369,  369,  369,  369,
      545,  650,  650,  650,  650,  650,  650,  352,  353,  370,

      546,  547,  547,  547,  547,  547,  547,  547,  369,  380,
      380,  369,  369,  244,  650,  650,  650,  650,  650,  650,
      237,  237,  238,  551,  552,  552,  552,  552,  552,  552,
      552,  255,  650,  650,  650,  650,  650,  650,  249,  249,
      250,  553,  554,  554,  554,  554,  554,  554,  554,  563,
      650,  650,  650,  650,  650,  650,  650,  511,  511,  564,
      565,  565,  565,  565,  565,  565,  565,  511,  511,  511,
      511,  511,  435,  566,  567,  567,  567,  567,  567,  567,
      567,  514,  650,  650,  442,  442,  650,  650,  521,  521,
      568,  569,  570,  570,  570,  570,  570,  570,  570,  442,

      442,  442,  442,  445,  360,  650,  650,  361,  361,  650,
      650,  540,  540,  363,  572,  572,  572,  572,  572,  572,
      572,  572,  361,  361,  361,  361,  364,  568,  573,  573,
      573,  573,  573,  573,  573,  573,  523,  574,  574,  574,
      574,  574,  574,  574,  574,  575,  575,  575,  575,  575,
      575,  575,  575,  439,  650,  650,  442,  442,  650,  650,
      521,  522,  576,  524,  525,  525,  525,  525,  525,  525,
      525,  459,  472,  577,  459,  460,  360,  650,  650,  361,
      361,  650,  650,  362,  362,  363,  578,  578,  578,  578,
      578,  578,  578,  578,  361,  361,  361,  361,  364,  372,

      650,  650,  361,  361,  650,  650,  362,  373,  374,  579,
      579,  579,  579,  579,  579,  579,  579,  376,  376,  376,
      376,  377,  580,  650,  650,  361,  361,  650,  650,  342,
      343,  437,  581,  582,  582,  582,  582,  582,  582,  582,
      376,  384,  384,  376,  377,  447,  650,  650,  650,  650,
      650,  650,  352,  352,  448,  529,  530,  530,  530,  530,
      530,  530,  530,  650,  650,  531,  447,  650,  650,  650,
      650,  650,  650,  352,  352,  366,  583,  584,  584,  584,
      584,  584,  584,  584,  536,  536,  536,  536,  536,  536,
      536,  536,  453,  650,  650,  650,  650,  650,  650,  352,

      353,  370,  585,  586,  586,  586,  586,  586,  586,  586,
      369,  369,  369,  369,  369,  461,  650,  650,  442,  442,
      650,  650,  521,  522,  576,  537,  538,  538,  538,  538,
      538,  538,  538,  459,  459,  587,  459,  460,  542,  542,
      542,  542,  542,  542,  542,  542,  461,  650,  650,  361,
      361,  650,  650,  342,  343,  437,  588,  589,  589,  589,
      589,  589,  589,  589,  376,  376,  376,  376,  377,  447,
      650,  650,  650,  650,  650,  650,  352,  352,  366,  590,
      591,  591,  591,  591,  591,  591,  591,  592,  593,  593,
      593,  593,  593,  593,  593,  545,  650,  650,  650,  650,

      650,  650,  352,  353,  370,  594,  595,  595,  595,  595,
      595,  595,  595,  369,  380,  380,  369,  369,  545,  650,
      650,  650,  650,  650,  650,  352,  353,  379,  546,  547,
      547,  547,  547,  547,  547,  547,  369,  380,  381,  369,
      369,  605,  605,  605,  605,  605,  605,  605,  605,  608,
      609,  609,  609,  609,  609,  609,  609,  650,  650,  361,
      461,  650,  650,  442,  442,  650,  650,  521,  522,  523,
      612,  613,  613,  613,  613,  613,  613,  613,  459,  459,
      611,  459,  460,  382,  650,  650,  442,  442,  650,  650,
      614,  615,  458,  616,  616,  616,  616,  616,  616,  616,

      616,  459,  472,  472,  459,  460,  617,  618,  618,  618,
      618,  618,  618,  618,  619,  620,  620,  620,  620,  620,
      620,  620,  580,  650,  650,  442,  442,  650,  650,  521,
      522,  523,  621,  622,  622,  622,  622,  622,  622,  622,
      459,  472,  472,  459,  460,  372,  650,  650,  442,  442,
      650,  650,  614,  615,  458,  623,  623,  623,  623,  623,
      623,  623,  623,  459,  459,  459,  459,  460,  630,  631,
      631,  631,  631,  631,  631,  631,  650,  650,  610,  360,
      650,  650,  442,  442,  650,  650,  614,  614,  444,  632,
      632,  632,  632,  632,  632,  632,  632,  442,  442,  442,

      442,  445,  360,  650,  650,  442,  442,  650,  650,  633,
      633,  444,  634,  634,  634,  634,  634,  634,  634,  634,
      442,  442,  442,  442,  445,  372,  650,  650,  442,  442,
      650,  650,  633,  635,  458,  636,  636,  636,  636,  636,
      636,  636,  636,  459,  459,  459,  459,  460,  637,  638,
      638,  638,  638,  638,  638,  638,  639,  640,  640,  640,
      640,  640,  640,  640,  650,  650,  459,  643,  644,  644,
      644,  644,  644,  644,  644,  645,  646,  646,  646,  646,
      646,  646,  646,  647,  648,  648,  648,  648,  648,  648,
      648,  576,  576,  606,  606,  606,  606,  576,  576,  650,

      650,  650,  587,  587,  607,  607,  607,  607,  587,  587,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,  194,  194,  650,  194,
      194,  194,  194,  194,  194,  194,  210,  650,  650,  210,
      650,  650,  210,  210,  210,  210,  210,  210,  213,  213,
      650,  650,  213,  650,  650,  650,  650,  213,  215,  650,
      650,  650,  650,  650,  650,  650,  215,  215,  223,  650,
      650,  650,  223,  650,  650,  650,  223,  223,  650,  223,
      226,  650,  650,  650,  650,  650,  650,  650,  226,  226,

      650,  226,  228,  650,  650,  650,  228,  650,  650,  650,
      228,  228,  650,  228,  230,  650,  650,  650,  650,  650,
      650,  650,  230,  230,  650,  230,  242,  242,  242,  243,
      243,  253,  253,  253,  254,  254,  266,  266,  650,  650,
      266,  650,  650,  650,  266,  266,  650,  266,  270,  650,
      650,  650,  650,  650,  650,  650,  270,  270,  650,  270,
      272,  272,  650,  650,  272,  650,  650,  650,  272,  272,
      650,  272,  274,  650,  650,  650,  650,  650,  650,  650,
      274,  274,  650,  274,  281,  281,  650,  650,  281,  650,
      650,  650,  281,  281,  650,  281,  286,  286,  650,  650,

      286,  650,  650,  650,  286,  286,  650,  286,  295,  650,
      650,  650,  295,  650,  650,  650,  295,  295,  650,  295,
      298,  650,  650,  650,  650,  650,  650,  650,  298,  298,
      650,  298,  300,  650,  650,  650,  300,  650,  650,  650,
      300,  300,  650,  300,  302,  650,  650,  650,  650,  650,
      650,  650,  302,  302,  650,  302,  309,  309,  650,  650,
      309,  650,  650,  650,  309,  309,  317,  650,  650,  650,
      317,  650,  650,  650,  650,  317,  367,  367,  367,  194,
      194,  650,  194,  194,  194,  194,  194,  194,  194,  399,
      650,  650,  399,  650,  650,  399,  399,  399,  399,  399,

      399,  210,  650,  650,  210,  650,  650,  210,  210,  210,
      210,  210,  210,  213,  213,  650,  650,  213,  650,  650,
      650,  650,  213,  215,  650,  650,  650,  650,  650,  650,
      650,  215,  215,  223,  650,  650,  650,  223,  650,  650,
      650,  223,  223,  650,  223,  226,  650,  650,  650,  650,
      650,  650,  650,  226,  226,  650,  226,  404,  650,  650,
      650,  650,  650,  650,  650,  404,  404,  228,  650,  650,
      650,  228,  650,  650,  650,  228,  228,  650,  228,  230,
      650,  650,  650,  650,  650,  650,  650,  230,  230,  650,
      230,  405,  650,  650,  650,  650,  650,  650,  650,  405,

      405,  650,  405,  407,  650,  650,  650,  650,  650,  650,
      650,  407,  407,  650,  407,  242,  242,  242,  243,  243,
      412,  412,  650,  412,  412,  253,  253,  253,  254,  254,
      417,  417,  650,  417,  417,  266,  266,  650,  650,  266,
      650,  650,  650,  266,  266,  650,  266,  270,  650,  650,
      650,  650,  650,  650,  650,  270,  270,  650,  270,  420,
      650,  650,  650,  650,  650,  650,  650,  420,  420,  272,
      272,  650,  650,  272,  650,  650,  650,  272,  272,  650,
      272,  274,  650,  650,  650,  650,  650,  650,  650,  274,
      274,  650,  274,  421,  650,  650,  650,  650,  650,  650,

      650,  421,  421,  650,  421,  423,  650,  650,  650,  650,
      650,  650,  650,  423,  423,  650,  423,  281,  281,  650,
      650,  281,  650,  650,  650,  281,  281,  650,  281,  286,
      286,  650,  650,  286,  650,  650,  650,  286,  286,  650,
      286,  295,  650,  650,  650,  295,  650,  650,  650,  295,
      295,  650,  295,  298,  650,  650,  650,  650,  650,  650,
      650,  298,  298,  650,  298,  426,  650,  650,  650,  650,
      650,  650,  650,  426,  426,  300,  650,  650,  650,  300,
      650,  650,  650,  300,  300,  650,  300,  302,  650,  650,
      650,  650,  650,  650,  650,  302,  302,  650,  302,  427,

      650,  650,  650,  650,  650,  650,  650,  427,  427,  650,
      427,  429,  650,  650,  650,  650,  650,  650,  650,  429,
      429,  650,  429,  309,  309,  650,  650,  309,  650,  650,
      650,  309,  309,  317,  650,  650,  650,  317,  650,  650,
      650,  650,  317,  367,  367,  367,  446,  446,  369,  650,
      650,  650,  650,  650,  369,  369,  369,  369,  369,  369,
      392,  650,  650,  650,  650,  650,  650,  650,  392,  392,
      399,  650,  650,  399,  650,  650,  399,  399,  399,  399,
      399,  399,  210,  650,  650,  210,  650,  650,  210,  210,
      210,  210,  210,  210,  404,  650,  650,  650,  650,  650,

      650,  650,  404,  404,  486,  650,  650,  650,  650,  650,
      650,  650,  486,  486,  650,  486,  488,  650,  650,  650,
      650,  650,  650,  650,  488,  488,  650,  488,  490,  490,
      650,  490,  490,  412,  412,  494,  494,  650,  494,  494,
      417,  417,  420,  650,  650,  650,  650,  650,  650,  650,
      420,  420,  500,  650,  650,  650,  650,  650,  650,  650,
      500,  500,  650,  500,  502,  650,  650,  650,  650,  650,
      650,  650,  502,  502,  650,  502,  426,  650,  650,  650,
      650,  650,  650,  650,  426,  426,  506,  650,  650,  650,
      650,  650,  650,  650,  506,  506,  650,  506,  508,  650,

      650,  650,  650,  650,  650,  650,  508,  508,  650,  508,
      533,  533,  650,  533,  533,  543,  543,  548,  650,  650,
      650,  650,  650,  650,  650,  548,  548,  650,  548,  550,
      650,  650,  650,  650,  650,  650,  650,  550,  550,  650,
      550,  555,  650,  650,  650,  650,  650,  650,  650,  555,
      555,  650,  555,  557,  650,  650,  650,  650,  650,  650,
      650,  557,  557,  650,  557,  558,  650,  650,  650,  650,
      650,  650,  650,  558,  558,  650,  558,  560,  650,  650,
      650,  650,  650,  650,  650,  560,  560,  650,  560,  562,
      650,  650,  650,  650,  650,  650,  650,  562,  562,  650,

      562,  533,  533,  597,  650,  650,  650,  650,  650,  650,
      650,  597,  597,  650,  597,  550,  650,  650,  650,  650,
      650,  650,  650,  550,  550,  650,  550,  599,  650,  650,
      650,  650,  650,  650,  650,  599,  599,  650,  599,  601,
      650,  650,  650,  650,  650,  650,  650,  601,  601,  650,
      601,  603,  650,  650,  650,  650,  650,  650,  650,  603,
      603,  650,  603,  604,  650,  650,  650,  650,  650,  650,
      650,  650,  604,  624,  650,  650,  650,  650,  650,  650,
      650,  624,  624,  625,  650,  650,  650,  650,  650,  650,
      650,  625,  625,  650,  625,  626,  650,  650,  650,  650,

      650,  650,  650,  626,  626,  650,  626,  628,  650,  650,
      650,  650,  650,  650,  650,  628,  628,  650,  628,  629,
      629,  642,  650,  650,  650,  650,  650,  650,  650,  642,
      642,  650,  642,  649,  650,  650,  650,  650,  650,  650,
      650,  649,  649,  650,  649,   75,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650
    } ;

static const flex_int16_t yy_chk[4071] =
    {   0,
        0,    1,    1,    1,   97,  100,    1,    2,    2,    2,
       97,  100,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    7,    7,    7,
       83,    7,   90,    7,    9,  141,   90,  649,    9,  642,
      200,  141,   87,   83,  200,    9,    9,    9,    9,    9,
        9,    9,   13,   13,   13,   87,   96,   13,   14,   14,
       14,  121,  140,   14,   15,  186,   96,   99,  641,  125,
       15,  121,  140,  143,   15,   15,   15,   15,   15,   15,
       15,   15,  186,   15,   15,   17,   99,   99,  125,  125,

      208,  628,  143,  143,  208,   17,   17,   17,   17,   17,
       17,   17,   17,  144,   17,   17,   19,   19,   19,  144,
      627,   19,   19,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   27,   27,   27,  156,  221,   27,   28,   28,   28,
      156,  221,   28,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   31,  210,  227,
      187,  626,  210,  246,  246,  227,  625,   31,   31,   31,
       31,   31,   31,   31,   31,  187,   31,   31,   33,   33,
       33,  257,  257,   33,   34,   34,   34,  408,  408,   34,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   41,   41,
       41,  191,  194,   41,   42,   42,   42,  218,  219,   42,

       43,  413,  413,  624,  191,  194,   43,  218,  219,  195,
       43,   43,   43,   43,   43,   43,   43,   43,  220,   43,
       43,   45,  195,  399,  293,  603,  196,  399,  602,  220,
      293,   45,   45,   45,   45,   45,   45,   45,   45,  196,
       45,   45,   47,   47,   47,  197,  198,   47,   48,   48,
       48,  260,  601,   48,   49,   49,   49,  600,  197,  198,
       49,  260,  199,  201,   49,   49,   49,   49,   49,   49,
       49,   49,   55,   55,   55,  199,  201,   55,   56,   56,
       56,  261,  244,   56,   57,  400,  223,  599,  299,  400,
       57,  261,  226,  244,  299,   57,   57,   57,   57,   57,

       57,   57,   59,   59,   59,  223,  223,   59,   60,   60,
       60,  226,  226,   60,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   77,   77,   77,  451,  451,   77,   79,   79,
       79,   79,   79,   79,   79,   79,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   82,

       82,   82,   82,   82,   82,   82,  290,  401,   82,  315,
      598,  401,  255,  262,  597,  315,  290,   82,   82,   82,
       82,   82,   84,  255,  262,   84,   84,  489,  489,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   88,   88,   88,  596,  266,
      574,   88,   92,   92,   92,  563,  270,  333,   92,   94,
       94,   94,  562,  333,   94,  102,  102,  102,  266,  266,
      102,  102,  106,  106,  106,  270,  270,  561,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      111,  111,  111,  291,  292,  295,  111,  378,  402,  111,

      434,  434,  434,  291,  560,  292,  493,  493,  378,  402,
      111,  113,  113,  113,  295,  295,  559,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  117,
      117,  117,  418,  424,  298,  117,  447,  453,  117,  558,
      407,  531,  531,  418,  424,  534,  534,  447,  453,  117,
      119,  119,  119,  298,  298,  119,  122,  122,  122,  407,
      407,  486,  122,  123,  123,  123,  539,  539,  487,  123,
      126,  126,  126,  540,  540,  488,  126,  128,  128,  128,
      486,  486,  128,  128,  131,  131,  131,  487,  487,  548,
      131,  132,  132,  132,  488,  488,  549,  132,  134,  134,

      134,  571,  571,  550,  134,  135,  135,  135,  548,  548,
      557,  135,  136,  136,  136,  549,  549,  556,  136,  137,
      137,  137,  550,  550,  462,  137,  138,  138,  138,  614,
      614,  138,  146,  146,  146,  462,  555,  146,  146,  149,
      149,  149,  615,  615,  520,  149,  150,  150,  150,  633,
      633,  519,  150,  152,  152,  152,  463,  465,  466,  152,
      153,  153,  153,  635,  635,  153,  158,  463,  465,  466,
      517,  516,  511,  508,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  159,
      159,  159,  507,  506,  159,  159,  162,  162,  162,  162,

      162,  505,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  163,
      163,  163,  163,  163,  491,  492,  504,  503,  163,  502,
      501,  500,  499,  498,  495,  491,  492,  163,  163,  163,
      163,  163,  164,  164,  164,  495,  497,  485,  164,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  170,  484,  483,  170,  170,

      482,  481,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  173,  480,
      479,  478,  477,  476,  475,  474,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  174,  473,  455,  174,  174,  454,  450,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  175,  449,  429,  428,  427,  426,
      425,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  177,  177,  177,
      177,  177,  177,  177,  177,  178,  423,  422,  178,  178,

      421,  420,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  180,  180,
      180,  496,  551,  180,  182,  182,  182,  182,  182,  184,
      419,  406,  496,  551,  405,  404,  403,  552,  553,  184,
      184,  184,  184,  184,  184,  184,  184,  185,  552,  553,
      397,  396,  395,  394,  393,  392,  391,  185,  390,  185,
      185,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  190,  190,  190,  190,  190,  190,
      190,  389,  388,  190,  387,  386,  369,  554,  566,  368,

      365,  567,  190,  190,  190,  190,  190,  202,  554,  566,
      202,  202,  567,  352,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      205,  205,  205,  341,  337,  329,  205,  212,  212,  212,
      320,  318,  569,  212,  216,  216,  216,  316,  310,  216,
      231,  231,  231,  569,  308,  231,  231,  234,  234,  234,
      302,  301,  300,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  239,  239,  239,  570,  573,
      581,  239,  582,  583,  239,  297,  584,  585,  586,  570,
      573,  581,  296,  582,  583,  239,  243,  584,  585,  586,

      294,  282,  280,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  274,  273,  243,  247,  247,  247,
      272,  269,  268,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  251,  251,  251,  588,  589,
      590,  251,  591,  592,  251,  265,  593,  594,  595,  588,
      589,  590,  253,  591,  592,  251,  254,  593,  594,  595,
      249,  242,  241,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  237,  608,  254,  258,  258,  258,
      236,  230,  258,  263,  263,  263,  608,  229,  228,  263,
      264,  264,  264,  225,  224,  222,  264,  271,  271,  271,

      215,  214,  213,  271,  275,  275,  275,  211,  207,  275,
      275,  278,  278,  278,  204,  193,  188,  278,  279,  279,
      279,  183,  172,  171,  279,  281,  281,  281,  166,  157,
      151,  281,  284,  284,  284,  145,  142,  133,  284,  285,
      285,  285,  127,  124,  115,  285,  286,  286,  286,  109,
      108,  609,  286,  288,  288,  288,  101,   98,  288,  303,
      303,  303,  609,   93,  303,  303,  306,  306,  306,   91,
       86,   75,  306,  307,  307,  307,    0,    0,    0,  307,
      309,  309,  309,  612,  613,  617,  309,  312,  312,  312,
        0,    0,  312,  317,  612,  613,  617,    0,    0,    0,

        0,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  319,  319,  319,  319,
      319,  319,  319,  319,  322,  322,  322,  322,  322,  322,
      322,  322,  323,  323,  323,    0,    0,  323,  323,  326,
      326,  326,  326,  326,    0,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  327,  327,  327,  327,  327,  618,  619,    0,
        0,  327,    0,    0,    0,    0,    0,  620,  618,  619,
      327,  327,  327,  327,  327,  328,  328,  328,  620,    0,
        0,  328,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  340,    0,
        0,  340,  340,    0,    0,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      343,    0,    0,  343,  343,    0,    0,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  345,    0,    0,  345,  345,    0,    0,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  347,  347,  347,  347,  347,
      347,  347,  347,  348,    0,    0,  348,  348,    0,    0,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  353,    0,    0,    0,
        0,    0,    0,    0,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  355,
        0,    0,    0,    0,    0,    0,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,

      355,  355,  360,    0,    0,  360,  360,    0,    0,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  367,    0,    0,    0,    0,
        0,    0,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,    0,    0,  367,  370,    0,    0,    0,
        0,    0,    0,    0,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  371,
        0,    0,    0,    0,    0,    0,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  372,    0,    0,  372,  372,    0,    0,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  375,    0,    0,  375,  375,
        0,    0,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  379,    0,
        0,    0,    0,    0,    0,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  380,    0,    0,    0,    0,    0,    0,    0,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  381,    0,    0,    0,    0,    0,
        0,  381,  381,  381,  381,  381,  381,  381,  381,  381,

      381,  381,  381,  381,  381,  381,  381,  382,    0,    0,
      382,  382,    0,    0,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      385,    0,    0,    0,  621,  622,  630,  631,  637,  638,
      385,    0,  385,  385,  409,  621,  622,  630,  631,  637,
      638,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,    0,    0,  409,  412,    0,    0,    0,    0,
        0,    0,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  414,    0,    0,    0,    0,    0,    0,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,

      414,    0,    0,  414,  417,    0,    0,    0,    0,    0,
        0,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  430,    0,    0,    0,    0,    0,    0,    0,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  431,    0,    0,    0,    0,
        0,    0,    0,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  432,    0,
        0,    0,    0,    0,    0,    0,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  435,  435,  435,  435,  435,  435,  435,  435,  436,

        0,    0,  436,  436,    0,    0,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  439,    0,    0,  439,  439,    0,    0,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  441,    0,    0,  441,  441,    0,
        0,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  446,    0,    0,
        0,    0,    0,    0,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,    0,    0,  446,  456,    0,

        0,    0,    0,    0,    0,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  461,    0,    0,  461,  461,    0,    0,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  464,    0,    0,  464,  464,    0,
        0,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  469,    0,    0,
        0,    0,    0,    0,    0,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      470,    0,    0,    0,    0,    0,    0,  470,  470,  470,

      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  490,    0,    0,    0,    0,    0,    0,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  494,    0,    0,    0,    0,    0,    0,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  512,
        0,    0,    0,    0,    0,    0,    0,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  514,    0,    0,  514,  514,    0,    0,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  518,    0,    0,  518,  518,    0,
        0,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  523,  523,  523,  523,  523,
      523,  523,  523,  524,    0,    0,  524,  524,    0,    0,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  526,    0,    0,  526,
      526,    0,    0,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  527,

        0,    0,  527,  527,    0,    0,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  528,    0,    0,  528,  528,    0,    0,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  529,    0,    0,    0,    0,
        0,    0,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,    0,    0,  529,  533,    0,    0,    0,
        0,    0,    0,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  535,  535,  535,  535,  535,  535,
      535,  535,  536,    0,    0,    0,    0,    0,    0,  536,

      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  537,    0,    0,  537,  537,
        0,    0,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  541,  541,
      541,  541,  541,  541,  541,  541,  542,    0,    0,  542,
      542,    0,    0,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  543,
        0,    0,    0,    0,    0,    0,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  544,  544,  544,
      544,  544,  544,  544,  544,  545,    0,    0,    0,    0,

        0,    0,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  546,    0,
        0,    0,    0,    0,    0,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  568,  568,  568,  568,  568,  568,  568,  568,  572,
      572,  572,  572,  572,  572,  572,  572,    0,    0,  572,
      575,    0,    0,  575,  575,    0,    0,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  577,    0,    0,  577,  577,    0,    0,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  577,  577,  577,  577,  577,  578,  578,  578,  578,
      578,  578,  578,  578,  579,  579,  579,  579,  579,  579,
      579,  579,  580,    0,    0,  580,  580,    0,    0,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  587,    0,    0,  587,  587,
        0,    0,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  605,  605,
      605,  605,  605,  605,  605,  605,    0,    0,  605,  607,
        0,    0,  607,  607,    0,    0,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,

      607,  607,  610,    0,    0,  610,  610,    0,    0,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  611,    0,    0,  611,  611,
        0,    0,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  616,  616,
      616,  616,  616,  616,  616,  616,  623,  623,  623,  623,
      623,  623,  623,  623,    0,    0,  623,  632,  632,  632,
      632,  632,  632,  632,  632,  634,  634,  634,  634,  634,
      634,  634,  634,  636,  636,  636,  636,  636,  636,  636,
      636,  639,  640,  643,  644,  645,  646,  647,  648,    0,

        0,    0,  639,  640,  643,  644,  645,  646,  647,  648,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  653,  653,    0,  653,
      653,  653,  653,  653,  653,  653,  654,    0,    0,  654,
        0,    0,  654,  654,  654,  654,  654,  654,  655,  655,
        0,    0,  655,    0,    0,    0,    0,  655,  656,    0,
        0,    0,    0,    0,    0,    0,  656,  656,  657,    0,
        0,    0,  657,    0,    0,    0,  657,  657,    0,  657,
      658,    0,    0,    0,    0,    0,    0,    0,  658,  658,

        0,  658,  659,    0,    0,    0,  659,    0,    0,    0,
      659,  659,    0,  659,  660,    0,    0,    0,    0,    0,
        0,    0,  660,  660,    0,  660,  661,  661,  661,  662,
      662,  663,  663,  663,  664,  664,  665,  665,    0,    0,
      665,    0,    0,    0,  665,  665,    0,  665,  666,    0,
        0,    0,    0,    0,    0,    0,  666,  666,    0,  666,
      667,  667,    0,    0,  667,    0,    0,    0,  667,  667,
        0,  667,  668,    0,    0,    0,    0,    0,    0,    0,
      668,  668,    0,  668,  669,  669,    0,    0,  669,    0,
        0,    0,  669,  669,    0,  669,  670,  670,    0,    0,

      670,    0,    0,    0,  670,  670,    0,  670,  671,    0,
        0,    0,  671,    0,    0,    0,  671,  671,    0,  671,
      672,    0,    0,    0,    0,    0,    0,    0,  672,  672,
        0,  672,  673,    0,    0,    0,  673,    0,    0,    0,
      673,  673,    0,  673,  674,    0,    0,    0,    0,    0,
        0,    0,  674,  674,    0,  674,  675,  675,    0,    0,
      675,    0,    0,    0,  675,  675,  676,    0,    0,    0,
      676,    0,    0,    0,    0,  676,  677,  677,  677,  678,
      678,    0,  678,  678,  678,  678,  678,  678,  678,  679,
        0,    0,  679,    0,    0,  679,  679,  679,  679,  679,

      679,  680,    0,    0,  680,    0,    0,  680,  680,  680,
      680,  680,  680,  681,  681,    0,    0,  681,    0,    0,
        0,    0,  681,  682,    0,    0,    0,    0,    0,    0,
        0,  682,  682,  683,    0,    0,    0,  683,    0,    0,
        0,  683,  683,    0,  683,  684,    0,    0,    0,    0,
        0,    0,    0,  684,  684,    0,  684,  685,    0,    0,
        0,    0,    0,    0,    0,  685,  685,  686,    0,    0,
        0,  686,    0,    0,    0,  686,  686,    0,  686,  687,
        0,    0,    0,    0,    0,    0,    0,  687,  687,    0,
      687,  688,    0,    0,    0,    0,    0,    0,    0,  688,

      688,    0,  688,  689,    0,    0,    0,    0,    0,    0,
        0,  689,  689,    0,  689,  690,  690,  690,  691,  691,
      692,  692,    0,  692,  692,  693,  693,  693,  694,  694,
      695,  695,    0,  695,  695,  696,  696,    0,    0,  696,
        0,    0,    0,  696,  696,    0,  696,  697,    0,    0,
        0,    0,    0,    0,    0,  697,  697,    0,  697,  698,
        0,    0,    0,    0,    0,    0,    0,  698,  698,  699,
      699,    0,    0,  699,    0,    0,    0,  699,  699,    0,
      699,  700,    0,    0,    0,    0,    0,    0,    0,  700,
      700,    0,  700,  701,    0,    0,    0,    0,    0,    0,

        0,  701,  701,    0,  701,  702,    0,    0,    0,    0,
        0,    0,    0,  702,  702,    0,  702,  703,  703,    0,
        0,  703,    0,    0,    0,  703,  703,    0,  703,  704,
      704,    0,    0,  704,    0,    0,    0,  704,  704,    0,
      704,  705,    0,    0,    0,  705,    0,    0,    0,  705,
      705,    0,  705,  706,    0,    0,    0,    0,    0,    0,
        0,  706,  706,    0,  706,  707,    0,    0,    0,    0,
        0,    0,    0,  707,  707,  708,    0,    0,    0,  708,
        0,    0,    0,  708,  708,    0,  708,  709,    0,    0,
        0,    0,    0,    0,    0,  709,  709,    0,  709,  710,

        0,    0,    0,    0,    0,    0,    0,  710,  710,    0,
      710,  711,    0,    0,    0,    0,    0,    0,    0,  711,
      711,    0,  711,  712,  712,    0,    0,  712,    0,    0,
        0,  712,  712,  713,    0,    0,    0,  713,    0,    0,
        0,    0,  713,  714,  714,  714,  715,  715,  716,    0,
        0,    0,    0,    0,  716,  716,  716,  716,  716,  716,
      717,    0,    0,    0,    0,    0,    0,    0,  717,  717,
      718,    0,    0,  718,    0,    0,  718,  718,  718,  718,
      718,  718,  719,    0,    0,  719,    0,    0,  719,  719,
      719,  719,  719,  719,  720,    0,    0,    0,    0,    0,

        0,    0,  720,  720,  721,    0,    0,    0,    0,    0,
        0,    0,  721,  721,    0,  721,  722,    0,    0,    0,
        0,    0,    0,    0,  722,  722,    0,  722,  723,  723,
        0,  723,  723,  724,  724,  725,  725,    0,  725,  725,
      726,  726,  727,    0,    0,    0,    0,    0,    0,    0,
      727,  727,  728,    0,    0,    0,    0,    0,    0,    0,
      728,  728,    0,  728,  729,    0,    0,    0,    0,    0,
        0,    0,  729,  729,    0,  729,  730,    0,    0,    0,
        0,    0,    0,    0,  730,  730,  731,    0,    0,    0,
        0,    0,    0,    0,  731,  731,    0,  731,  732,    0,

        0,    0,    0,    0,    0,    0,  732,  732,    0,  732,
      733,  733,    0,  733,  733,  734,  734,  735,    0,    0,
        0,    0,    0,    0,    0,  735,  735,    0,  735,  736,
        0,    0,    0,    0,    0,    0,    0,  736,  736,    0,
      736,  737,    0,    0,    0,    0,    0,    0,    0,  737,
      737,    0,  737,  738,    0,    0,    0,    0,    0,    0,
        0,  738,  738,    0,  738,  739,    0,    0,    0,    0,
        0,    0,    0,  739,  739,    0,  739,  740,    0,    0,
        0,    0,    0,    0,    0,  740,  740,    0,  740,  741,
        0,    0,    0,    0,    0,    0,    0,  741,  741,    0,

      741,  742,  742,  743,    0,    0,    0,    0,    0,    0,
        0,  743,  743,    0,  743,  744,    0,    0,    0,    0,
        0,    0,    0,  744,  744,    0,  744,  745,    0,    0,
        0,    0,    0,    0,    0,  745,  745,    0,  745,  746,
        0,    0,    0,    0,    0,    0,    0,  746,  746,    0,
      746,  747,    0,    0,    0,    0,    0,    0,    0,  747,
      747,    0,  747,  748,    0,    0,    0,    0,    0,    0,
        0,    0,  748,  749,    0,    0,    0,    0,    0,    0,
        0,  749,  749,  750,    0,    0,    0,    0,    0,    0,
        0,  750,  750,    0,  750,  751,    0,    0,    0,    0,

        0,    0,    0,  751,  751,    0,  751,  752,    0,    0,
        0,    0,    0,    0,    0,  752,  752,    0,  752,  753,
      753,  754,    0,    0,    0,    0,    0,    0,    0,  754,
      754,    0,  754,  755,    0,    0,    0,    0,    0,    0,
        0,  755,  755,    0,  755,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "fluentMeshToFoam.L"
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Copyright (C) 2011-2019 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/
#line 27 "fluentMeshToFoam.L"

//#undef yyFlexLexer

 /* ------------------------------------------------------------------------- *\
   ------ local definitions
 \* ------------------------------------------------------------------------- */

 #include "cellShapeRecognition.hxx"

#include <argList.hxx>
#include <Time.hxx>
#include <IStringStream.hxx>
#include <polyMesh.hxx>
#include <emptyPolyPatch.hxx>
#include <wallPolyPatch.hxx>
#include <symmetryPolyPatch.hxx>
#include <cellShape.hxx>
#include <faceSet.hxx>
#include <cellSet.hxx>
#include <meshTools.hxx>
#include <OFstream.hxx>

#include <readHexLabel.hxx>
#include <repatchPolyTopoChanger.hxx>


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

using namespace tnbLib;

const scalar convertToMeters = 1.0;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


label dimensionOfGrid = 0;

label nPoints = 0;
label nFaces = 0;
label nCells = 0;

pointField points(0);
SLList<label> pointGroupZoneID;
SLList<label> pointGroupStartIndex;
SLList<label> pointGroupEndIndex;


faceList faces(0);
labelList owner(0);
labelList neighbour(0);
SLList<label> faceGroupZoneID;
SLList<label> faceGroupStartIndex;
SLList<label> faceGroupEndIndex;

labelList fluentCellModelID(0);
SLList<label> cellGroupZoneID;
SLList<label> cellGroupStartIndex;
SLList<label> cellGroupEndIndex;
SLList<label> cellGroupType;

// number of zones adjusted at run-time if necessary
label maxZoneID = 100;
label zoneIDBuffer = 10;

wordList patchTypeIDs(maxZoneID);
wordList patchNameIDs(maxZoneID);

// Dummy yywrap to keep yylex happy at compile time.
// It is called by yylex but is not used as the mechanism to change file.
// See <<EOF>>
#if YY_FLEX_MINOR_VERSION < 6 && YY_FLEX_SUBMINOR_VERSION < 34
extern "C" int yywrap()
#else
int yyFlexLexer::yywrap()
#endif
{
    return 1;
}

#line 1627 "fluentMeshToFoam.cxx"
#line 186 "fluentMeshToFoam.L"
 /* ------------------------------------------------------------------------- *\
                      -----  Exclusive start states -----
 \* ------------------------------------------------------------------------- */




































#line 1668 "fluentMeshToFoam.cxx"

#define INITIAL 0
#define readComment 1
#define embeddedCommentState 2
#define readHeader 3
#define readDimension 4
#define readPoint 5
#define readPointHeader 6
#define readNumberOfPoints 7
#define readPointGroupData 8
#define readPointData 9
#define readPoints2D 10
#define readPoints3D 11
#define fluentFace 12
#define readFaceHeader 13
#define readNumberOfFaces 14
#define readFaceGroupData 15
#define readFaceData 16
#define readFacesMixed 17
#define readFacesUniform 18
#define cell 19
#define readCellHeader 20
#define readNumberOfCells 21
#define readCellGroupData 22
#define readCellData 23
#define readCellsMixed 24
#define readCellsUniform 25
#define zone 26
#define readZoneHeader 27
#define readZoneGroupData 28
#define readZoneData 29
#define readZoneBlock 30
#define periodicFace 31
#define cellTree 32
#define faceTree 33
#define faceParents 34
#define unknownBlock 35
#define embeddedUnknownBlock 36

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 230 "fluentMeshToFoam.L"



    // Point data
    label pointGroupNumberOfComponents = 3;
    label pointi = 0; // index used for reading points

    // Face data
    label faceGroupElementType = -1;
    label facei = 0;

    // Cell data
    label cellGroupElementType = -1;
    label celli = 0;



 /* ------------------------------------------------------------------------- *\
                            ------ Start Lexing ------
 \* ------------------------------------------------------------------------- */

 /*                      ------ Reading control header ------                 */

#line 1857 "fluentMeshToFoam.cxx"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 651 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4046 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 253 "fluentMeshToFoam.L"
{
        yy_push_state(readComment);
    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 258 "fluentMeshToFoam.L"
{
    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 262 "fluentMeshToFoam.L"
{
        yy_pop_state();
    }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 266 "fluentMeshToFoam.L"
{
        BEGIN(readHeader);
    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 270 "fluentMeshToFoam.L"
{
        Info<< "Reading header: " << YYText() << endl;
    }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 275 "fluentMeshToFoam.L"
{
        BEGIN(readDimension);
    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 279 "fluentMeshToFoam.L"
{
        IStringStream dimOfGridStream(YYText());

        dimensionOfGrid = readLabel(dimOfGridStream);

        Info<< "Dimension of grid: " << dimensionOfGrid << endl;
    }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 288 "fluentMeshToFoam.L"
{
        BEGIN(readPointHeader);
    }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 292 "fluentMeshToFoam.L"
{
        BEGIN(readNumberOfPoints);
    }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 296 "fluentMeshToFoam.L"
{

        IStringStream numberOfPointsStream(YYText());

        nPoints = readHexLabel(numberOfPointsStream);

        Info<< "Number of points: " << nPoints << endl;

        // set the size of the points list
        points.setSize(nPoints);

        // meaningless type skipped
        readLabel(numberOfPointsStream);

        // this dimension of grid may be checked against global dimension
        if (numberOfPointsStream)
        {
            // check dimension of grid
            readLabel(numberOfPointsStream);
        }
        else
        {
            Info<< endl;
        }
    }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 322 "fluentMeshToFoam.L"
{
        BEGIN(readPointGroupData);
    }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 326 "fluentMeshToFoam.L"
{
        IStringStream pointGroupDataStream(YYText());

        // read point zone-ID, start and end-label
        // the indices will be used for checking later.
        pointGroupZoneID.append(readHexLabel(pointGroupDataStream));

        pointGroupStartIndex.append(readHexLabel(pointGroupDataStream));

        pointGroupEndIndex.append(readHexLabel(pointGroupDataStream));

        // point group type skipped
        readHexLabel(pointGroupDataStream);

        // In FOAM, indices start from zero - adjust
        pointi = pointGroupStartIndex.last() - 1;

        // reset number of components to default
        pointGroupNumberOfComponents = 3;

        // read number of components in the vector
        if (pointGroupDataStream)
        {
            pointGroupNumberOfComponents = readLabel(pointGroupDataStream);
        }
    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 353 "fluentMeshToFoam.L"
{
        BEGIN(readPointData);
    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 357 "fluentMeshToFoam.L"
{

        Info<< "Reading points" << endl;

        if (pointGroupNumberOfComponents == 2)
        {
            yy_push_state(readPoints2D);
        }
        else
        {
            yy_push_state(readPoints3D);
        }
    }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 371 "fluentMeshToFoam.L"
{

        IStringStream vertexXyzStream(YYText());

        // Note: coordinates must be read one at the time.
        scalar x = readScalar(vertexXyzStream);
        scalar y = readScalar(vertexXyzStream);

        points[pointi] = point(x, y, 0);
        pointi++;
    }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 383 "fluentMeshToFoam.L"
{

        IStringStream vertexXyzStream(YYText());

        // Note: coordinates must be read one at the time.
        scalar x = readScalar(vertexXyzStream);
        scalar y = readScalar(vertexXyzStream);
        scalar z = readScalar(vertexXyzStream);

        points[pointi] = convertToMeters*point(x, y, z);
        pointi++;
    }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 396 "fluentMeshToFoam.L"
{

        // check read of points
        if (pointi != pointGroupEndIndex.last())
        {
            Info<< "problem with reading points: "
                << "start index: " << pointGroupStartIndex.last()
                << " end index: " << pointGroupEndIndex.last()
                << " last points read: " << pointi << endl;
        }

        yy_pop_state();
    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 411 "fluentMeshToFoam.L"
{
        BEGIN(readFaceHeader);
    }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 415 "fluentMeshToFoam.L"
{
        BEGIN(readNumberOfFaces);
    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 419 "fluentMeshToFoam.L"
{

        IStringStream numberOfFacesStream(YYText());

        nFaces = readHexLabel(numberOfFacesStream);

        Info<< "number of faces: " << nFaces << endl;

        faces.setSize(nFaces);
        owner.setSize(nFaces);
        neighbour.setSize(nFaces);

        // Meaningless type and element type not read
    }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 434 "fluentMeshToFoam.L"
{
        BEGIN(readFaceGroupData);
    }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 438 "fluentMeshToFoam.L"
{

        IStringStream faceGroupDataStream(YYText());

        // read fluentFace zone-ID, start and end-label
        faceGroupZoneID.append(readHexLabel(faceGroupDataStream));

        // the indices will be used for checking later.
        faceGroupStartIndex.append(readHexLabel(faceGroupDataStream));

        faceGroupEndIndex.append(readHexLabel(faceGroupDataStream));

        // face group type
        readHexLabel(faceGroupDataStream);

        faceGroupElementType = readHexLabel(faceGroupDataStream);

        // In FOAM, indices start from zero - adjust
        facei = faceGroupStartIndex.last() - 1;
    }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 459 "fluentMeshToFoam.L"
{
        BEGIN(readFaceData);
    }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 463 "fluentMeshToFoam.L"
{

        if (faceGroupElementType == 0)
        {
            Info<< "Reading mixed faces" << endl;
            yy_push_state(readFacesMixed);
        }
        else
        {
            Info<< "Reading uniform faces" << endl;
            yy_push_state(readFacesUniform);
        }
    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 477 "fluentMeshToFoam.L"
{

        IStringStream mixedFaceStream(YYText());

        face& curFaceLabels = faces[facei];

        // set size of label list
        curFaceLabels.setSize(readLabel(mixedFaceStream));

        forAll(curFaceLabels, i)
        {
            curFaceLabels[i] = readHexLabel(mixedFaceStream) - 1;
        }

        // read neighbour and owner. Neighbour comes first
        neighbour[facei] = readHexLabel(mixedFaceStream) - 1;
        owner[facei] = readHexLabel(mixedFaceStream) - 1;
        facei++;
    }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 497 "fluentMeshToFoam.L"
{

        IStringStream mixedFaceStream(YYText());

        face& curFaceLabels = faces[facei];

        // set size of label list. This is OK because in Fluent the type
        // for edge is 2, for triangle is 3 and for quad is 4
        curFaceLabels.setSize(faceGroupElementType);

        forAll(curFaceLabels, i)
        {
            curFaceLabels[i] = readHexLabel(mixedFaceStream) - 1;
        }

        // read neighbour and owner. Neighbour comes first
        neighbour[facei] = readHexLabel(mixedFaceStream) - 1;
        owner[facei] = readHexLabel(mixedFaceStream) - 1;
        facei++;
    }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 518 "fluentMeshToFoam.L"
{

        // check read of fluentFaces
        if (facei != faceGroupEndIndex.last())
        {
            Info<< "problem with reading fluentFaces: "
                << "start index: " << faceGroupStartIndex.last()
                << " end index: " << faceGroupEndIndex.last()
                << " last fluentFaces read: " << facei << endl;
        }

        yy_pop_state();
    }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 533 "fluentMeshToFoam.L"
{
        BEGIN(readCellHeader);
    }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 537 "fluentMeshToFoam.L"
{
        BEGIN(readNumberOfCells);
    }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 541 "fluentMeshToFoam.L"
{

        IStringStream numberOfCellsStream(YYText());

        nCells = readHexLabel(numberOfCellsStream);

        Info<< "Number of cells: " << nCells << endl;

        fluentCellModelID.setSize(nCells);

        // Meaningless type and element type not read
    }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 554 "fluentMeshToFoam.L"
{
        BEGIN(readCellGroupData);
    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 558 "fluentMeshToFoam.L"
{
        // Warning. This entry must be above the next one because of the lexing
        // rules. It is introduced to deal with the problem of reading
        // non-standard cell definition from Tgrid, which misses the type label.

        Info<< "Tgrid syntax problem: " << YYText() << endl;
        IStringStream cellGroupDataStream(YYText());

        // read cell zone-ID, start and end-label
        cellGroupZoneID.append(readHexLabel(cellGroupDataStream));

        // the indices will be used for checking later.
        cellGroupStartIndex.append(readHexLabel(cellGroupDataStream));

        cellGroupEndIndex.append(readHexLabel(cellGroupDataStream));

        cellGroupType.append(readHexLabel(cellGroupDataStream));

        Info<< "cellGroupZoneID:" << cellGroupZoneID.last()
            << endl;
        Info<< "cellGroupStartIndex:" << cellGroupStartIndex.last()
            << endl;
        Info<< "cellGroupEndIndex:" << cellGroupEndIndex.last()
            << endl;
        Info<< "cellGroupType:" << cellGroupType.last()
            << endl;


        // Note. Potentially skip cell set if type is zero.
        // This entry does not exist in Tgrid files.
        if (dimensionOfGrid == 2)
        {
            // Tgrid creating triangles
            cellGroupElementType = 1;
        }
        else
        {
            cellGroupElementType = 2;
        }

        // In FOAM, indices start from zero - adjust
        celli = cellGroupStartIndex.last() - 1;

        if (cellGroupElementType != 0)
        {
            label lastIndex = cellGroupEndIndex.last();

            for (; celli < lastIndex; celli++)
            {
                fluentCellModelID[celli] = cellGroupElementType;
            }
        }
    }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 612 "fluentMeshToFoam.L"
{
        // Warning. See above

        Info<< "Other readCellGroupData: " << YYText() << endl;


        IStringStream cellGroupDataStream(YYText());

        // read cell zone-ID, start and end-label
        cellGroupZoneID.append(readHexLabel(cellGroupDataStream));

        // the indices will be used for checking later.
        cellGroupStartIndex.append(readHexLabel(cellGroupDataStream));

        cellGroupEndIndex.append(readHexLabel(cellGroupDataStream));

        cellGroupType.append(readHexLabel(cellGroupDataStream));

        // Note. Potentially skip cell set if type is zero.

        cellGroupElementType = readHexLabel(cellGroupDataStream);

        // In FOAM, indices start from zero - adjust
        celli = cellGroupStartIndex.last() - 1;

        if (cellGroupElementType != 0)
        {
            Info<< "Reading uniform cells" << endl;
            label lastIndex = cellGroupEndIndex.last();

            for (; celli < lastIndex; celli++)
            {
                fluentCellModelID[celli] = cellGroupElementType;
            }
        }
    }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 649 "fluentMeshToFoam.L"
{
        BEGIN(readCellData);
    }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 653 "fluentMeshToFoam.L"
{
        Info<< "Reading mixed cells" << endl;
        yy_push_state(readCellsMixed);
    }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 658 "fluentMeshToFoam.L"
{

        IStringStream fluentCellModelIDStream(YYText());

        label celliD;
        while (fluentCellModelIDStream.read(celliD))
        {
            fluentCellModelID[celli] = celliD;
            celli++;
        }
    }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 670 "fluentMeshToFoam.L"
{

        // check read of cells
        if (celli != cellGroupEndIndex.last())
        {
            Info<< "problem with reading cells: "
                << "start index: " << cellGroupStartIndex.last()
                << " end index: " << cellGroupEndIndex.last()
                << " last cells read: " << celli << endl;
        }

        yy_pop_state();
    }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 686 "fluentMeshToFoam.L"
{
        BEGIN(readZoneHeader);
    }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 690 "fluentMeshToFoam.L"
{
        BEGIN(readZoneHeader);
    }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 694 "fluentMeshToFoam.L"
{
        BEGIN(readZoneGroupData);
    }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 698 "fluentMeshToFoam.L"
{

        IStringStream zoneDataStream(YYText());

        // cell zone-ID not in hexadecimal!!! Inconsistency
        label zoneID(readLabel(zoneDataStream));

        if (zoneID > maxZoneID - 1)
        {
            // resize the container
            maxZoneID = zoneID + zoneIDBuffer;

            patchTypeIDs.setSize(maxZoneID);
            patchNameIDs.setSize(maxZoneID);
        }

        zoneDataStream >> patchTypeIDs[zoneID];
        zoneDataStream >> patchNameIDs[zoneID];

        Info<< "Read zone1:" << zoneID
            << " name:" << patchNameIDs[zoneID]
            << " patchTypeID:" << patchTypeIDs[zoneID]
            << endl;
    }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 723 "fluentMeshToFoam.L"
{
        // Fluent manual inconsistency, version 6.1.22
        IStringStream zoneDataStream(YYText());

        // cell zone-ID not in hexadecimal!!! Inconsistency
        label zoneID(readLabel(zoneDataStream));

        if (zoneID > maxZoneID - 1)
        {
            // resize the container
            maxZoneID = zoneID + zoneIDBuffer;

            patchTypeIDs.setSize(maxZoneID);
            patchNameIDs.setSize(maxZoneID);
        }

        zoneDataStream >> patchTypeIDs[zoneID];
        zoneDataStream >> patchNameIDs[zoneID];

        Info<< "Read zone2:" << zoneID
            << " name:" << patchNameIDs[zoneID]
            << " patchTypeID:" << patchTypeIDs[zoneID]
            << endl;
    }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 748 "fluentMeshToFoam.L"
{
        BEGIN(readZoneData);
    }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 752 "fluentMeshToFoam.L"
{
        Info<< "Reading zone data" << endl;
        yy_push_state(readZoneBlock);
    }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 757 "fluentMeshToFoam.L"
{
    }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 760 "fluentMeshToFoam.L"
{
        Info<< "Found unknown block in zone:" << YYText() << endl;
        yy_push_state(unknownBlock);
    }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 765 "fluentMeshToFoam.L"
{
        yy_pop_state();
    }
	YY_BREAK
/*             ------ Reading end of section and others ------               */
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 773 "fluentMeshToFoam.L"
{
        BEGIN(INITIAL);
    }
	YY_BREAK
/*    ------ Reading unknown type or non-standard comment ------             */
case 49:
YY_RULE_SETUP
#line 780 "fluentMeshToFoam.L"
{
        Info<< "Found unknown block:" << YYText() << endl;
        yy_push_state(unknownBlock);
    }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 785 "fluentMeshToFoam.L"
{
    }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 788 "fluentMeshToFoam.L"
{
        Info<< "Embedded blocks in comment or unknown:" << YYText() << endl;
        yy_push_state(embeddedUnknownBlock);

    }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 794 "fluentMeshToFoam.L"
{
        Info<< "Found end of section in unknown:" << YYText() << endl;
        yy_pop_state();
    }
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 799 "fluentMeshToFoam.L"
{
    }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 802 "fluentMeshToFoam.L"
{
    }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 805 "fluentMeshToFoam.L"
{
    }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 808 "fluentMeshToFoam.L"
{
    }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 811 "fluentMeshToFoam.L"
{
    }
	YY_BREAK
/* ------ Ignore remaining space and \n s.  Any other characters are errors. */
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 817 "fluentMeshToFoam.L"
{
    Info<< "ERROR! Do not understand characters: " << YYText() << endl;
    }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 820 "fluentMeshToFoam.L"
{}
	YY_BREAK
/*  ------ On EOF return to previous file, if none exists terminate. ------  */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(readComment):
case YY_STATE_EOF(embeddedCommentState):
case YY_STATE_EOF(readHeader):
case YY_STATE_EOF(readDimension):
case YY_STATE_EOF(readPoint):
case YY_STATE_EOF(readPointHeader):
case YY_STATE_EOF(readNumberOfPoints):
case YY_STATE_EOF(readPointGroupData):
case YY_STATE_EOF(readPointData):
case YY_STATE_EOF(readPoints2D):
case YY_STATE_EOF(readPoints3D):
case YY_STATE_EOF(fluentFace):
case YY_STATE_EOF(readFaceHeader):
case YY_STATE_EOF(readNumberOfFaces):
case YY_STATE_EOF(readFaceGroupData):
case YY_STATE_EOF(readFaceData):
case YY_STATE_EOF(readFacesMixed):
case YY_STATE_EOF(readFacesUniform):
case YY_STATE_EOF(cell):
case YY_STATE_EOF(readCellHeader):
case YY_STATE_EOF(readNumberOfCells):
case YY_STATE_EOF(readCellGroupData):
case YY_STATE_EOF(readCellData):
case YY_STATE_EOF(readCellsMixed):
case YY_STATE_EOF(readCellsUniform):
case YY_STATE_EOF(zone):
case YY_STATE_EOF(readZoneHeader):
case YY_STATE_EOF(readZoneGroupData):
case YY_STATE_EOF(readZoneData):
case YY_STATE_EOF(readZoneBlock):
case YY_STATE_EOF(periodicFace):
case YY_STATE_EOF(cellTree):
case YY_STATE_EOF(faceTree):
case YY_STATE_EOF(faceParents):
case YY_STATE_EOF(unknownBlock):
case YY_STATE_EOF(embeddedUnknownBlock):
#line 825 "fluentMeshToFoam.L"
{
            yyterminate();
    }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 828 "fluentMeshToFoam.L"
ECHO;
	YY_BREAK
#line 2735 "fluentMeshToFoam.cxx"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	fluentMeshToFoamfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	fluentMeshToFoamfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					fluentMeshToFoamrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) fluentMeshToFoamrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 651 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 651 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 650);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) fluentMeshToFoamalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) fluentMeshToFoamalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		fluentMeshToFoamfree((void *) b->yy_ch_buf  );

	fluentMeshToFoamfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)fluentMeshToFoamalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)fluentMeshToFoamrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) fluentMeshToFoamalloc(new_size  );

		else
			(yy_start_stack) = (int *) fluentMeshToFoamrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *fluentMeshToFoamalloc (yy_size_t  size )
{
			return malloc(size);
}

void *fluentMeshToFoamrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void fluentMeshToFoamfree (void * ptr )
{
			free( (char *) ptr );	/* see fluentMeshToFoamrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 828 "fluentMeshToFoam.L"



#include <fileName.hxx>
#include <fstream>

// Find label of face.
label findFace(const primitiveMesh& mesh, const face& f)
{
    // Get faces using zeroth vertex of face.
    const labelList& pFaces = mesh.pointFaces()[f[0] ];

    forAll(pFaces, i)
    {
        label facei = pFaces[i];

        if (f == mesh.faces()[facei])
        {
            return facei;
        }
    }

    // Didn't find face. Do what?
    FatalErrorInFunction
        << "Problem : cannot find a single face in the mesh which uses"
        << " vertices " << f << exit(FatalError);

    return -1;
}


int main(int argc, char *argv[])
{
    argList::noParallel();
    argList::validArgs.append("Fluent mesh file");
    argList::addOption
    (
        "scale",
        "factor",
        "geometry scaling factor - default is 1"
    );
    argList::addOption
    (
        "2D",
        "thickness",
        "use when converting a 2-D mesh (applied before scale)"
    );
    argList::addBoolOption
    (
        "writeSets",
        "write cell zones and patches as sets"
    );
    argList::addBoolOption
    (
        "writeZones",
        "write cell zones as zones"
    );

    argList args(argc, argv);

    if (!args.check())
    {
        FatalError.exit();
    }

    const scalar scaleFactor = args.optionLookupOrDefault("scale", 1.0);

    const bool writeSets  = args.optionFound("writeSets");
    const bool writeZones = args.optionFound("writeZones");

    #include <createTime.lxx>

    const fileName fluentFile = args[1];
    std::ifstream fluentStream(fluentFile.c_str());

    if (!fluentStream)
    {
        FatalErrorInFunction
            << args.executable()
            << ": file " << fluentFile << " not found"
            << exit(FatalError);
    }

    yyFlexLexer lexer(&fluentStream);
    while (lexer.yylex() != 0)
    {}

    Info<< "\n\nFINISHED LEXING\n\n\n";
    // Lookup table giving number of vertices given a fluent cell type ID
    // Currently not used.
    // label fluentModelNVertices[7] = {-1, 3, 4, 4, 8, 5, 6};

    // Lookup table giving number of vertices given a fluent cell type ID
    label fluentModelNFaces[7] = {-1, 3, 4, 4, 6, 5, 5};

    // Make a list of cell faces to be filled in for owner and neighbour

    labelListList cellFaces(nCells);

    labelList nFacesInCell(nCells, 0);

    forAll(cellFaces, celli)
    {
        cellFaces[celli].setSize(fluentModelNFaces[fluentCellModelID[celli] ]);
    }

    // fill in owner and neighbour

    forAll(owner, facei)
    {
        if (owner[facei] > -1)
        {
            label curCell = owner[facei];
            cellFaces[curCell][nFacesInCell[curCell] ] = facei;

            nFacesInCell[curCell]++;
        }
    }

    forAll(neighbour, facei)
    {
        if (neighbour[facei] > -1)
        {
            label curCell = neighbour[facei];
            cellFaces[curCell][nFacesInCell[curCell] ] = facei;

            nFacesInCell[curCell]++;
        }
    }

    // Construct shapes from face lists
    cellShapeList cellShapes(nCells);

    Info<< "dimension of grid: " << dimensionOfGrid << endl;
    faceList frontAndBackFaces;

    if (dimensionOfGrid == 2)
    {
        // Extrude 2-D mesh into 3-D, in z-direction

        scalar twoDThickness = 1.0;

        if (!args.optionReadIfPresent("2D", twoDThickness))
        {
            const scalar extrusionFactor = 0.02; //0.01 in each direction
            boundBox box(points);
            twoDThickness = extrusionFactor*box.mag();
        }

        Info<< "Grid is 2-D. Extruding in z-direction by: " << twoDThickness
            << endl;

        const scalar zOffset = twoDThickness / 2;

        pointField oldPoints = points;

        const label pointOffset = oldPoints.size();

        points.setSize(2*pointOffset);

        label nNewPoints = 0;

        // Note: In order for the owner-neighbour rules to be right, the
        // points given by Fluent need to represent the FRONT plane of the
        // geometry. Therefore, the extrusion will be in -z direction
        //
        forAll(oldPoints, pointi)
        {
            points[nNewPoints] = oldPoints[pointi];

            points[nNewPoints].z() = zOffset;

            nNewPoints++;
        }

        forAll(oldPoints, pointi)
        {
            points[nNewPoints] = oldPoints[pointi];

            points[nNewPoints].z() = -zOffset;

            nNewPoints++;
        }

        // 2-D shape recognition
        Info<< "Creating shapes for 2-D cells"<< endl;

        // Set the number of empty faces
        frontAndBackFaces.setSize(2*nCells);

        forAll(fluentCellModelID, celli)
        {
            switch (fluentCellModelID[celli])
            {
                case 1:
                {
                    cellShapes[celli] =
                        cellShape
                        (
                            extrudedTriangleCellShape
                            (
                                celli,
                                cellFaces[celli],
                                faces,
                                owner,
                                neighbour,
                                pointOffset,
                                frontAndBackFaces
                            )
                        );
                }
                break;

                case 3:
                {
                    cellShapes[celli] =
                        cellShape
                        (
                            extrudedQuadCellShape
                            (
                                celli,
                                cellFaces[celli],
                                faces,
                                owner,
                                neighbour,
                                pointOffset,
                                frontAndBackFaces
                            )
                        );
                }
                break;

                default:
                {
                    FatalErrorInFunction
                        << fluentCellModelID[celli]
                        << abort(FatalError);
                }
            }
        }

        // Create new faces
        forAll(faces, facei)
        {

            if (faces[facei].size() != 2)
            {
                FatalErrorInFunction
                    << "fluentMeshToFoam: a 2-D face defined with "
                    << faces[facei].size() << " points." << endl;
            }

            labelList& newFace = faces[facei];

            newFace.setSize(4);

            newFace[2] = newFace[1] + pointOffset;

            newFace[3] = newFace[0] + pointOffset;
        }

        // Create new cells from 2-D shapes
    }
    else
    {
        // 3-D shape recognition
        Info<< "Creating shapes for 3-D cells"<< endl;
        forAll(fluentCellModelID, celli)
        {
            if
            (
                fluentCellModelID[celli] == 2    // tet
             || fluentCellModelID[celli] == 4    // hex
             || fluentCellModelID[celli] == 5    // pyramid
             || fluentCellModelID[celli] == 6    // prism
            )
            {
                cellShapes[celli] =
                    cellShape
                    (
                        create3DCellShape
                        (
                            celli,
                            cellFaces[celli],
                            faces,
                            owner,
                            neighbour,
                            fluentCellModelID[celli]
                        )
                    );
            }
            else
            {
                FatalErrorInFunction
                    << "unrecognised 3-D cell shape: "
                    << fluentCellModelID[celli]
                    << abort(FatalError);
            }
        }
    }

    // boundary faces are oriented such that the owner is zero and the face
    // area vector points into the domain. Turn them round before making patches
    // for Foam compatibility

    forAll(faces, facei)
    {
        if (owner[facei] == -1)
        {
            // reverse face
            labelList oldFace = faces[facei];

            forAllReverse(oldFace, i)
            {
                faces[facei][oldFace.size() - i - 1] =
                    oldFace[i];
            }
        }
    }


    // make patchless mesh before analysing boundaries

    faceListList patches(0);
    wordList patchNames(0);
    wordList patchTypes(0);
    word defaultFacesName = "defaultFaces";
    word defaultFacesType = emptyPolyPatch::typeName;
    wordList patchPhysicalTypes(0);

    // Scale the points

    points *= scaleFactor;

    Info<< "Building patch-less mesh..." << flush;

    polyMesh pShapeMesh
    (
        IOobject
        (
            polyMesh::defaultRegion,
            runTime.constant(),
            runTime
        ),
        move(points),
        cellShapes,
        patches,
        patchNames,
        patchTypes,
        defaultFacesName,
        defaultFacesType,
        patchPhysicalTypes
    );

    // don't write mesh yet, otherwise preservePatchTypes will be broken
    // and zones won't be written
    // checkmesh done after patch addition as well
    Info<< "done." << endl;


    Info<< endl << "Building boundary and internal patches." << endl;
    // adding patches after mesh construction allows topological checks
    // on whether a patch is internal or external, something fluent
    // doesn't seem to mind

    // Make boundary patches

    SLList<label>::iterator faceGroupZoneIDIter = faceGroupZoneID.begin();
    SLList<label>::iterator faceGroupStartIndexIter =
        faceGroupStartIndex.begin();
    SLList<label>::iterator faceGroupEndIndexIter = faceGroupEndIndex.begin();

    // Note. Not all groups of faces will be boundary patches.
    // Take care on construction

    //2D needs extra space for frontAndBack faces
    if (dimensionOfGrid == 2)
    {
        patches.setSize(faceGroupZoneID.size()+1);
        patchNames.setSize(faceGroupZoneID.size()+1);
        patchTypes.setSize(faceGroupZoneID.size()+1);
        patchPhysicalTypes.setSize(faceGroupZoneID.size()+1);
    }
    else
    {
        patches.setSize(faceGroupZoneID.size());
        patchNames.setSize(faceGroupZoneID.size());
        patchTypes.setSize(faceGroupZoneID.size());
        patchPhysicalTypes.setSize(faceGroupZoneID.size());
    }

    label nPatches = 0;

    // colate information for all patches (internal and external)
    for
    (
        ;
        faceGroupZoneIDIter != faceGroupZoneID.end()
     && faceGroupStartIndexIter != faceGroupStartIndex.end()
     && faceGroupEndIndexIter != faceGroupEndIndex.end();
        ++faceGroupZoneIDIter,
        ++faceGroupStartIndexIter,
        ++faceGroupEndIndexIter
    )
    {
        // get face type and name
        const word& curPatchType = patchTypeIDs[faceGroupZoneIDIter()];

        const word& curPatchName = patchNameIDs[faceGroupZoneIDIter()];

        Info<< "Creating patch " << nPatches
            << " for zone: " << faceGroupZoneIDIter()
            << " start: " << faceGroupStartIndexIter()
            << " end: " << faceGroupEndIndexIter()
            << " type: " << curPatchType << " name: " << curPatchName << endl;

        // make patch labels
        label faceLabel = faceGroupStartIndexIter() - 1;

        faceList patchFaces(faceGroupEndIndexIter() - faceLabel);

        forAll(patchFaces, facei)
        {
            if
            (
                faces[faceLabel].size() == 3
             || faces[faceLabel].size() == 4
            )
            {
                patchFaces[facei] = face(faces[faceLabel]);
                faceLabel++;
            }
            else
            {
                FatalErrorInFunction
                    << "unrecognised face shape with "
                    << patchFaces[facei].size() << " vertices"
                    << abort(FatalError);
            }
        }

        // inlets and outlets
        if
        (
            curPatchType == "pressure"
         || curPatchType == "pressure-inlet"
         || curPatchType == "inlet-vent"
         || curPatchType == "intake-fan"
         || curPatchType == "pressure-outlet"
         || curPatchType == "exhaust-fan"
         || curPatchType == "outlet-vent"
         || curPatchType == "pressure-far-field"
         || curPatchType == "velocity-inlet"
         || curPatchType == "mass-flow-inlet"
         || curPatchType == "outflow"
        )
        {
            patches[nPatches] = patchFaces;
            patchTypes[nPatches] = polyPatch::typeName;
            patchNames[nPatches] = curPatchName;

            nPatches++;
        }
        else if (curPatchType == "wall" ) // wall boundaries
        {
            patches[nPatches] = patchFaces;
            patchTypes[nPatches] = wallPolyPatch::typeName;
            patchNames[nPatches] = curPatchName;

            nPatches++;
        }
        else if
        (
            curPatchType == "symmetry"
         || curPatchType == "axis"
        ) // symmetry planes
        {
            patches[nPatches] = patchFaces;
            patchTypes[nPatches] = symmetryPolyPatch::typeName;
            patchNames[nPatches] = curPatchName;

            nPatches++;
        }
        else if
        (
            curPatchType == "interior"
         || curPatchType == "interface"
         || curPatchType == "internal"
         || curPatchType == "solid"
         || curPatchType == "fan"
         || curPatchType == "radiator"
         || curPatchType == "porous-jump"
        ) // interior boundaries - will not be added as patches
        {
            patches[nPatches] = patchFaces;
            patchTypes[nPatches] = "internal";
            patchNames[nPatches] = curPatchName;

            nPatches++;
        }
        else if
        (
            curPatchType == ""
        ) // unnamed face regions default to interior patches
        {
            Info<< "Patch " << faceGroupZoneIDIter()
                << ": Faces are defined but "
                << "not created as a zone." << endl
                << "Null specification is only valid for internal faces."
                << endl;

            patches[nPatches] = patchFaces;
            patchTypes[nPatches] = "internal";
            patchNames[nPatches] = curPatchName;

            nPatches++;
        }
        else // unknown face regions are not handled
        {
            FatalErrorInFunction
                << "fluent patch type " << curPatchType << " not recognised."
                << abort(FatalError);
        }
    }

    // add front and back boundaries for 2D meshes
    if (dimensionOfGrid == 2)
    {
        Info<< "Creating patch for front and back planes" << endl << endl;

        patches[nPatches] = frontAndBackFaces;
        patchTypes[nPatches] = emptyPolyPatch::typeName;
        patchNames[nPatches] = "frontAndBackPlanes";

        nPatches++;
    }

    // Now have all patch information,
    // check whether each patch is internal or external
    // and add boundaries to mesh
    // also write face sets of all patches
    patches.setSize(nPatches);
    patchTypes.setSize(nPatches);
    patchNames.setSize(nPatches);


    // old polyBoundary
    const polyBoundaryMesh& oPatches = pShapeMesh.boundaryMesh();
    // new patches.
    DynamicList<polyPatch*> newPatches(nPatches);

    // For every boundary face the old patch.
    labelList facePatchID(pShapeMesh.nFaces()-pShapeMesh.nInternalFaces(), -1);
    label cMeshFace = pShapeMesh.nInternalFaces();
    label nBoundaries = 0;


    forAll(patches, patchi)
    {
        const faceList& bFaces = patches[patchi];

        label sz = bFaces.size();
        labelList meshFaces(sz,-1);

        // Search faces by point matching
        forAll(bFaces, j)
        {
            const face& f = bFaces[j];
            label cMeshFace = findFace(pShapeMesh, f);
            meshFaces[j] = cMeshFace;
        }


        // check if patch is internal
        // also check internal/external-ness of first patch face
        // internal faces cannot become foam boundaries
        // if a face is defined as internal but is actually external
        // it will be put in a default wall boundary
        // internal boundaries are simply ignored

        if
        (
            patchTypes[patchi] != "internal"
         && !pShapeMesh.isInternalFace(meshFaces[0])
        )
        {
            // first face is external and has valid non-internal type

            // check all faces for externalness just to be sure
            // and mark patch number to global list
            forAll(meshFaces, i)
            {
                label facei = meshFaces[i];

                if (pShapeMesh.isInternalFace(facei))
                {
                    FatalErrorInFunction
                        << "Face " << facei << " on new patch "
                        << patchNames[patchi]
                        << " is not an external face of the mesh." << endl
                        << exit(FatalError);
                }

                if (facePatchID[facei - pShapeMesh.nInternalFaces()]!= -1)
                {
                    FatalErrorInFunction
                        << "Face " << facei << " on new patch "
                        << patchNames[patchi]
                        << " has already been marked for repatching to"
                        << " patch "
                        << facePatchID[facei - pShapeMesh.nInternalFaces()]
                        << exit(FatalError);
                }
                facePatchID[facei - pShapeMesh.nInternalFaces()] = nBoundaries;
            }

            // add to boundary patch

            Info<< "Adding new patch " << patchNames[patchi]
                << " of type " << patchTypes[patchi]
                << " as patch " << nBoundaries << endl;

            // Add patch to new patch list
            newPatches.append
            (
                polyPatch::New
                (
                    patchTypes[patchi],
                    patchNames[patchi],
                    sz,
                    cMeshFace,
                    nBoundaries,
                    oPatches
                ).ptr()
            );
            nBoundaries++;
            cMeshFace += sz;
        }
        else
        {
            Info<< "Patch " << patchNames[patchi]
                 << " is internal to the mesh "
                 << " and is not being added to the boundary."
                 << endl;

        }
    }

    // Check for any remaining boundary faces
    // and add them to a default wall patch
    // this routine should generally not be invoked
    {
        DynamicList<label> defaultBoundaryFaces(facePatchID.size());
        forAll(facePatchID, idI)
        {
            if (facePatchID[idI] == -1)
            {
                defaultBoundaryFaces.append(idI);
                facePatchID[idI] = nBoundaries;
            }
        }
        defaultBoundaryFaces.shrink();

        if (defaultBoundaryFaces.size())
        {
            Warning << " fluent mesh has " << defaultBoundaryFaces.size()
                    << " undefined boundary faces." << endl
                    << " Adding undefined faces to new patch `default_wall`"
                    << endl;

            // Add patch to new patch list

            newPatches.append
            (
                polyPatch::New
                (
                    wallPolyPatch::typeName,
                    "default_wall",
                    defaultBoundaryFaces.size(),
                    cMeshFace,
                    nBoundaries,
                    oPatches
                ).ptr()
            );
            nBoundaries++;
            cMeshFace += defaultBoundaryFaces.size();
        }
    }

    newPatches.shrink();

    // Use facePatchIDs map to reorder boundary faces into compact regions

    repatchPolyTopoChanger repatcher(pShapeMesh);

    // Add new list of patches
    repatcher.changePatches(newPatches);

    // Change patch ids
    forAll(facePatchID, idI)
    {
        label facei = idI + pShapeMesh.nInternalFaces();

        repatcher.changePatchID(facei, facePatchID[idI]);
    }
    repatcher.repatch();


    // Set the precision of the points data to 10
    IOstream::defaultPrecision(max(10u, IOstream::defaultPrecision()));


    // Re-do face matching to write sets
    if (writeSets)
    {
        forAll(patches, patchi)
        {
            const faceList& bFaces = patches[patchi];
            label sz = bFaces.size();

            faceSet pFaceSet(pShapeMesh, patchNames[patchi], sz);

            forAll(bFaces, j)
            {
                const face& f = bFaces[j];
                label cMeshFace = findFace(pShapeMesh, f);
                pFaceSet.insert(cMeshFace);
            }
            Info<< "Writing patch " << patchNames[patchi]
                << " of size " << sz << " to faceSet" << endl;

            pFaceSet.instance() = pShapeMesh.instance();
            pFaceSet.write();
        }
    }


    // Zones
    // will write out cell zones and internal faces for those zones
    // note: zone boundary faces are not added to face zones
    // the names of boundaries bordering on cell zones are written to
    // a list containing the boundary name and cellzone it borders on
    // interior boundaries are handled via faceSets
    // cell zones will only be written if there is more than one

    if (writeZones && cellGroupZoneID.size() > 1)
    {
        Info<< "Adding Zones" << endl;
        List<pointZone*> pz(0);

        label nrCellZones = cellGroupZoneID.size();
        List<cellZone*> cz(nrCellZones);

        // Make face zones for cell zones
        List<faceZone*> fz(nrCellZones);

        // List of patch names and the cellZone(s) they border
        // this is just an info file to make MRF easier to setup
        List<DynamicList<word>> boundaryZones
        (
            pShapeMesh.boundaryMesh().size()
        );

        const polyBoundaryMesh& bPatches = pShapeMesh.boundaryMesh();
        forAll(bPatches, pI)
        {
            boundaryZones[pI].append(bPatches[pI].name());
        }

        label cnt=0;
        SLList<label>::iterator cg = cellGroupZoneID.begin();
        SLList<label>::iterator start = cellGroupStartIndex.begin();
        SLList<label>::iterator end = cellGroupEndIndex.begin();

        for (; cg != cellGroupZoneID.end(); ++cg, ++start, ++end)
        {
            const word& name = patchNameIDs[cg()];
            const word& type = patchTypeIDs[cg()];

            Info<< "Writing cell zone: " << name
                << " of type " << type << " starting at " << start() - 1
                << " ending at " << end() - 1 << " to cellSet." << endl;

            labelList cls(end() - start() + 1);

            // Mark zone cells, used for finding faces
            boolList zoneCell(pShapeMesh.nCells(), false);

            // shift cell indizes by 1
            label nr=0;
            for (label celli = (start() - 1); celli < end(); celli++)
            {
                cls[nr]=celli;
                zoneCell[celli] = true;
                nr++;
            }

            cz[cnt] = new cellZone
            (
                name,
                cls,
                cnt,
                pShapeMesh.cellZones()
            );

            DynamicList<label> zoneFaces(pShapeMesh.nFaces());
            forAll(pShapeMesh.faceNeighbour(), facei)
            {
                label nei = pShapeMesh.faceNeighbour()[facei];
                label own = pShapeMesh.faceOwner()[facei];
                if (nei != -1)
                {
                    if (zoneCell[nei] && zoneCell[own])
                    {
                        zoneFaces.append(facei);
                    }
                }
            }
            zoneFaces.shrink();

            fz[cnt] = new faceZone
            (
                name,
                zoneFaces,
                boolList(zoneFaces.size(), false),
                cnt,
                pShapeMesh.faceZones()
            );

            // Add cell zones to patch zone list
            forAll(bPatches, pI)
            {
                const labelList& faceCells = bPatches[pI].faceCells();
                forAll(faceCells, fcI)
                {
                    if (zoneCell[faceCells[fcI] ])
                    {
                        boundaryZones[pI].append(name);
                        break;
                    }
                }
            }

            cnt++;
        }

        pShapeMesh.addZones(pz, fz, cz);

        forAll(bPatches, pI)
        {
            boundaryZones[pI].shrink();
        }

        fileName bczf
        (
            runTime.path()/runTime.constant()
           /"polyMesh"/"boundaryAdjacentCellZones"
        );

        OFstream boundaryCellZonesFile(bczf);
        forAll(boundaryZones, bzI)
        {
            forAll(boundaryZones[bzI], bzII)
            {
                boundaryCellZonesFile << boundaryZones[bzI][bzII] << " ";
            }

            boundaryCellZonesFile << endl;
        }
    }

    Info<< endl << "Writing mesh..." << flush;

    Info<< " to " << pShapeMesh.instance()/pShapeMesh.meshDir()
        << "  " << flush;

    pShapeMesh.setInstance(pShapeMesh.instance());
    pShapeMesh.write();
    Info<< "done." << endl << endl;

    // Write cellSets for Fluent regions
    // allows easy post-processing
    // set and zone functionality will be integrated some time
    // soon negating the need for double output
    if (writeSets)
    {
        if (cellGroupZoneID.size() > 1)
        {
            Info<< "Writing cell sets" << endl;

            SLList<label>::iterator cg = cellGroupZoneID.begin();
            SLList<label>::iterator start = cellGroupStartIndex.begin();
            SLList<label>::iterator end = cellGroupEndIndex.begin();

            // Note: cellGroupXXX are all Fluent indices (starting at 1)
            // so offset before using.

            for (; cg != cellGroupZoneID.end(); ++cg, ++start, ++end)
            {
                const word& name=patchNameIDs[cg()];
                const word& type=patchTypeIDs[cg()];

                Info<< "Writing cell set: " << name
                    << " of type " << type << " starting at " << start() - 1
                    << " ending at " << end() - 1 << " to cellSet." << endl;

                cellSet internal(pShapeMesh, name, end() - start());

                // shift cell indizes by 1
                for (label celli = start() - 1; celli <= end() - 1; celli++)
                {
                    internal.insert(celli);
                }

                internal.write();
            }
        }
        else
        {
            Info<< "Only one cell group: no set written\n";
        }
    }

    Info<< "\nEnd\n" << endl;
    return 0;
}


 /* ------------------------------------------------------------------------- *\
    ------ End of fluentMeshToFoam.L
 \* ------------------------------------------------------------------------- */

