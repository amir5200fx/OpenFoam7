#line 1 "gambitToFoam.cxx"

#line 3 "gambitToFoam.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

    #define yyalloc yyalloc

    #define yyrealloc yyrealloc

    #define yyfree yyfree

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 37
#define YY_END_OF_BUFFER 38
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[765] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    5,    5,
        7,    7,    0,    0,    0,    0,    0,    0,    0,    0,
       26,   26,   27,   27,   28,   28,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   31,   31,    0,    0,
        0,    0,    0,    0,   16,   16,   38,   36,   36,   36,
       36,   36,   36,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,    3,   37,    5,    5,    7,    7,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   26,   26,   26,   27,   27,   28,
       28,   28,   28,   37,   37,   19,   37,   21,   37,   23,

       37,   25,   31,   31,   31,   31,   37,   37,   37,   37,
       37,   37,   37,   37,   16,   16,   16,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    3,    0,    0,    5,    5,    7,
        7,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   26,   26,   26,   26,
       26,   27,   27,   28,   28,   28,   28,   28,    0,    0,
        0,   19,   19,    0,   21,   21,    0,   23,   23,    0,

       25,   25,   31,   31,   31,   31,   31,    0,    0,    0,
        0,   33,    0,    0,   33,   33,    0,    0,    0,    0,
        0,    0,    0,    0,   16,   16,   16,   16,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   15,    0,    0,    0,
        0,    0,   31,   33,   33,   33,   33,   33,   33,   33,
       33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   15,   15,   15,   15,    0,    0,    0,    0,
        0,   33,   33,   33,   33,   33,   33,    0,   33,   33,
       33,   33,   33,   32,    0,   33,   32,   32,    0,   33,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   13,    0,    0,    0,    0,    0,
        0,   15,   15,   15,   15,    0,    0,    0,    0,    0,

       33,   33,   33,   32,   32,   32,    0,   33,    0,   32,
       32,   32,   32,   32,   32,   32,    0,   33,   33,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   15,   15,   15,    0,   18,    0,    0,    0,
       33,   32,   32,   32,   32,   32,   33,   33,   32,   32,
       32,   32,    0,   32,   32,    0,    0,   32,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   15,    0,   18,    0,   24,    0,   32,
        0,   32,    0,   32,   32,   32,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   11,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    4,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   24,    0,

       32,   32,   32,   32,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    6,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   20,   22,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   20,   22,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    1,    1,   17,    0,    0,    0,    8,    0,

        0,   35,    0,   29,    0,   34,    0,   17,   17,   17,
       14,    0,    0,    0,    0,   17,   14,   14,   14,    0,
        0,    0,    0,   14,    0,    0,    0,    0,    0,   12,
        0,    0,    0,   12,   12,   12,    9,    0,   30,   12,
        0,   30,   30,   30,    0,   30,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   10,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    1,    7,    8,    9,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,    1,
        1,    1,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   20,   20,   22,   23,   24,   25,   26,
       20,   27,   28,   29,   30,   31,   20,   20,   32,   20,
        1,    1,    1,    1,   20,    1,   20,   20,   20,   20,

       33,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[34] =
    {   0,
        1,    2,    3,    2,    1,    1,    4,    4,    1,    2,
        2,    4,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2
    } ;

static const flex_int16_t yy_base[777] =
    {   0,
        0,    0,   23,   53, 1774, 1771,   84,   93,  102,  111,
      119,  129,    0,    0,  139,  149,  165,  175,  191,    0,
      215,  224,    1,   18,  232,  242,   28,   33,   48,   58,
       63,  124,  134,  144,    0,    0,  259,  270,  280,  290,
        0,    0,  306,  316,  326,  336, 1770, 1854,  346, 1743,
     1741, 1728, 1710, 1854,  369,  399,  154, 1673, 1663, 1667,
        4, 1656, 1665,   38, 1854,   78,    5,   14,  429,  114,
      439,    0,  449,   44,  459,    0,  170,   49,  469,    0,
     1637, 1627, 1637, 1626,  159,  180,  185,  194,  237,  492,
        0,  247,   74, 1613,  285,   61,  295,   90,  311,   99,

      321,  108,  502,  512,  522,  532,  542,    0,  552,  195,
     1607,  562,    0,  331,  572,    0,  341,    0, 1603, 1593,
     1586, 1573, 1562, 1565, 1568, 1563,    0,    0,  354, 1529,
     1513, 1509,    0,  364,  582,  374, 1499, 1491, 1486,    0,
     1485, 1487,  198,  252, 1854,  300,  351,  169,  205,    0,
      378,    0,    0,    0,  180,  386,  212,  592,    0,    0,
        0,    0,  388,  402,  405,    0,    0,    0, 1478, 1463,
     1471, 1454, 1446, 1426, 1418, 1418,  379,  415,  418,  424,
      432,  464,  474,    0,    0,  479,  497,    0, 1390, 1394,
      507,  221,  227,  517,  256,  267,  527,  275,  301,  537,

      400,  434,  624,  634,  644,  654,  567,    0,    0,    0,
      577, 1854,  469,  436,  664,    0,    0, 1380, 1385,    0,
        0,  602,  606,  619,    0,    0,  629,  639, 1373, 1362,
     1365, 1371,  454,  649,  487,  539,  674, 1354, 1356, 1327,
     1322,  616, 1854,  659,  696,    0,  672,  669,  728,  680,
      557,  738,    0,  704,  714,  717,  748, 1320, 1311, 1316,
     1318, 1302,  752,  770,    0,  802,  684,  834,    0,  844,
        0,  754, 1285,  780,  784,  812, 1289, 1267, 1270, 1261,
      579,  604,  676, 1251, 1244, 1246, 1243,  764,  876,  712,
      886,    0,  782,    0,  790,  698,  810,    0,  759,    0,

      281,  814,    0,  918,  818,  822,  928,    0,  852,  846,
      854,  864,  896,  900,  938,  942, 1240, 1222, 1209, 1215,
     1212,  960,  970,    0,  421,  391,    0,  902,  859,    0,
        0,    0,  980, 1854,  906,  861,  990,    0,  940,  944,
     1208,  991,  995, 1006, 1009, 1020, 1195, 1179, 1178, 1194,
      946, 1185, 1023,  577, 1179, 1162, 1155, 1033,    0, 1035,
     1067,  967, 1077,    0, 1037,    0, 1049,  948,  993, 1004,
     1018, 1053,    0, 1047, 1085, 1079,    0, 1087,    0,  415,
     1089, 1091,    0, 1101, 1854,  794, 1101, 1103, 1105, 1107,
        0, 1117, 1121, 1131, 1134, 1153, 1160, 1143, 1132, 1128,

     1144,    0, 1147, 1854, 1157,    0, 1119, 1142, 1152,    0,
        0, 1189, 1221,    0,  209,  868, 1160, 1158,    0, 1122,
     1171, 1174, 1199, 1203, 1231, 1235, 1120, 1121, 1105, 1111,
     1245, 1169, 1248, 1258,  729, 1092, 1083, 1069, 1069, 1268,
     1178, 1278,    0, 1205, 1207,    0, 1286,    0,  578, 1217,
     1292, 1233, 1253, 1255,    0, 1280, 1296,    0, 1290,    0,
      910, 1298, 1302,    0, 1308,    0, 1306, 1310, 1312,    0,
     1314,    0, 1324, 1328, 1338, 1053,  355, 1063, 1060, 1045,
     1342, 1352,    0,    0,    0,  365, 1326,    0,    0, 1355,
      679,    0, 1354, 1340,    0, 1360, 1358, 1362, 1036, 1372,

     1375, 1385, 1388, 1398, 1401, 1411, 1421, 1010, 1028,  454,
     1001, 1370, 1383, 1406,  999, 1006,  997,  985, 1431,    0,
     1419, 1424, 1439, 1396, 1409, 1447, 1427, 1433, 1449, 1451,
     1455, 1457,    0, 1459,    0, 1463,    0, 1465,    0, 1467,
     1469, 1471,    0, 1481,  968,  603,  967,  620,  964,  697,
     1476, 1478, 1483, 1485, 1487,    0,  961, 1497, 1500, 1510,
     1513, 1523, 1533,    0, 1495, 1854,    0,  965,  939,  928,
      932,  912,  921, 1508, 1518,  898,  739,  771,  876, 1528,
     1535, 1541, 1528, 1539, 1543,    0, 1545, 1547, 1551,    0,
     1553, 1555, 1557,    0, 1559,    0,  887,  883,  781,  844,

     1561,    0, 1563,    0,  838, 1573, 1576, 1586, 1589, 1599,
        0, 1571,    0,  845,  829,  822,  828,  807, 1584, 1594,
      808,  803,  835,  796, 1596, 1609, 1604, 1606, 1611,    0,
     1613,    0, 1615,    0,  877,  887,  777,  768, 1625, 1628,
     1638,    0, 1623,    0,  754,  739,  726,  730,  721, 1641,
      714,  961,  692,  919, 1034,  668,  648, 1651, 1661,    0,
     1636,    0,  645,  627,  612,  610,  576, 1656, 1646, 1658,
     1249,  566,  546,  537,  533, 1671, 1666,    0,  535, 1681,
      514,  508,  496,  498, 1668,  473, 1684, 1691, 1694, 1697,
        0,  470,    0, 1694, 1704,  459,  454, 1699, 1854,  426,

     1714, 1854, 1717, 1854, 1720, 1854,  385,    0, 1723, 1047,
     1726,  376, 1721,  363,  366, 1736,    0, 1739, 1063,  360,
      350, 1709,  324, 1742,  316, 1737, 1747,  320,  300, 1770,
     1742,  260,  222,    0, 1752, 1118, 1854,  223, 1780, 1755,
      141,    0, 1758, 1135,  129, 1761, 1765, 1773,  131,  188,
      114,   77,   67,   59, 1783, 1790,   29,   18,    0,    1,
     1796, 1799, 1854, 1854, 1814, 1818, 1822, 1826, 1830, 1834,
        8, 1837, 1840, 1843, 1846, 1849
    } ;

static const flex_int16_t yy_def[777] =
    {   0,
      765,  765,  766,  766,  766,  766,  767,  767,  768,  768,
      766,  766,  766,  766,  766,  766,  766,  766,  766,   19,
      769,  769,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  770,  770,  766,  766,
      766,  766,  766,  766,  766,  766,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  771,  764,  764,  764,
       55,  764,  764,  772,  764,  772,  773,  773,  764,  764,
      764,   71,  764,   71,  764,   75,  764,   75,  764,   79,
      764,  764,  764,  764,  774,  774,  774,  764,  764,  764,
       90,  764,   90,  764,  764,  764,  764,  764,  764,  764,

      764,  764,  775,  775,  775,  775,  764,  107,  764,  107,
      764,  764,  112,  764,  764,  115,  764,   49,  764,  764,
      764,  764,  764,  764,  764,  764,   55,   56,  771,  764,
      764,  764,   56,  771,  771,  771,  764,  764,  764,   61,
      764,  764,  776,  772,  764,  772,  772,  773,  773,   69,
      764,   71,   71,   73,   73,  764,  764,  764,  158,   74,
       75,   75,  764,  764,  764,   78,   79,   79,  764,  764,
      764,  764,  764,  764,  764,  764,  774,  774,  774,  764,
      764,  764,  764,   90,   90,  764,  764,   93,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,

      764,  764,  775,  775,  775,  775,  764,  107,  107,  109,
      109,  764,  764,  764,  764,  215,  110,  764,  764,  112,
      112,  764,  764,  764,  115,  115,  764,  764,  764,  764,
      764,  764,  764,  771,  764,  764,  764,  764,  764,  764,
      764,  776,  764,  776,  764,  245,  245,  247,  764,  764,
      248,  764,  252,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  264,  764,  266,  764,  267,  764,
      270,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  776,  764,  764,
      764,  291,  291,  293,  764,  764,  293,  297,  764,  291,

      293,  297,  302,  764,  764,  301,  764,  307,  764,  764,
      289,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  270,  323,  266,  266,  326,  764,  326,  329,
      323,  323,  764,  764,  764,  267,  270,  337,  764,  325,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  358,  358,
      764,  764,  764,  363,  363,  365,  764,  764,  289,  360,
      370,  365,  372,  306,  764,  372,  376,  764,  363,  365,
      764,  376,  382,  304,  764,  382,  764,  764,  361,  302,
      390,  764,  764,  764,  764,  764,  764,  764,  764,  764,

      323,  401,  333,  764,  323,  405,  764,  325,  764,  405,
      405,  764,  764,  413,  333,  413,  764,  329,  418,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  442,  764,  442,  445,  764,  442,  445,  361,
      764,  764,  361,  390,  454,  764,  445,  457,  457,  459,
      459,  764,  361,  386,  764,  461,  764,  450,  382,  469,
      469,  471,  764,  764,  764,  764,  764,  764,  764,  764,
      333,  405,  482,  482,  482,  403,  418,  487,  416,  481,
      412,  491,  764,  491,  494,  764,  764,  490,  764,  764,

      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  519,
      519,  440,  764,  764,  440,  764,  764,  440,  764,  764,
      450,  471,  532,  532,  534,  521,  536,  534,  538,  764,
      450,  538,  542,  764,  764,  764,  764,  764,  764,  481,
      764,  490,  764,  490,  494,  555,  764,  764,  764,  764,
      764,  764,  764,  563,  507,  764,  507,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  522,  459,  585,  764,  522,  585,  589,
      764,  522,  542,  593,  593,  595,  764,  764,  764,  764,

      555,  601,  601,  603,  764,  764,  764,  764,  764,  764,
      610,  563,  563,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  626,  589,  629,
      629,  631,  631,  633,  764,  764,  764,  764,  764,  764,
      764,  641,  610,  610,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  659,
      641,  641,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  659,  659,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      676,  764,  680,  764,  764,  764,  764,  764,  764,  764,

      764,  764,  764,  764,  764,  764,  764,  695,  764,  695,
      764,  764,  764,  764,  764,  764,  711,  764,  711,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  730,  764,  730,  764,  764,  764,  764,
      764,  739,  764,  739,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,    0,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764
    } ;

static const flex_int16_t yy_nxt[1888] =
    {   0,
      764,   49,   88,   49,   88,  140,  148,  140,  148,  136,
       89,   89,  764,   50,   51,  764,   52,  764,  764,   88,
      141,   88,  761,   53,   55,   56,   55,   89,   89,   95,
      760,   95,   57,   57,   95,  759,   95,   96,   96,  144,
      145,  144,   96,   96,  758,  160,   58,  160,   59,   97,
      166,   97,  166,   60,   61,   56,   61,   98,   98,   97,
      141,   97,   57,   57,   99,  141,   99,   98,   98,   62,
      193,  193,  100,  100,  755,  188,   58,  188,   59,  147,
      145,  147,  755,   60,   54,   64,   65,   64,   54,   54,
      189,  754,   54,   54,   64,   65,   64,   54,   54,  196,

      196,   54,   54,   67,   54,   67,   54,   54,  199,  199,
       54,   54,   67,   54,   67,   54,   54,  202,  202,   54,
       69,  151,   69,  151,  151,   99,   70,   99,   70,   70,
       69,  753,   69,  100,  100,  101,   70,  101,   70,   70,
       71,   72,   71,  102,  102,  101,  750,  101,   73,   73,
       74,   72,   74,  102,  102,  134,  747,  134,   73,   73,
      177,  178,  177,  135,  135,   62,   75,   76,   75,  745,
      148,  164,  148,  164,   77,   77,   78,   76,   78,  165,
      165,  177,  178,  177,   77,   77,  180,  181,  180,  245,
      246,   62,   79,   80,   79,  182,  217,  182,  217,  242,

      243,  242,  751,  183,  183,  752,  764,   81,  764,   82,
      415,  218,  415,   83,   84,   54,   85,   86,   85,   54,
       54,  248,  248,   54,   54,   85,   86,   85,   54,   54,
      193,  193,   54,   90,   91,   90,  193,  193,  182,  741,
      182,   92,   92,   93,   91,   93,  183,  183,  187,  739,
      187,   92,   92,  144,  145,  144,  186,  186,   94,   54,
      103,  104,  103,   54,   54,  196,  196,   54,  106,  106,
       54,  103,  104,  103,   54,   54,  196,  196,   54,  106,
      106,  107,  108,  107,  199,  199,  191,  738,  191,  109,
      109,  110,  108,  110,  192,  192,  194,  375,  194,  109,

      109,  147,  145,  147,  195,  195,  111,  112,  113,  112,
      199,  199,  197,  375,  197,  114,  114,  112,  113,  112,
      198,  198,  200,  733,  200,  114,  114,  115,  116,  115,
      201,  201,  223,  732,  223,  117,  117,  115,  116,  115,
      224,  224,  228,  730,  228,  117,  117,  118,  729,  118,
      227,  227,  147,  145,  147,  134,  546,  134,  546,  119,
      120,  726,  121,  135,  135,  134,  486,  134,  486,  122,
      127,  128,  127,  233,  233,  237,  725,  237,  129,  129,
      177,  178,  177,  233,  233,  151,  723,  151,  151,  164,
      722,  164,  130,  157,  131,  247,  247,  165,  165,  132,

      133,  128,  133,  164,  720,  164,  256,  272,  256,  202,
      202,  255,  255,  715,  257,  257,  177,  178,  177,  180,
      181,  180,  130,  272,  131,  180,  181,  180,  214,  132,
      150,  465,  150,  180,  181,  180,  151,  764,  151,  151,
      152,  153,  152,  202,  202,  267,  267,  465,  154,  154,
      155,  714,  155,  764,  156,  156,  157,  570,  158,  159,
      161,  162,  161,  281,  281,  182,  712,  182,  163,  163,
      167,  168,  167,  183,  183,  182,  214,  182,  266,  266,
      187,  571,  187,  183,  183,  169,  711,  170,  186,  186,
      707,  171,  172,  184,  185,  184,  282,  282,  187,  700,

      187,  186,  186,  203,  204,  203,  186,  186,  191,  698,
      191,  206,  206,  203,  204,  203,  192,  192,  194,  697,
      194,  206,  206,  207,  764,  207,  195,  195,  197,  696,
      197,  206,  206,  207,  764,  207,  198,  198,  200,  695,
      200,  206,  206,  208,  209,  208,  201,  201,  283,  283,
      692,  210,  210,  211,  212,  211,  689,  213,  213,  214,
      688,  215,  216,  220,  221,  220,  302,  303,  207,  687,
      207,  222,  222,  225,  226,  225,  263,  263,  435,  764,
      435,  227,  227,  234,  686,  234,  264,  265,  351,  351,
      235,  236,  236,  249,  529,  249,  683,  250,  250,  251,

      436,  252,  253,  223,  546,  223,  546,  223,  254,  223,
      529,  224,  224,  352,  352,  274,  274,  242,  243,  242,
      275,  599,  275,  599,  254,  203,  204,  203,  276,  276,
      228,  682,  228,  206,  206,  203,  204,  203,  227,  227,
      228,  681,  228,  206,  206,  207,  764,  207,  227,  227,
      234,  680,  234,  206,  206,  207,  764,  207,  233,  233,
      288,  243,  288,  206,  206,  268,  212,  268,  679,  213,
      213,  269,  675,  270,  271,  237,  296,  237,  297,  298,
      272,  293,  294,  233,  233,  353,  353,  299,  295,  301,
      301,  214,  674,  329,  330,  417,  272,  289,  550,  289,

      550,  290,  290,  251,  295,  291,  292,  370,  370,  310,
      310,  417,  254,  311,  311,  312,  673,  312,  256,  296,
      256,  360,  360,  313,  313,  670,  314,  314,  254,  249,
      435,  249,  435,  250,  250,  299,  667,  300,  292,  304,
      622,  304,  622,  305,  305,  306,  666,  307,  308,  315,
      665,  315,  436,  207,  309,  207,  664,  316,  316,  339,
      339,  263,  263,  340,  340,  288,  243,  288,  374,  374,
      309,  322,  623,  322,  623,  213,  213,  269,  663,  323,
      324,  342,  599,  342,  599,  275,  272,  275,  657,  343,
      343,  365,  366,  344,  344,  368,  368,  656,  367,  369,

      369,  381,  272,  325,  622,  325,  622,  213,  213,  269,
      465,  326,  327,  345,  367,  345,  653,  371,  328,  372,
      373,  346,  346,  376,  377,  378,  465,  380,  380,  381,
      652,  382,  383,  649,  328,  268,  623,  268,  623,  213,
      213,  214,  648,  331,  332,  333,  334,  333,  647,  335,
      335,  336,  646,  337,  338,  311,  311,  388,  388,  645,
      272,  389,  389,  390,  391,  312,  638,  312,  329,  330,
      413,  414,  637,  392,  392,  409,  272,  289,  654,  289,
      654,  290,  290,  296,  493,  358,  359,  361,  655,  361,
      655,  362,  362,  306,  636,  363,  364,  393,  635,  393,

      493,  393,  309,  393,  624,  394,  394,  407,  407,  394,
      394,  408,  408,  409,  621,  412,  412,  456,  309,  304,
      654,  304,  654,  305,  305,  378,  529,  379,  364,  384,
      385,  384,  575,  305,  305,  386,  618,  307,  308,  315,
      617,  315,  529,  315,  387,  315,  616,  395,  395,  340,
      340,  316,  316,  418,  419,  431,  431,  369,  369,  615,
      387,  322,  671,  322,  671,  213,  213,  214,  614,  401,
      402,  403,  404,  403,  381,  605,  449,  449,  600,  405,
      406,  333,  404,  333,  672,  335,  335,  409,  598,  410,
      411,  415,  342,  415,  342,  597,  422,  416,  422,  579,

      421,  421,  454,  455,  423,  423,  417,  422,  578,  422,
      345,  456,  345,  457,  458,  423,  423,  577,  424,  424,
      576,  425,  417,  425,  433,  572,  433,  459,  460,  426,
      426,  569,  434,  434,  440,  655,  440,  655,  441,  441,
      371,  568,  442,  443,  445,  446,  365,  366,  716,  444,
      716,  447,  557,  451,  452,  452,  376,  377,  453,  453,
      461,  549,  372,  373,  724,  444,  724,  447,  361,  451,
      361,  548,  362,  362,  381,  547,  448,  443,  450,  385,
      450,  545,  362,  362,  386,  518,  363,  364,  376,  377,
      462,  462,  517,  387,  463,  463,  464,  464,  466,  466,

      382,  383,  384,  385,  384,  516,  467,  467,  515,  387,
      468,  468,  389,  389,  469,  470,  471,  472,  473,  740,
      473,  740,  393,  444,  393,  511,  474,  474,  408,  408,
      475,  475,  393,  510,  393,  393,  746,  393,  746,  444,
      394,  394,  509,  394,  394,  481,  508,  481,  403,  499,
      403,  487,  488,  482,  483,  480,  484,  485,  486,  479,
      486,  489,  489,  478,  416,  497,  497,  418,  419,  498,
      498,  477,  500,  417,  500,  422,  476,  422,  513,  513,
      501,  501,  439,  502,  502,  456,  438,  521,  521,  417,
      490,  437,  490,  432,  335,  335,  416,  430,  491,  492,

      503,  429,  503,  428,  503,  493,  503,  427,  504,  504,
      524,  524,  504,  504,  525,  525,  445,  446,  450,  385,
      450,  493,  490,  526,  490,  420,  335,  335,  336,  400,
      494,  495,  425,  399,  425,  398,  506,  496,  506,  526,
      505,  505,  453,  453,  507,  507,  433,  397,  433,  433,
      671,  433,  671,  496,  512,  512,  396,  512,  512,  433,
      357,  433,  532,  533,  534,  535,  356,  514,  514,  440,
      355,  440,  672,  441,  441,  456,  354,  519,  520,  522,
      385,  522,  350,  441,  441,  461,  349,  442,  443,  536,
      536,  527,  527,  348,  523,  528,  528,  530,  530,  459,

      460,  531,  531,  537,  347,  457,  458,  463,  463,  341,
      523,  538,  539,  540,  540,  468,  468,  541,  541,  542,
      543,  469,  470,  471,  472,  473,  321,  473,  523,  473,
      320,  473,  319,  544,  544,  487,  488,  474,  474,  473,
      318,  473,  317,  481,  523,  481,  287,  474,  474,  494,
      495,  491,  492,  550,  286,  550,  490,  764,  490,  551,
      551,  482,  483,  552,  552,  553,  553,  498,  498,  554,
      554,  555,  556,  500,  285,  500,  559,  284,  559,  573,
      573,  558,  558,  280,  560,  560,  559,  279,  559,  503,
      278,  503,  574,  574,  560,  560,  277,  561,  561,  562,

      273,  562,  562,  219,  562,  525,  525,  563,  563,  262,
      563,  563,  506,  190,  506,  573,  573,  575,  585,  586,
      564,  564,  565,  566,  565,  522,  385,  522,  521,  521,
      567,  567,  580,  385,  580,  582,  528,  528,  537,  261,
      520,  520,  589,  590,  583,  583,  260,  581,  584,  584,
      259,  582,  587,  587,  591,  591,  588,  588,  592,  592,
      531,  531,  258,  581,  593,  594,  532,  533,  534,  535,
      764,  176,  536,  536,  538,  539,  541,  541,  595,  596,
      542,  543,  473,  175,  473,  552,  552,  601,  602,  174,
      544,  544,  554,  554,  603,  604,  555,  556,  606,  173,

      606,  559,  241,  559,  564,  564,  607,  607,  142,  608,
      608,  609,  240,  609,  609,  239,  609,  619,  619,  610,
      610,  238,  610,  610,  562,  139,  562,  620,  620,  580,
      385,  580,  611,  611,  612,  566,  612,  584,  584,  138,
      625,  625,  613,  613,  626,  626,  627,  627,  629,  630,
      628,  628,  585,  586,  588,  588,  631,  632,  137,  581,
      589,  590,  592,  592,  633,  634,  593,  594,  595,  596,
      601,  602,  603,  604,  606,  581,  606,  640,  232,  640,
      611,  611,  639,  639,  231,  641,  641,  640,  230,  640,
      609,  229,  609,  650,  650,  641,  641,  126,  642,  642,

      643,  566,  643,  651,  651,  626,  626,  125,  644,  644,
      580,  385,  580,  628,  628,  628,  628,  124,  626,  626,
      629,  630,  631,  632,  633,  634,  658,  123,  658,  640,
      219,  640,  642,  642,  659,  659,  190,  660,  660,  661,
      566,  661,  668,  176,  668,  660,  660,  662,  662,  175,
      669,  669,  658,  174,  658,  684,  684,  668,  173,  668,
      676,  676,  677,  566,  677,  669,  669,  685,  685,  143,
      678,  678,  690,  566,  690,  676,  676,  699,  699,  142,
      691,  691,  693,  139,  693,  701,  702,  701,  694,  138,
      694,  694,  703,  704,  703,  705,  706,  705,  690,  566,

      690,  694,  137,  694,  694,  708,  709,  708,  713,  713,
      727,  710,  727,  710,  710,  701,  702,  701,  703,  704,
      703,  705,  706,  705,  716,  709,  716,  717,  718,  717,
      721,  721,  728,  719,  126,  719,  719,  716,  709,  716,
      724,  718,  724,  724,  718,  724,  731,  731,  727,  125,
      727,  737,  737,  740,  735,  740,  740,  735,  740,  746,
      743,  746,  746,  743,  746,  124,  748,  123,  748,  764,
      728,  734,  735,  734,  748,   63,  748,  736,   63,  736,
      736,  742,  743,  742,  756,  764,  756,  744,  749,  744,
      744,  756,  764,  756,  764,  764,  749,  762,  763,  762,

      762,  763,  762,  764,  764,  764,  757,  764,  764,  764,
      764,  764,  764,  757,   48,   48,   48,   48,   54,   54,
       54,   54,   66,   66,   66,   66,   68,   68,   68,   68,
       87,   87,   87,   87,  105,  105,  105,  105,  146,  146,
      146,  149,  764,  149,  179,  179,  179,  205,  205,  205,
      244,  244,  244,   47,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764
    } ;

static const flex_int16_t yy_chk[1888] =
    {   0,
        0,    2,   23,    2,   23,   61,   67,   61,   67,  771,
       23,   23,    0,    2,    2,   68,    2,   68,    0,   24,
       61,   24,  760,    2,    3,    3,    3,   24,   24,   27,
      759,   27,    3,    3,   28,  758,   28,   27,   27,   64,
       64,   64,   28,   28,  757,   74,    3,   74,    3,   29,
       78,   29,   78,    3,    4,    4,    4,   29,   29,   30,
       74,   30,    4,    4,   31,   78,   31,   30,   30,    4,
       96,   96,   31,   31,  754,   93,    4,   93,    4,   66,
       66,   66,  753,    4,    7,    7,    7,    7,    7,    7,
       93,  752,    7,    8,    8,    8,    8,    8,    8,   98,

       98,    8,    9,    9,    9,    9,    9,    9,  100,  100,
        9,   10,   10,   10,   10,   10,   10,  102,  102,   10,
       11,   70,   11,   70,   70,   32,   11,   32,   11,   11,
       12,  751,   12,   32,   32,   33,   12,   33,   12,   12,
       15,   15,   15,   33,   33,   34,  749,   34,   15,   15,
       16,   16,   16,   34,   34,   57,  745,   57,   16,   16,
       85,   85,   85,   57,   57,   16,   17,   17,   17,  741,
      148,   77,  148,   77,   17,   17,   18,   18,   18,   77,
       77,   86,   86,   86,   18,   18,   87,   87,   87,  155,
      155,   18,   19,   19,   19,   88,  110,   88,  110,  143,

      143,  143,  750,   88,   88,  750,  149,   19,  149,   19,
      415,  110,  415,   19,   19,   21,   21,   21,   21,   21,
       21,  157,  157,   21,   22,   22,   22,   22,   22,   22,
      192,  192,   22,   25,   25,   25,  193,  193,   89,  738,
       89,   25,   25,   26,   26,   26,   89,   89,   92,  733,
       92,   26,   26,  144,  144,  144,   92,   92,   26,   37,
       37,   37,   37,   37,   37,  195,  195,   37,   37,   37,
       38,   38,   38,   38,   38,   38,  196,  196,   38,   38,
       38,   39,   39,   39,  198,  198,   95,  732,   95,   39,
       39,   40,   40,   40,   95,   95,   97,  301,   97,   40,

       40,  146,  146,  146,   97,   97,   40,   43,   43,   43,
      199,  199,   99,  301,   99,   43,   43,   44,   44,   44,
       99,   99,  101,  729,  101,   44,   44,   45,   45,   45,
      101,  101,  114,  728,  114,   45,   45,   46,   46,   46,
      114,  114,  117,  725,  117,   46,   46,   49,  723,   49,
      117,  117,  147,  147,  147,  129,  477,  129,  477,   49,
       49,  721,   49,  129,  129,  134,  486,  134,  486,   49,
       55,   55,   55,  134,  134,  136,  720,  136,   55,   55,
      177,  177,  177,  136,  136,  151,  715,  151,  151,  163,
      714,  163,   55,  156,   55,  156,  156,  163,  163,   55,

       56,   56,   56,  164,  712,  164,  165,  326,  165,  201,
      201,  164,  164,  707,  165,  165,  178,  178,  178,  179,
      179,  179,   56,  326,   56,  180,  180,  180,  325,   56,
       69,  380,   69,  181,  181,  181,   69,  325,   69,   69,
       71,   71,   71,  202,  202,  214,  214,  380,   71,   71,
       73,  700,   73,  325,   73,   73,   73,  510,   73,   73,
       75,   75,   75,  233,  233,  182,  697,  182,   75,   75,
       79,   79,   79,  182,  182,  183,  213,  183,  213,  213,
      186,  510,  186,  183,  183,   79,  696,   79,  186,  186,
      692,   79,   79,   90,   90,   90,  235,  235,  187,  686,

      187,   90,   90,  103,  103,  103,  187,  187,  191,  684,
      191,  103,  103,  104,  104,  104,  191,  191,  194,  683,
      194,  104,  104,  105,  105,  105,  194,  194,  197,  682,
      197,  105,  105,  106,  106,  106,  197,  197,  200,  681,
      200,  106,  106,  107,  107,  107,  200,  200,  236,  236,
      679,  107,  107,  109,  109,  109,  675,  109,  109,  109,
      674,  109,  109,  112,  112,  112,  251,  251,  207,  673,
      207,  112,  112,  115,  115,  115,  207,  207,  354,  211,
      354,  115,  115,  135,  672,  135,  211,  211,  281,  281,
      135,  135,  135,  158,  449,  158,  667,  158,  158,  158,

      354,  158,  158,  222,  546,  222,  546,  223,  158,  223,
      449,  222,  222,  282,  282,  223,  223,  242,  242,  242,
      224,  548,  224,  548,  158,  203,  203,  203,  224,  224,
      227,  666,  227,  203,  203,  204,  204,  204,  227,  227,
      228,  665,  228,  204,  204,  205,  205,  205,  228,  228,
      234,  664,  234,  205,  205,  206,  206,  206,  234,  234,
      244,  244,  244,  206,  206,  215,  215,  215,  663,  215,
      215,  215,  657,  215,  215,  237,  248,  237,  248,  248,
      215,  247,  247,  237,  237,  283,  283,  250,  247,  250,
      250,  267,  656,  267,  267,  491,  215,  245,  550,  245,

      550,  245,  245,  245,  247,  245,  245,  296,  296,  254,
      254,  491,  245,  254,  254,  255,  653,  255,  256,  290,
      256,  290,  290,  255,  255,  651,  256,  256,  245,  249,
      435,  249,  435,  249,  249,  249,  649,  249,  249,  252,
      577,  252,  577,  252,  252,  252,  648,  252,  252,  257,
      647,  257,  435,  263,  252,  263,  646,  257,  257,  272,
      272,  263,  263,  272,  272,  288,  288,  288,  299,  299,
      252,  264,  578,  264,  578,  264,  264,  264,  645,  264,
      264,  274,  599,  274,  599,  275,  264,  275,  638,  274,
      274,  293,  293,  275,  275,  295,  295,  637,  293,  295,

      295,  386,  264,  266,  622,  266,  622,  266,  266,  266,
      386,  266,  266,  276,  293,  276,  624,  297,  266,  297,
      297,  276,  276,  302,  302,  305,  386,  305,  305,  306,
      621,  306,  306,  618,  266,  268,  623,  268,  623,  268,
      268,  268,  617,  268,  268,  270,  270,  270,  616,  270,
      270,  270,  615,  270,  270,  310,  310,  309,  309,  614,
      270,  309,  309,  311,  311,  312,  605,  312,  329,  329,
      336,  336,  600,  312,  312,  416,  270,  289,  635,  289,
      635,  289,  289,  289,  416,  289,  289,  291,  636,  291,
      636,  291,  291,  291,  598,  291,  291,  313,  597,  313,

      416,  314,  291,  314,  579,  313,  313,  328,  328,  314,
      314,  328,  328,  335,  576,  335,  335,  461,  291,  304,
      654,  304,  654,  304,  304,  304,  461,  304,  304,  307,
      307,  307,  573,  307,  307,  307,  572,  307,  307,  315,
      571,  315,  461,  316,  307,  316,  570,  315,  315,  339,
      339,  316,  316,  340,  340,  351,  351,  368,  368,  569,
      307,  322,  652,  322,  652,  322,  322,  322,  568,  322,
      322,  323,  323,  323,  362,  557,  362,  362,  549,  323,
      323,  333,  333,  333,  652,  333,  333,  333,  547,  333,
      333,  337,  342,  337,  342,  545,  343,  337,  343,  518,

      342,  342,  369,  369,  343,  343,  337,  344,  517,  344,
      345,  370,  345,  370,  370,  344,  344,  516,  345,  345,
      515,  346,  337,  346,  353,  511,  353,  371,  371,  346,
      346,  509,  353,  353,  358,  655,  358,  655,  358,  358,
      358,  508,  358,  358,  360,  360,  365,  365,  710,  358,
      710,  360,  499,  365,  367,  367,  374,  374,  367,  367,
      372,  480,  372,  372,  719,  358,  719,  360,  361,  365,
      361,  479,  361,  361,  361,  478,  361,  361,  363,  363,
      363,  476,  363,  363,  363,  439,  363,  363,  376,  376,
      375,  375,  438,  363,  375,  375,  378,  378,  381,  381,

      382,  382,  384,  384,  384,  437,  387,  387,  436,  363,
      387,  387,  388,  388,  389,  389,  390,  390,  392,  736,
      392,  736,  393,  390,  393,  430,  392,  392,  407,  407,
      393,  393,  394,  429,  394,  395,  744,  395,  744,  390,
      394,  394,  428,  395,  395,  401,  427,  401,  403,  420,
      403,  408,  408,  401,  401,  400,  403,  403,  405,  399,
      405,  409,  409,  398,  405,  417,  417,  418,  418,  417,
      417,  397,  421,  405,  421,  422,  396,  422,  432,  432,
      421,  421,  357,  422,  422,  441,  356,  441,  441,  405,
      412,  355,  412,  352,  412,  412,  412,  350,  412,  412,

      423,  349,  423,  348,  424,  412,  424,  347,  423,  423,
      444,  444,  424,  424,  444,  444,  445,  445,  450,  450,
      450,  412,  413,  445,  413,  341,  413,  413,  413,  321,
      413,  413,  425,  320,  425,  319,  426,  413,  426,  445,
      425,  425,  452,  452,  426,  426,  431,  318,  431,  433,
      671,  433,  671,  413,  431,  431,  317,  433,  433,  434,
      287,  434,  453,  453,  454,  454,  286,  434,  434,  440,
      285,  440,  671,  440,  440,  440,  284,  440,  440,  442,
      442,  442,  280,  442,  442,  442,  279,  442,  442,  456,
      456,  447,  447,  278,  442,  447,  447,  451,  451,  459,

      459,  451,  451,  457,  277,  457,  457,  462,  462,  273,
      442,  463,  463,  465,  465,  467,  467,  465,  465,  468,
      468,  469,  469,  471,  471,  473,  262,  473,  469,  474,
      261,  474,  260,  473,  473,  487,  487,  474,  474,  475,
      259,  475,  258,  481,  469,  481,  241,  475,  475,  494,
      494,  481,  481,  482,  240,  482,  490,  490,  490,  493,
      493,  482,  482,  493,  493,  496,  496,  497,  497,  496,
      496,  498,  498,  500,  239,  500,  501,  238,  501,  512,
      512,  500,  500,  232,  501,  501,  502,  231,  502,  503,
      230,  503,  513,  513,  502,  502,  229,  503,  503,  504,

      219,  504,  505,  218,  505,  524,  524,  504,  504,  190,
      505,  505,  506,  189,  506,  514,  514,  514,  525,  525,
      506,  506,  507,  507,  507,  522,  522,  522,  521,  521,
      507,  507,  519,  519,  519,  521,  527,  527,  519,  176,
      519,  519,  528,  528,  523,  523,  175,  519,  523,  523,
      174,  521,  526,  526,  529,  529,  526,  526,  529,  529,
      530,  530,  173,  519,  531,  531,  532,  532,  534,  534,
      536,  172,  536,  536,  538,  538,  540,  540,  541,  541,
      542,  542,  544,  171,  544,  551,  551,  552,  552,  170,
      544,  544,  553,  553,  554,  554,  555,  555,  558,  169,

      558,  559,  142,  559,  565,  565,  558,  558,  141,  559,
      559,  560,  139,  560,  561,  138,  561,  574,  574,  560,
      560,  137,  561,  561,  562,  132,  562,  575,  575,  580,
      580,  580,  562,  562,  563,  563,  563,  583,  583,  131,
      581,  581,  563,  563,  581,  581,  582,  582,  584,  584,
      582,  582,  585,  585,  587,  587,  588,  588,  130,  585,
      589,  589,  591,  591,  592,  592,  593,  593,  595,  595,
      601,  601,  603,  603,  606,  585,  606,  607,  126,  607,
      612,  612,  606,  606,  125,  607,  607,  608,  124,  608,
      609,  123,  609,  619,  619,  608,  608,  122,  609,  609,

      610,  610,  610,  620,  620,  625,  625,  121,  610,  610,
      626,  626,  626,  627,  627,  628,  628,  120,  626,  626,
      629,  629,  631,  631,  633,  633,  639,  119,  639,  640,
      111,  640,  643,  643,  639,  639,   94,  640,  640,  641,
      641,  641,  650,   84,  650,  661,  661,  641,  641,   83,
      650,  650,  658,   82,  658,  669,  669,  668,   81,  668,
      658,  658,  659,  659,  659,  668,  668,  670,  670,   63,
      659,  659,  676,  676,  676,  677,  677,  685,  685,   62,
      676,  676,  680,   60,  680,  687,  687,  687,  680,   59,
      680,  680,  688,  688,  688,  689,  689,  689,  690,  690,

      690,  694,   58,  694,  694,  695,  695,  695,  698,  698,
      722,  695,  722,  695,  695,  701,  701,  701,  703,  703,
      703,  705,  705,  705,  709,  709,  709,  711,  711,  711,
      713,  713,  722,  711,   53,  711,  711,  716,  716,  716,
      718,  718,  718,  724,  724,  724,  726,  726,  727,   52,
      727,  731,  731,  735,  735,  735,  740,  740,  740,  743,
      743,  743,  746,  746,  746,   51,  747,   50,  747,   47,
      727,  730,  730,  730,  748,    6,  748,  730,    5,  730,
      730,  739,  739,  739,  755,    0,  755,  739,  747,  739,
      739,  756,    0,  756,    0,    0,  748,  761,  761,  761,

      762,  762,  762,    0,    0,    0,  755,    0,    0,    0,
        0,    0,    0,  756,  765,  765,  765,  765,  766,  766,
      766,  766,  767,  767,  767,  767,  768,  768,  768,  768,
      769,  769,  769,  769,  770,  770,  770,  770,  772,  772,
      772,  773,    0,  773,  774,  774,  774,  775,  775,  775,
      776,  776,  776,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "gambitToFoam.L"
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Copyright (C) 2011-2019 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/
#line 27 "gambitToFoam.L"

#undef yyFlexLexer

 /* ------------------------------------------------------------------------- *\
   ------ local definitions
 \* ------------------------------------------------------------------------- */

#include <scalarList.hxx>
#include <IStringStream.hxx>

// For EOF only
#include <cstdio>

using namespace tnbLib;

#include <argList.hxx>
#include <Time.hxx>
#include <polyMesh.hxx>
#include <emptyPolyPatch.hxx>
#include <preservePatchTypes.hxx>
#include <cellModeller.hxx>
#include <cellShape.hxx>
#include <SLList.hxx>
#include <SLPtrList.hxx>

label nPoints = 0;
label nCells = 0;
label nCellStreams = 0;
label nPatches = 0;

label nCoordDirections = 0;
label nVectorComponents = 0;


pointField points(0);
labelList pointMap(0);

PtrList<labelList> cellLabels(0);
labelList cellMap(0);
labelList cellTypes(0);
labelList cellStreamIDs(0);

wordList patchNames(0);
labelListList patchCells(0);
labelListList patchCellFaces(0);
label nValuesForPatchFaces = 0;

// Dummy yywrap to keep yylex happy at compile time.
// It is called by yylex but is not used as the mechanism to change file.
// See <<EOF>>
#if YY_FLEX_MINOR_VERSION < 6 && YY_FLEX_SUBMINOR_VERSION < 34
extern "C" int yywrap()
#else
int yyFlexLexer::yywrap()
#endif
{
    return 1;
}

#line 1145 "gambitToFoam.cxx"
#line 147 "gambitToFoam.L"
 /* ------------------------------------------------------------------------- *\
                      -----  Exclusive start states -----
 \* ------------------------------------------------------------------------- */






















#line 1172 "gambitToFoam.cxx"

#define INITIAL 0
#define controlInfo 1
#define readControlHeader 2
#define readTitle 3
#define readProgramID 4
#define readVersionID 5
#define applicationData 6
#define nodalCoords 7
#define cellsAndElements 8
#define cellStreams 9
#define cellStreamTitle 10
#define cellStreamFlags 11
#define cellStreamLabels 12
#define readCellStreamGroupID 13
#define readCellStreamNElements 14
#define readCellStreamMaterial 15
#define readCellStreamNFlags 16
#define boundaryPatch 17
#define boundaryPatchParams 18
#define boundaryPatchFaces 19
#define faceConnectivity 20
#define globalMeshData 21
#define cellContLine 22

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 177 "gambitToFoam.L"



    label nCellContinuationLines = 0;
    label curNumberOfNodes = 0;
    label curNumberOfCells = 0;
    label curGroupID = 0;
    label curBoundaryPatch = 0;
    label curPatchFace = 0;



 /* ------------------------------------------------------------------------- *\
                            ------ Start Lexing ------
 \* ------------------------------------------------------------------------- */

 /*                      ------ Reading control header ------                 */

#line 1345 "gambitToFoam.cxx"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 765 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1854 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 195 "gambitToFoam.L"
{
        BEGIN(readControlHeader);
    }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 200 "gambitToFoam.L"
{
        BEGIN(readTitle);
    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 205 "gambitToFoam.L"
{

        Info  << "Title: " << YYText();
        BEGIN(controlInfo);
    }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 212 "gambitToFoam.L"
{
        BEGIN(readProgramID);
    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 217 "gambitToFoam.L"
{

        Info<< "Written by " << YYText() << " ";
        BEGIN(controlInfo);
    }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 224 "gambitToFoam.L"
{
        BEGIN(readVersionID);
    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 229 "gambitToFoam.L"
{

        Info<< " version " << YYText() << endl;
        BEGIN(controlInfo);
    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 236 "gambitToFoam.L"
{

        Info<< "File written on " << YYText() << endl;
    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 242 "gambitToFoam.L"
{

        Info<< "File written on " << YYText() << endl;
    }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 248 "gambitToFoam.L"
{
        BEGIN(globalMeshData);
    }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 253 "gambitToFoam.L"
{

        IStringStream nodeStream(YYText());

        nPoints = readLabel(nodeStream);
        nCells = readLabel(nodeStream);
        nCellStreams = readLabel(nodeStream);
        nPatches = readLabel(nodeStream);
        nCoordDirections = readLabel(nodeStream);
        nVectorComponents = readLabel(nodeStream);

        // reset list sizes - now known!
        points.setSize(nPoints);
        pointMap.setSize(nPoints);

        cellLabels.setSize(nCells);
        cellMap.setSize(nCells);
        cellTypes.setSize(nCells);
        cellStreamIDs.setSize(nCells);

        patchNames.setSize(nPatches);
        patchCells.setSize(nPatches);
        patchCellFaces.setSize(nPatches);

        Info<< "    number of points:  " <<  nPoints << endl
            << "    number of cells:   " << nCells << endl
            << "    number of patches: " << nPatches << endl;

        BEGIN(controlInfo);
    }
	YY_BREAK
/*                 ------  Reading nodal coordinates ------                 */
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 287 "gambitToFoam.L"
{

        curNumberOfNodes = 0;
        Info<< "Reading nodal coordinates" << endl;
        BEGIN(nodalCoords);
    }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 295 "gambitToFoam.L"
{

        IStringStream nodeStream(YYText());

        label nodeI(readLabel(nodeStream));

        // Note: coordinates must be read one at the time.
        scalar x = readScalar(nodeStream);
        scalar y = readScalar(nodeStream);
        scalar z = readScalar(nodeStream);

        // add mapping and scalced node to the list
        pointMap[curNumberOfNodes] = nodeI;
        points[curNumberOfNodes] = point(x, y, z);
        curNumberOfNodes++;
    }
	YY_BREAK
/*                   ------ Reading cells and elements ------               */
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 315 "gambitToFoam.L"
{

        curNumberOfCells = 0;
        Info<< "Reading cells" << endl;
        BEGIN(cellsAndElements);
    }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 322 "gambitToFoam.L"
{

        IStringStream elementStream(YYText());

        label celli(readLabel(elementStream));
        label cellType(readLabel(elementStream));
        label nVertices(readLabel(elementStream));

        // reset number of continuation lines
        nCellContinuationLines = 0;

        cellMap[curNumberOfCells] = celli;
        cellTypes[curNumberOfCells] = cellType;
        cellLabels.set(curNumberOfCells, new labelList(nVertices));

        labelList& curLabels = cellLabels[curNumberOfCells];

        // Find out how many labels are expected. If less or equal to
        // seven, read them all and finish with it. If there is more,
        // set read of the next line
        label labelsToRead = min(8, nVertices);
        label labelI = 0;
        for (; labelI < labelsToRead; labelI++)
        {
            if (elementStream.eof()) break;

            // Check token to avoid trailing space.
            token curLabelTok(elementStream);
            if (curLabelTok.isLabel())
            {
                curLabels[labelI] = curLabelTok.labelToken();
            }
            else
            {
                break;
            }
        }

        if (labelI < nVertices)
        {
            BEGIN(cellContLine);
        }
        else
        {
            curNumberOfCells++;
        }
    }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 371 "gambitToFoam.L"
{

        IStringStream elementStream(YYText());

        nCellContinuationLines++;

        labelList& curLabels = cellLabels[curNumberOfCells];

        label labelsToRead = min
        (
            (nCellContinuationLines + 1)*7,
            curLabels.size()
        );

        for
        (
            label labelI = nCellContinuationLines*7;
            labelI < labelsToRead;
            labelI++
        )
        {
            curLabels[labelI] = readLabel(elementStream);
        }

        // if read is finished, go back to reading cells
        if (curLabels.size() < (nCellContinuationLines + 1)*7)
        {
            curNumberOfCells++;

            BEGIN(cellsAndElements);
        }
    }
	YY_BREAK
/*             ------ Reading element group information ------               */
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 407 "gambitToFoam.L"
{
        Info<< "Reading cell streams" << endl;
        BEGIN(cellStreams);
    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 413 "gambitToFoam.L"
{
        BEGIN(readCellStreamGroupID);
    }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 418 "gambitToFoam.L"
{
        IStringStream groupStream(YYText());

        if (curGroupID > 0)
        {
            FatalErrorInFunction
                << "<readCellStreamGroupID>{space}{label} : "
                << "trying to reset group ID while active"
                << abort(FatalError);
        }
        else
        {
            curGroupID = readLabel(groupStream);
        }

        BEGIN(cellStreams);
    }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 437 "gambitToFoam.L"
{
        BEGIN(readCellStreamNElements);
    }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 442 "gambitToFoam.L"
{

        IStringStream nElementsStream(YYText());

        readLabel(nElementsStream);

        BEGIN(cellStreams);
    }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 451 "gambitToFoam.L"
{
        BEGIN(readCellStreamMaterial);
    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 456 "gambitToFoam.L"
{

        IStringStream materialIDstream(YYText());

        readLabel(materialIDstream);

        BEGIN(cellStreams);
    }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 466 "gambitToFoam.L"
{
        BEGIN(readCellStreamNFlags);
    }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 471 "gambitToFoam.L"
{

        IStringStream nFlagsStream(YYText());

        readLabel(nFlagsStream);

        BEGIN(cellStreamTitle);
    }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 481 "gambitToFoam.L"
{

        word streamName(tnbLib::string::validate<word>(YYText()));

        BEGIN(cellStreamFlags);
    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 489 "gambitToFoam.L"
{
        Info<< "Reading cell stream labels" << endl;
        BEGIN(cellStreamLabels);
    }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 495 "gambitToFoam.L"
{

        IStringStream nFlagsStream(YYText());

        label cellLabel;
        while (nFlagsStream.read(cellLabel))
        {
            cellStreamIDs[cellLabel - 1] = curGroupID;
        }

        // reset current group ID and a number of flags
        curGroupID = 0;
    }
	YY_BREAK
/*            ------  Reading end of section and others ------               */
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 512 "gambitToFoam.L"
{

        Info<< "Finished reading cell stream labels" << endl;

        // reset current group ID and a number of flags
        curGroupID = 0;

        BEGIN(INITIAL);
    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 523 "gambitToFoam.L"
{
        curPatchFace = 0;
        Info<< "Reading patches" << endl;
        BEGIN(boundaryPatchParams);
    }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 530 "gambitToFoam.L"
{

        IStringStream patchParamsStream(YYText());

        patchParamsStream.read(patchNames[curBoundaryPatch]);

        readLabel(patchParamsStream);
        label nEntry(readLabel(patchParamsStream));
        nValuesForPatchFaces = readLabel(patchParamsStream);

        patchCells[curBoundaryPatch].setSize(nEntry);
        patchCellFaces[curBoundaryPatch].setSize(nEntry);

        Info<< "patch " << curBoundaryPatch
            << ": name: " << patchNames[curBoundaryPatch]
            << endl;

        BEGIN(boundaryPatchFaces);
    }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 551 "gambitToFoam.L"
{

        // Face-based boundary condition
        IStringStream patchFacesStream(YYText());

        patchCells[curBoundaryPatch][curPatchFace] =
            readLabel(patchFacesStream);
        readLabel(patchFacesStream);
        patchCellFaces[curBoundaryPatch][curPatchFace] =
            readLabel(patchFacesStream);

        // patch face values currently discarded
        if (nValuesForPatchFaces > 0)
        {
            scalarList patchFaceValues(nValuesForPatchFaces);

            forAll(patchFaceValues, fI)
            {
                patchFaceValues[fI] = readScalar(patchFacesStream);
            }
        }

        curPatchFace++;
    }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 577 "gambitToFoam.L"
{

        // Vertex-based boundary condition
        FatalErrorInFunction
            << "<boundaryPatchFaces>{spaceNl}{label}{scalarList} : "
            << "boundary condition specified on vertices not supported"
            << abort(FatalError);
    }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 587 "gambitToFoam.L"
{

        curBoundaryPatch++;

        BEGIN(INITIAL);
    }
	YY_BREAK
/*             ------ Reading end of section and others ------               */
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 597 "gambitToFoam.L"
{
        BEGIN(INITIAL);
    }
	YY_BREAK
/* ------ Ignore remaining space and \n s.  Any other characters are errors. */
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 604 "gambitToFoam.L"
{}
	YY_BREAK
/*  ------ On EOF return to previous file, if none exists terminate. ------  */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(controlInfo):
case YY_STATE_EOF(readControlHeader):
case YY_STATE_EOF(readTitle):
case YY_STATE_EOF(readProgramID):
case YY_STATE_EOF(readVersionID):
case YY_STATE_EOF(applicationData):
case YY_STATE_EOF(nodalCoords):
case YY_STATE_EOF(cellsAndElements):
case YY_STATE_EOF(cellStreams):
case YY_STATE_EOF(cellStreamTitle):
case YY_STATE_EOF(cellStreamFlags):
case YY_STATE_EOF(cellStreamLabels):
case YY_STATE_EOF(readCellStreamGroupID):
case YY_STATE_EOF(readCellStreamNElements):
case YY_STATE_EOF(readCellStreamMaterial):
case YY_STATE_EOF(readCellStreamNFlags):
case YY_STATE_EOF(boundaryPatch):
case YY_STATE_EOF(boundaryPatchParams):
case YY_STATE_EOF(boundaryPatchFaces):
case YY_STATE_EOF(faceConnectivity):
case YY_STATE_EOF(globalMeshData):
case YY_STATE_EOF(cellContLine):
#line 609 "gambitToFoam.L"
{
            yyterminate();
    }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 612 "gambitToFoam.L"
ECHO;
	YY_BREAK
#line 1943 "gambitToFoam.cxx"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 765 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 765 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 764);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 612 "gambitToFoam.L"



#include <fileName.hxx>
#include <fstream>
using std::ifstream;

int main(int argc, char *argv[])
{
    argList::noParallel();
    argList::validArgs.append("GAMBIT file");
    argList::addOption
    (
        "scale",
        "factor",
        "geometry scaling factor - default is 1"
    );

    argList args(argc, argv);

    if (!args.check())
    {
         FatalError.exit();
    }

    const scalar scaleFactor = args.optionLookupOrDefault("scale", 1.0);

    #include <createTime.lxx>

    const fileName gambitFile = args[1];
    ifstream gambitStream(gambitFile.c_str());

    if (!gambitStream)
    {
        FatalErrorInFunction
            << args.executable()
            << ": file " << gambitFile << " not found"
            << abort(FatalError);
    }

    yyFlexLexer lexer(&gambitStream);
    while (lexer.yylex() != 0)
    {}

    Info<< "Finished lexing" << endl;

    // make a point mapping array
    label maxPointIndex = 0;

    forAll(pointMap, pointi)
    {
        if (pointMap[pointi] > maxPointIndex)
        {
            maxPointIndex = pointMap[pointi];
        }
    }


    labelList pointLookup(maxPointIndex + 1, -1);

    forAll(pointMap, pointi)
    {
        pointLookup[pointMap[pointi] ] = pointi;
    }

    // make a cell mapping array
    label maxCellIndex = 0;

    forAll(cellMap, celli)
    {
        if (cellMap[celli] > maxCellIndex)
        {
            maxCellIndex = cellMap[celli];
        }
    }

    labelList cellLookup(maxCellIndex + 1);

    forAll(cellMap, celli)
    {
        cellLookup[cellMap[celli] ] = celli;
    }

    const cellModel& hex = *(cellModeller::lookup("hex"));
    const cellModel& prism = *(cellModeller::lookup("prism"));
    const cellModel& pyr = *(cellModeller::lookup("pyr"));
    const cellModel& tet = *(cellModeller::lookup("tet"));

    labelList labelsHex(8);
    labelList labelsPrism(6);
    labelList labelsPyramid(5);
    labelList labelsTet(4);

    cellShapeList cells(cellLabels.size());

    forAll(cellTypes, celli)
    {
        const labelList& curCellLabels = cellLabels[celli];

        // Tetrahedron
        if (cellTypes[celli] == 6)
        {
            labelsTet[0] = pointLookup[curCellLabels[0] ];
            labelsTet[1] = pointLookup[curCellLabels[2] ];
            labelsTet[2] = pointLookup[curCellLabels[3] ];
            labelsTet[3] = pointLookup[curCellLabels[1] ];

            cells[celli] = cellShape(tet, labelsTet);
        }

        // Square-based pyramid
        else if (cellTypes[celli] == 7)
        {
            labelsPyramid[0] = pointLookup[curCellLabels[0] ];
            labelsPyramid[1] = pointLookup[curCellLabels[1] ];
            labelsPyramid[2] = pointLookup[curCellLabels[3] ];
            labelsPyramid[3] = pointLookup[curCellLabels[2] ];
            labelsPyramid[4] = pointLookup[curCellLabels[4] ];

            cells[celli] = cellShape(pyr, labelsPyramid);
        }

        // Triangular prism
        else if (cellTypes[celli] == 5)
        {
            labelsPrism[0] = pointLookup[curCellLabels[0] ];
            labelsPrism[1] = pointLookup[curCellLabels[1] ];
            labelsPrism[2] = pointLookup[curCellLabels[2] ];
            labelsPrism[3] = pointLookup[curCellLabels[3] ];
            labelsPrism[4] = pointLookup[curCellLabels[4] ];
            labelsPrism[5] = pointLookup[curCellLabels[5] ];

            cells[celli] = cellShape(prism, labelsPrism);
        }

        // Hex
        else if (cellTypes[celli] == 4)
        {
            labelsHex[0] = pointLookup[curCellLabels[0] ];
            labelsHex[1] = pointLookup[curCellLabels[1] ];
            labelsHex[2] = pointLookup[curCellLabels[3] ];
            labelsHex[3] = pointLookup[curCellLabels[2] ];
            labelsHex[4] = pointLookup[curCellLabels[4] ];
            labelsHex[5] = pointLookup[curCellLabels[5] ];
            labelsHex[6] = pointLookup[curCellLabels[7] ];
            labelsHex[7] = pointLookup[curCellLabels[6] ];

            cells[celli] = cellShape(hex, labelsHex);
        }
    }

    // give foam model face number given a fluent model face number
    label faceIndex[8][6] =
    {
        {-1, -1, -1, -1, -1, -1},  // 0
        {-1, -1, -1, -1, -1, -1},  // 1
        {-1, -1, -1, -1, -1, -1},  // 2
        { 2,  1,  3,  0,  4,  5},  // Hex (3)
        {-1, -1, -1, -1, -1, -1},  // 4
        { 4,  3,  2,  0,  1, -1},  // Triangular prism (5)
        { 0,  4,  3,  2,  1, -1},  // Pyramid (6)
        { 2,  1,  0,  3, -1, -1}   // Tet (7)
    };

    faceListList boundary(patchCells.size());

    forAll(patchCells, patchi)
    {
        labelList& curCells = patchCells[patchi];
        labelList& curFaces = patchCellFaces[patchi];

        faceList& patchFaces = boundary[patchi];
        patchFaces.setSize(curCells.size());

        forAll(curCells, facei)
        {
            patchFaces[facei] =
                cells[cellLookup[curCells[facei] ] ].faces()
                [
                    faceIndex
                    [
                        // this picks a cell type
                        cells[cellLookup[curCells[facei] ] ]
                            .model().index()
                    ]
                    [curFaces[facei] - 1] // this gives a fluent face - 1
                ];

        }
    }

    Info<< "gambitToFoam: " << endl
        << "Gambit file format does not provide information about the type of "
        << "the patch (eg. wall, symmetry plane, cyclic etc)." << endl
        << "All the patches have been created "
        << "as type patch. Please reset after mesh conversion as necessary."
        << endl;

    // Scale points
    points *= scaleFactor;

    PtrList<dictionary> patchDicts(boundary.size());
    word defaultFacesName = "defaultFaces";
    word defaultFacesType = emptyPolyPatch::typeName;

    preservePatchTypes
    (
        runTime,
        runTime.constant(),
        polyMesh::meshSubDir,
        patchNames,
        patchDicts,
        defaultFacesName,
        defaultFacesType
    );

    // Add information to dictionary
    forAll(patchNames, patchi)
    {
        if (!patchDicts.set(patchi))
        {
            patchDicts.set(patchi, new dictionary());
        }
        // Add but not overwrite
        patchDicts[patchi].add("type", polyPatch::typeName, false);
    }

    polyMesh pShapeMesh
    (
        IOobject
        (
            polyMesh::defaultRegion,
            runTime.constant(),
            runTime
        ),
        move(points),
        cells,
        boundary,
        patchNames,
        patchDicts,
        defaultFacesName,
        defaultFacesType
    );

    // Set the precision of the points data to 10
    IOstream::defaultPrecision(max(10u, IOstream::defaultPrecision()));

    Info<< "Writing polyMesh" << endl;
    pShapeMesh.write();

    Info<< "\nEnd\n" << endl;
    return 0;
}


 /* ------------------------------------------------------------------------- *\
    ------ End of gambitToFoam.L
 \* ------------------------------------------------------------------------- */

