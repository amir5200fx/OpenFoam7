#include <laminarTemplate.hxx>

#include <fvmSup.hxx>
#include <localEulerDdtScheme.hxx>

// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

template<class ReactionThermo>
tnbLib::combustionModels::laminar<ReactionThermo>::laminar
(
	const word& modelType,
	ReactionThermo& thermo,
	const compressibleTurbulenceModel& turb,
	const word& combustionProperties
)
	:
	ChemistryCombustion<ReactionThermo>
	(
		modelType,
		thermo,
		turb,
		combustionProperties
		),
	integrateReactionRate_
	(
		this->coeffs().lookupOrDefault("integrateReactionRate", true)
	)
{
	if (integrateReactionRate_)
	{
		Info << "    using integrated reaction rate" << endl;
	}
	else
	{
		Info << "    using instantaneous reaction rate" << endl;
	}
}


// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //

template<class ReactionThermo>
tnbLib::combustionModels::laminar<ReactionThermo>::~laminar()
{}


// * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * * //

template<class ReactionThermo>
tnbLib::tmp<tnbLib::volScalarField>
tnbLib::combustionModels::laminar<ReactionThermo>::tc() const
{
	return this->chemistryPtr_->tc();
}


template<class ReactionThermo>
void tnbLib::combustionModels::laminar<ReactionThermo>::correct()
{
	if (integrateReactionRate_)
	{
		if (fv::localEulerDdt::enabled(this->mesh()))
		{
			const scalarField& rDeltaT =
				fv::localEulerDdt::localRDeltaT(this->mesh());

			if (this->coeffs().found("maxIntegrationTime"))
			{
				const scalar maxIntegrationTime
				(
					readScalar(this->coeffs().lookup("maxIntegrationTime"))
				);

				this->chemistryPtr_->solve
				(
					min(1.0 / rDeltaT, maxIntegrationTime)()
				);
			}
			else
			{
				this->chemistryPtr_->solve((1.0 / rDeltaT)());
			}
		}
		else
		{
			this->chemistryPtr_->solve(this->mesh().time().deltaTValue());
		}
	}
	else
	{
		this->chemistryPtr_->calculate();
	}
}


template<class ReactionThermo>
tnbLib::tmp<tnbLib::fvScalarMatrix>
tnbLib::combustionModels::laminar<ReactionThermo>::R(volScalarField& Y) const
{
	tmp<fvScalarMatrix> tSu(new fvScalarMatrix(Y, dimMass / dimTime));
	fvScalarMatrix& Su = tSu.ref();

	const label specieI = this->thermo().composition().species()[Y.member()];
	Su += this->chemistryPtr_->RR(specieI);

	return tSu;
}


template<class ReactionThermo>
tnbLib::tmp<tnbLib::volScalarField>
tnbLib::combustionModels::laminar<ReactionThermo>::Qdot() const
{
	return this->chemistryPtr_->Qdot();
}


template<class ReactionThermo>
bool tnbLib::combustionModels::laminar<ReactionThermo>::read()
{
	if (ChemistryCombustion<ReactionThermo>::read())
	{
		integrateReactionRate_ =
			this->coeffs().lookupOrDefault("integrateReactionRate", true);
		return true;
	}
	else
	{
		return false;
	}
}


// ************************************************************************* //