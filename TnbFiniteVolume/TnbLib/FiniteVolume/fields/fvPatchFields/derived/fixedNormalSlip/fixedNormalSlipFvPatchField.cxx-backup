#include <fixedNormalSlipFvPatchField.hxx>

#include <symmTensorField.hxx>
#include <transformField.hxx>  // added by amir
#include <symmTransformField.hxx> // added by amir

// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

template<class Type>
tnbLib::fixedNormalSlipFvPatchField<Type>::fixedNormalSlipFvPatchField
(
	const fvPatch& p,
	const DimensionedField<Type, volMesh>& iF
)
	:
	transformFvPatchField<Type>(p, iF),
	fixedValue_(p.size(), Zero)
{}


template<class Type>
tnbLib::fixedNormalSlipFvPatchField<Type>::fixedNormalSlipFvPatchField
(
	const fixedNormalSlipFvPatchField<Type>& ptf,
	const fvPatch& p,
	const DimensionedField<Type, volMesh>& iF,
	const fvPatchFieldMapper& mapper
)
	:
	transformFvPatchField<Type>(ptf, p, iF, mapper),
	fixedValue_(mapper(ptf.fixedValue_))
{}


template<class Type>
tnbLib::fixedNormalSlipFvPatchField<Type>::fixedNormalSlipFvPatchField
(
	const fvPatch& p,
	const DimensionedField<Type, volMesh>& iF,
	const dictionary& dict
)
	:
	transformFvPatchField<Type>(p, iF),
	fixedValue_("fixedValue", dict, p.size())
{
	evaluate();
}


template<class Type>
tnbLib::fixedNormalSlipFvPatchField<Type>::fixedNormalSlipFvPatchField
(
	const fixedNormalSlipFvPatchField<Type>& ptf
)
	:
	transformFvPatchField<Type>(ptf),
	fixedValue_(ptf.fixedValue_)
{}


template<class Type>
tnbLib::fixedNormalSlipFvPatchField<Type>::fixedNormalSlipFvPatchField
(
	const fixedNormalSlipFvPatchField<Type>& ptf,
	const DimensionedField<Type, volMesh>& iF
)
	:
	transformFvPatchField<Type>(ptf, iF),
	fixedValue_(ptf.fixedValue_)
{}


// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

template<class Type>
void tnbLib::fixedNormalSlipFvPatchField<Type>::autoMap
(
	const fvPatchFieldMapper& m
)
{
	transformFvPatchField<Type>::autoMap(m);
	m(fixedValue_, fixedValue_);
}


template<class Type>
void tnbLib::fixedNormalSlipFvPatchField<Type>::rmap
(
	const fvPatchField<Type>& ptf,
	const labelList& addr
)
{
	transformFvPatchField<Type>::rmap(ptf, addr);

	const fixedNormalSlipFvPatchField<Type>& dmptf =
		refCast<const fixedNormalSlipFvPatchField<Type>>(ptf);

	fixedValue_.rmap(dmptf.fixedValue_, addr);
}


template<class Type>
tnbLib::tmp<tnbLib::Field<Type>>
tnbLib::fixedNormalSlipFvPatchField<Type>::snGrad() const
{
	const vectorField nHat(this->patch().nf());
	const Field<Type> pif(this->patchInternalField());

	return
		(
		(nHat*(nHat & fixedValue_) + transform(I - sqr(nHat), pif)) - pif
			)*this->patch().deltaCoeffs();
}


template<class Type>
void tnbLib::fixedNormalSlipFvPatchField<Type>::evaluate
(
	const Pstream::commsTypes
)
{
	if (!this->updated())
	{
		this->updateCoeffs();
	}

	const vectorField nHat(this->patch().nf());

	Field<Type>::operator=
		(
			nHat*(nHat & fixedValue_)
			+ transform(I - sqr(nHat), this->patchInternalField())
			);

	transformFvPatchField<Type>::evaluate();
}


template<class Type>
tnbLib::tmp<tnbLib::Field<Type>>
tnbLib::fixedNormalSlipFvPatchField<Type>::snGradTransformDiag() const
{
	const vectorField nHat(this->patch().nf());
	vectorField diag(nHat.size());

	diag.replace(vector::X, mag(nHat.component(vector::X)));
	diag.replace(vector::Y, mag(nHat.component(vector::Y)));
	diag.replace(vector::Z, mag(nHat.component(vector::Z)));

	return transformFieldMask<Type>(pow<vector, pTraits<Type>::rank>(diag));
}


template<class Type>
void tnbLib::fixedNormalSlipFvPatchField<Type>::write(Ostream& os) const
{
	transformFvPatchField<Type>::write(os);
	writeEntry(os, "fixedValue", fixedValue_);
}


// ************************************************************************* //