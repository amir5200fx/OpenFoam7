#line 1 "chemkinLexer.cxx"

#line 3 "chemkinLexer.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer yy_create_buffer

    #define yy_delete_buffer yy_delete_buffer

    #define yy_scan_buffer yy_scan_buffer

    #define yy_scan_string yy_scan_string

    #define yy_scan_bytes yy_scan_bytes

    #define yy_init_buffer yy_init_buffer

    #define yy_flush_buffer yy_flush_buffer

    #define yy_load_buffer_state yy_load_buffer_state

    #define yy_switch_to_buffer yy_switch_to_buffer

    #define yypush_buffer_state yypush_buffer_state

    #define yypop_buffer_state yypop_buffer_state

    #define yyensure_buffer_stack yyensure_buffer_stack

    #define yylex yylex

    #define yyrestart yyrestart

    #define yylex_init yylex_init

    #define yylex_init_extra yylex_init_extra

    #define yylex_destroy yylex_destroy

    #define yyget_debug yyget_debug

    #define yyset_debug yyset_debug

    #define yyget_extra yyget_extra

    #define yyset_extra yyset_extra

    #define yyget_in yyget_in

    #define yyset_in yyset_in

    #define yyget_out yyget_out

    #define yyset_out yyset_out

    #define yyget_leng yyget_leng

    #define yyget_text yyget_text

    #define yyget_lineno yyget_lineno

    #define yyset_lineno yyset_lineno

    #define yywrap yywrap

    #define yyalloc yyalloc

    #define yyrealloc yyrealloc

    #define yyfree yyfree

    #define yytext yytext

    #define yyleng yyleng

    #define yyin yyin

    #define yyout yyout

    #define yy_flex_debug yy_flex_debug

    #define yylineno yylineno

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[2009] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   59,   59,
       61,   58,   58,   57,    1,   58,   58,   58,   58,   58,
        4,    3,    3,    3,   58,   58,   58,   58,   58,    8,
        8,   58,   58,    1,   58,   58,    1,   58,   58,   58,
       58,    1,   58,   58,    1,   58,   15,   58,   58,    1,

       58,   58,    1,   58,   58,   58,    1,   58,   58,   58,
        1,   58,   58,   58,    1,   58,   58,   32,   58,   58,
       58,   58,   58,   58,   58,   58,   33,   34,   36,   58,
       40,   58,   37,   58,   58,   58,   58,   39,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   46,   45,   58,
       47,   58,   48,   58,   58,   58,   58,   58,   56,   58,
       58,   58,   58,   58,   58,   58,    1,    0,    1,    0,
        0,    0,    0,    1,    0,    0,    0,    0,    0,    4,
        3,    3,    3,    4,    3,    3,    3,    3,    0,    0,
        0,    0,    0,    0,    0,    0,    5,    0,    0,    8,

        8,    8,    0,    8,    8,    0,    0,    1,    1,    0,
        0,    1,    0,    0,    1,    0,    0,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    0,    1,    1,
        0,    0,    1,    1,   18,    0,    0,    1,    1,    0,
        0,    0,    1,    1,    0,    0,    0,    1,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   33,   34,   33,   33,   33,
       33,    0,   34,    0,   34,   35,    0,    0,   37,    0,
        0,    0,    0,   39,    0,   43,   37,    0,    0,    0,
        0,    0,    0,   39,   38,    0,    0,    0,    0,   44,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   42,
        0,    0,    0,    0,   46,   45,   45,   45,   46,   45,
       45,    0,    0,   47,   47,    0,   47,    0,   48,   48,
        0,   48,    0,    0,    0,    0,    0,    0,    0,    0,
       49,    0,    0,   56,    0,    0,    0,    0,    0,   56,
        0,    0,    0,    0,    0,    0,    0,   59,   59,    1,
        1,    0,    0,    0,    0,    6,    0,    5,    0,    0,
        8,    0,    0,    1,    1,    0,    0,    1,    0,    0,
        1,    0,    0,   25,    0,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,

        1,   18,    0,    0,    1,    1,    0,    0,    0,    1,
        1,    0,    0,    0,    1,    1,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   33,   35,   43,    0,    0,
        0,    0,    0,    0,   39,   38,   44,   44,    0,   42,
        0,    0,    0,    0,   45,    0,   49,    0,    0,   50,
        0,    0,    0,    0,    0,    0,    2,   26,    7,    0,
        6,    0,    0,    8,    0,    0,    1,    1,    0,    0,
        1,    0,    0,    1,    0,    0,   25,    0,   25,   26,
        0,    0,    1,    1,    0,    0,    1,    1,    0,    0,
        1,    1,    0,    0,    1,    1,    0,    0,    1,    1,

        0,    0,    0,    1,    1,    0,    0,    0,    1,    1,
        0,    0,    0,    0,    0,    0,    0,    0,   33,    0,
        0,    0,    0,    0,    0,    0,   44,    0,    0,    0,
       45,    0,    0,   50,    0,   52,   51,   54,   53,    0,
        2,    0,   26,    0,    7,    0,    0,    8,    0,    0,
        1,    1,    0,    0,    1,    0,    0,    1,    0,    0,
       25,    0,   25,   26,   26,    0,    0,    0,    1,    1,
        0,    0,    1,    1,    0,    0,    1,    1,   17,   17,
        1,    1,    0,    0,    1,    1,   20,    0,    0,    1,
        1,   22,    0,    0,    1,    1,   24,    0,    0,    0,

        0,    0,    0,   31,    0,    0,    0,   41,    0,    0,
        0,   52,   51,   54,    0,   53,    0,   55,    0,    0,
        7,    9,    8,    0,    0,    1,    1,    0,    0,    1,
        0,    0,    1,    0,    0,   25,    0,   25,   26,   26,
        0,    0,   13,   13,    1,    1,    0,    0,    1,    1,
        0,    0,    1,    1,    0,    0,    1,    1,   20,    0,
        0,    1,    1,   22,    0,    0,    1,    1,   24,    0,
        0,    0,    0,    0,   31,    0,    0,   41,   41,   41,
       41,    0,   54,    0,   55,    0,    0,    7,    9,    8,
        0,    0,    1,    1,    0,    0,    1,    0,    0,    1,

        0,    0,   25,    0,   25,   26,   26,    0,    0,    0,
        0,    0,    1,    1,    0,    0,    1,    1,    0,    0,
        1,    1,    0,    0,    1,    1,    0,    0,    1,    1,
        0,    0,    0,   30,    0,    0,    0,   41,    0,    2,
        0,    0,    0,    0,    1,    1,    0,    0,    1,    0,
        0,    1,    0,    0,   25,    0,   25,   26,   26,    0,
        0,    0,    0,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,   27,    0,    0,   30,    0,    0,   41,
        0,   26,    0,    0,    0,    1,    1,    0,    0,    1,

        0,    0,    1,    0,    0,   25,    0,   25,   26,   26,
        0,    0,    0,    0,   26,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,   27,    0,   28,   10,    0,
        0,    1,    1,    0,    0,    1,    0,    0,    1,    0,
        0,   25,    0,   25,   26,   26,    0,    0,    0,    0,
       26,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,   28,   10,    0,    0,    1,    1,    0,    0,
        1,    0,    0,    1,    0,    0,   25,    0,   25,   26,

       26,    0,    0,    0,    0,   26,    0,    0,    1,    1,
        0,    0,    1,    1,    0,    0,    1,    1,    0,    0,
        1,    1,    0,    0,    1,    1,   29,    0,    0,    1,
        1,    0,    0,    1,    0,    0,    1,    0,    0,   25,
        0,   25,   26,   26,    0,    0,    0,    0,   26,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,   29,
        0,    0,    1,    1,    0,    0,    1,    0,    0,    1,
        0,    0,   25,    0,   25,   26,   26,    0,    0,    0,
        0,   26,    0,    0,    1,    1,    0,    0,    1,    1,

        0,    0,    1,    1,    0,    0,    1,    1,    0,    0,
        1,    1,    0,    0,    1,    1,    0,    0,    1,    0,
        0,    1,    0,    0,   25,    0,   25,   26,   26,    0,
        0,    0,    0,   26,    0,    0,    1,    1,    0,    0,
        1,    1,    0,    0,    1,    1,    0,    0,    1,    1,
        0,    0,    1,    1,    0,    0,    1,    1,    0,    0,
        1,    0,    0,    1,    0,    0,   25,    0,   25,   26,
       26,    0,    0,    0,    0,   26,    0,    0,    1,    1,
        0,    0,    1,    1,    0,    0,    1,    1,    0,    0,
        1,    1,    0,    0,    1,    1,    0,    0,    1,    1,

        0,    0,    1,    0,    0,    1,    0,    0,   25,    0,
       25,   26,   26,    0,    0,    0,    0,   26,    0,    0,
        1,    1,    0,    0,    1,    1,    0,    0,    1,    1,
        0,    0,    1,    1,    0,    0,    1,    1,    0,    0,
        1,    1,    0,    0,    1,    0,    0,    1,    0,    0,
       25,    0,   25,   26,   26,    0,    0,    0,    0,   26,
        0,    0,    1,    1,    0,    0,    1,    1,    0,    0,
        1,    1,    0,    0,    1,    1,    0,    0,    1,    1,
        0,    0,    1,    1,   12,   12,    1,   12,   12,    1,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,    0,    0,    1,    1,    0,    0,    1,    1,
        0,    0,    1,    1,    0,    0,    1,    1,    0,    0,
        1,    1,    0,    0,    1,    1,    0,    0,    0,   25,
       25,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,   14,   14,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,

        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,

        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,   16,
       16,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,   11,   11,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,

        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,

        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,

        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,

        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,

        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,    0,    0,    1,    1,    0,
        0,    1,    1,    0,    0,    1,    1,    0,    0,    1,
        1,    0,    0,    1,    1,   19,   19,    1,    1,   21,

       21,    1,    1,   23,   23,    1,    1,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    1,    1,    1,    6,    1,    7,
        8,    9,   10,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   14,   14,   14,   14,   14,    1,    1,   19,
       20,   21,    1,    1,   22,   23,   24,   25,   26,   23,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       23,   37,   38,   39,   40,   41,   23,   23,   23,   23,
        1,    1,    1,    1,    1,    1,   42,   42,   42,   43,

       43,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[44] =
    {   0,
        1,    2,    3,    2,    4,    1,    5,    5,    5,    6,
        7,    8,    9,   10,   10,   10,   10,   10,    1,    1,
        1,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   12
    } ;

static const flex_int16_t yy_base[2735] =
    {   0,
        0,   38,   77,    0,  119,    0,  137,    0,    4,    8,
       18,   25,   12,   29,   43,   54,  179,  216,   63,   67,
      123,  183,  187,  191,  195,  205,  210,  220,  224,  228,
      232,  242,  247,  253,  257,  261,  265,    0,  298,    0,
      269,  273,  340,    0,  360,    0,  402,    0,  419,    0,
      437,    0,  480,    0,  522,    0,  539,    0,  282,  405,
     2310,12019,  571,12019,    0, 2267, 2269, 2252, 2256,  542,
       48,   59,  523,  526,  609,  410,  567,  626,  200,  286,
      546,    0,  554,    0,    0,  562,    0, 2249, 2242,    0,
      585,    0,    0,  589,    0,  596,12019,    0,  600,    0,

        0,  613,    0,  630,    0,  644,    0,  651,    0,  655,
        0,  659,    0,  663,    0,  668,  672,12019, 2234, 2202,
     2194,  256, 2193,  704,  666,  671,  721,  547,12019,  763,
    12019,  627,  341,  712,  676,  782, 2205,  575,  695,  741,
      824,  738,  743,  841,  883,  773,  787,  290,  900,  708,
      807,  767,  808,  942,  804,  832,  959, 1001,  527, 2202,
     2173, 2178,  807, 2173,    0,  858,    0, 1033,    0, 2167,
     2161, 2147, 2141,    0, 2136, 2131, 2123, 2119,  929,  730,
      738,  869,  791,  828,  866,  870,  888,  879, 1071,  923,
      861, 1088, 1130, 1172,  878,    0,  904,    8,  925,  917,

      976,  905, 1215,  984,  985,    0,  918,    0,    0,    0,
      964,    0, 2107, 2112,    0, 2102, 2101,    0,  946,    0,
        0,    0,  977,    0,    0,  991,    0,  995,    0,    0,
        0, 1005,    0,    0, 1011,    0, 1014,    0,    0, 1018,
        0, 1024,    0,    0, 1037,    0, 1041,    0,    0, 1045,
     1235, 2095, 2073, 2075, 1027, 2067, 2064, 2056, 2048, 2062,
     2035, 2034, 1267, 1040, 1046, 1284, 1105, 1326, 1368, 1063,
        0,   14, 1064, 1411, 1113, 1076, 1431, 1089, 1117, 1121,
     1080, 1450, 2035, 1106, 1120, 1121, 1147, 1492, 1534, 1576,
        0,   25, 2022, 1148, 1155, 1156, 1160, 1161, 1594, 1173,

     1192, 1614, 1189, 1194, 1631, 1673, 1715, 1180,    0, 1168,
       43, 1757, 1229, 1215, 1215, 1774, 1816, 1858, 1220, 1246,
        0,   63, 1247, 1251, 1252, 1901, 1260, 1271, 1285, 1289,
     1922, 1301, 1942, 1299, 1304, 1959, 2001, 2043, 1293,    0,
     1321,  231, 2085, 1322, 2020, 1998, 2000, 1305, 1994, 1330,
     1996, 1990, 1972, 1979, 1968, 1959, 1958,    0, 1343,    0,
        0, 1950, 1946, 1945, 1918, 1335,  338, 1351, 1342, 1360,
     1359,    0, 1363,    0,    0,    0, 1372,    0, 1911, 1907,
        0, 1905, 1890, 1376, 1885,    0, 1385,    0,    0,    0,
     1395,    0,    0,    0, 1399,    0,    0,    0, 1403,    0,

        0, 1377,    0, 1416,    0,    0, 1420,    0, 1424,    0,
        0, 1435,    0, 1451,    0,    0, 1455, 1887, 1850, 1849,
     1839, 1829, 1839,  596, 1455, 1411, 1459, 1475,  752, 1466,
     1471, 2117, 1483, 1488, 1501, 1509, 1510, 1517,  813, 1518,
     1512, 1529,  841, 1529, 1530,  854, 1535, 1539, 1559, 1560,
     1826, 1825, 1815, 1803, 1800, 1813, 1563, 1564, 1567, 1782,
     1571, 1567, 1607, 1572,    0, 1632,    0,    0,    0, 1636,
        0, 1772, 1754,    0, 1735, 1735, 1606, 1715, 1619, 1656,
        0, 1648,    0,    0,    0, 1659,    0,    0,    0, 1663,
        0,    0,    0, 1667,    0,    0,    0, 1674,    0,    0,

     1678,    0, 1698,    0,    0, 1703,    0, 1707,    0,    0,
     1719, 1705, 1696, 1700, 1709, 1689,  554, 1728, 1702, 1733,
     1711, 2159, 2201, 2243,    0,  900, 1723, 1738, 1780, 1780,
     1732, 1787, 1806, 1761, 1675, 1762, 1775, 1783, 1779,  598,
     1805, 1676, 1809, 1672, 1812, 1671, 1661, 1819,    0, 1820,
        0,    0,    0, 1841,    0, 1659, 1666,    0, 1659, 1659,
     1825, 1646, 1833, 1846, 1834, 1637,    0, 1847,    0,    0,
        0, 1851,    0,    0,    0, 1859,    0,    0,12019, 1864,
        0,    0,    0, 1875,    0,    0, 1884,    0, 1885,    0,
        0, 1889,    0, 1890,    0,    0, 1894, 1624, 1617, 1616,

     1618, 1608, 1599, 1895, 1130, 1950, 1901, 2260, 1922, 1901,
     1589, 1906, 1922, 1927, 1588, 1946, 1577, 1947, 1573, 1567,
     1984, 1976, 1985,    0, 1977,    0,    0,    0, 1994,    0,
     1567, 1572,    0, 1545, 1536, 1989, 1517, 1993, 2002, 2005,
     1511, 1489,12019, 2006,    0,    0,    0, 2019,    0,    0,
        0, 2028,    0,    0,    0, 2032,    0,    0, 2036,    0,
     2044,    0,    0, 2048,    0, 2049,    0,    0, 2060, 1491,
     1503, 1480, 1464, 1463, 2061, 2056, 2073, 2302, 2344, 2074,
        0, 1143, 2077, 1459, 2078, 1436, 1424, 2081, 2090, 2091,
        0, 2095,    0,    0,    0, 2099,    0, 1410, 1408,    0,

     1402, 1397, 2103, 1386, 2104, 2118, 2122, 1377, 1367, 1361,
        0, 2135,    0,    0,    0, 2142,    0,    0,    0, 2146,
        0,    0,    0, 2150,    0,    0,    0, 2154,    0,    0,
     1366, 1358, 1356, 2126, 1349, 1168, 2150, 2168, 1345, 2176,
     1316, 1318,    0, 2177,    0,    0,    0, 2184,    0, 1315,
     1320,    0, 1311, 1311, 2188, 1288, 2189, 2192, 2193, 1278,
     1269, 1260, 1252,    0, 2196,    0,    0,    0, 2202,    0,
        0,    0, 2207,    0,    0,    0, 2218,    0,    0,    0,
     2228,    0,    0, 2232, 1245, 1248, 2233, 1232, 2224, 2244,
     1225, 2247, 1228,    0, 2261,    0,    0,    0, 2265,    0,

     1223, 1216,    0, 1213, 1204, 2248, 1199, 2269, 2285, 2277,
     1185, 1178, 1168, 1157, 2278,    0, 2288,    0,    0,    0,
     2292,    0,    0,    0, 2296,    0,    0,    0, 2303,    0,
        0,    0, 2307,    0,    0, 2311, 1160, 2319, 2327,    0,
     2328,    0,    0,    0, 2337,    0, 1157, 1157,    0, 1146,
     1144, 2332, 1104, 2333, 2336, 2345, 1087, 1076, 1050, 1041,
     2348,    0, 2349,    0,    0,    0, 2362,    0,    0,    0,
     2374,    0,    0,    0, 2378,    0,    0,    0, 2384,    0,
        0, 1048, 2353, 2369,    0, 2388,    0,    0,    0, 2392,
        0, 1035, 1022,    0, 1019, 1018, 2396, 1012, 2397, 2400,

     2401, 1004,  995,  990,  983, 2404,    0, 2405,    0,    0,
        0, 2409,    0,    0,    0, 2415,    0,    0,    0, 2419,
        0,    0,    0, 2423,    0,    0, 2428,    0, 2429,    0,
        0,    0, 2433,    0,  983,  986,    0,  983,  976, 2438,
      970, 2439, 2442, 2443,  941,  930,  928,  911, 2446,    0,
     2447,    0,    0,    0, 2451,    0,    0,    0, 2456,    0,
        0,    0, 2460,    0,    0,    0, 2464,    0,    0, 2469,
        0, 2470,    0,    0,    0, 2474,    0,  911,  910,    0,
      907,  906, 2478,  865, 2481, 2482, 2485,  857,  834,  827,
      806, 2486,    0, 2489,    0,    0,    0, 2493,    0,    0,

        0, 2497,    0,    0,    0, 2501,    0,    0,    0, 2505,
        0,    0,    0, 2510,    0,    0,    0, 2514,    0,  783,
      787,    0,  781,  770, 2518,  752, 2521, 2522, 2525,  737,
      716,  710,  703, 2526,    0, 2529,    0,    0,    0, 2533,
        0,    0,    0, 2537,    0,    0,    0, 2541,    0,    0,
        0, 2545,    0,    0,    0, 2550,    0,    0,    0, 2554,
        0,  697,  691,    0,  686,  685, 2558,  680, 2561, 2562,
     2565,  672,  660,  645,  637, 2566,    0, 2569,    0,    0,
        0, 2573,    0,    0,    0, 2577,    0,    0,    0, 2581,
        0,    0,    0, 2585,    0,    0,    0, 2590,    0,    0,

        0, 2594,    0,  637,  640,    0,  637,  636, 2598,  630,
     2601, 2602, 2605,  621,  612,  599,  578, 2606,    0, 2609,
        0,    0,    0, 2613,    0,    0,    0, 2617,    0,    0,
        0, 2621,    0,    0,    0, 2625,    0,    0,    0, 2630,
        0,    0,    0, 2634,    0,  578,  577,    0,  570,  564,
     2638,  547, 2641, 2642, 2645,  532,  510,  501,  377, 2646,
        0, 2649,    0,    0,    0, 2653,    0,    0,    0, 2657,
        0,    0,    0, 2661,    0,    0,    0, 2665,    0,    0,
        0, 2670,    0,    0,12019, 2674,    0,  377,  379,    0,
      272,  259, 2678,  229, 2681, 2682, 2685,  209,  181,  167,

       94, 2686,    0, 2689,    0,    0,    0, 2693,    0,    0,
        0, 2697,    0,    0,    0, 2701,    0,    0,    0, 2705,
        0,    0,    0, 2710,    0,    0, 2714,   26,   24, 2718,
     2721,    0, 2722,    0,    0,    0, 2726,    0,    0,    0,
     2730,    0,    0,    0, 2734,    0,    0,    0, 2739,    0,
        0,    0, 2743,    0,    0,12019, 2748,    0,    0,    0,
     2752,    0,    0,    0, 2756,    0,    0,    0, 2760,    0,
        0,    0, 2764,    0,    0,    0, 2768,    0,    0,    0,
     2772,    0,    0,    0, 2776,    0,    0,    0, 2780,    0,
        0,    0, 2784,    0,    0,    0, 2788,    0,    0,    0,

     2792,    0,    0,    0, 2796,    0,    0,    0, 2800,    0,
        0,    0, 2804,    0,    0,    0, 2808,    0,    0,    0,
     2812,    0,    0,    0, 2816,    0,    0,    0, 2820,    0,
        0,    0, 2824,    0,    0,    0, 2828,    0,    0,    0,
     2832,    0,    0,    0, 2836,    0,    0,    0, 2840,    0,
        0,    0, 2844,    0,    0,    0, 2848,    0,    0,    0,
     2852,    0,    0,    0, 2856,    0,    0,    0, 2860,    0,
        0,    0, 2864,    0,    0,    0, 2868,    0,    0,    0,
     2872,    0,    0,    0, 2876,    0,    0,    0, 2880,    0,
        0,    0, 2884,    0,    0,    0, 2888,    0,    0,    0,

     2892,    0,    0,    0, 2896,    0,    0,    0, 2900,    0,
        0,    0, 2904,    0,    0,    0, 2908,    0,    0,12019,
     2912,    0,    0,    0, 2916,    0,    0,    0, 2920,    0,
        0,    0, 2924,    0,    0,    0, 2928,    0,    0,    0,
     2932,    0,    0,    0, 2936,    0,    0,    0, 2940,    0,
        0,12019, 2944,    0,    0,    0, 2948,    0,    0,    0,
     2952,    0,    0,    0, 2956,    0,    0,    0, 2960,    0,
        0,    0, 2964,    0,    0,    0, 2968,    0,    0,    0,
     2972,    0,    0,    0, 2976,    0,    0,    0, 2980,    0,
        0,    0, 2984,    0,    0,    0, 2988,    0,    0,    0,

     2992,    0,    0,    0, 2996,    0,    0,    0, 3000,    0,
        0,    0, 3004,    0,    0,    0, 3008,    0,    0,    0,
     3012,    0,    0,    0, 3016,    0,    0,    0, 3020,    0,
        0,    0, 3024,    0,    0,    0, 3028,    0,    0,    0,
     3032,    0,    0,    0, 3036,    0,    0,    0, 3040,    0,
        0,    0, 3044,    0,    0,    0, 3048,    0,    0,    0,
     3052,    0,    0,    0, 3056,    0,    0,    0, 3060,    0,
        0,    0, 3064,    0,    0,    0, 3068,    0,    0,    0,
     3072,    0,    0,    0, 3076,    0,    0,    0, 3080,    0,
        0,    0, 3084,    0,    0,    0, 3088,    0,    0,    0,

     3092,    0,    0,    0, 3096,    0,    0,    0, 3100,    0,
        0,    0, 3104,    0,    0,    0, 3108,    0,    0,    0,
     3112,    0,    0,    0, 3116,    0,    0,    0, 3120,    0,
        0,    0, 3124,    0,    0,    0, 3128,    0,    0,    0,
     3132,    0,    0,    0, 3136,    0,    0,    0, 3140,    0,
        0,    0, 3144,    0,    0,    0, 3148,    0,    0,    0,
     3152,    0,    0,    0, 3156,    0,    0,    0, 3160,    0,
        0,    0, 3164,    0,    0,    0, 3168,    0,    0,    0,
     3172,    0,    0,    0, 3176,    0,    0,    0, 3180,    0,
        0,    0, 3184,    0,    0,    0, 3188,    0,    0,    0,

     3192,    0,    0,    0, 3196,    0,    0,    0, 3200,    0,
        0,    0, 3204,    0,    0,    0, 3208,    0,    0,    0,
     3212,    0,    0,    0, 3216,    0,    0,    0, 3220,    0,
        0,    0, 3224,    0,    0,    0, 3228,    0,    0,    0,
     3232,    0,    0,    0, 3236,    0,    0,    0, 3240,    0,
        0,    0, 3244,    0,    0,    0, 3248,    0,    0,    0,
     3252,    0,    0,    0, 3256,    0,    0,    0, 3260,    0,
        0,    0, 3264,    0,    0,    0, 3268,    0,    0,    0,
     3272,    0,    0,    0, 3276,    0,    0,    0, 3280,    0,
        0,    0, 3284,    0,    0,    0, 3288,    0,    0,    0,

     3292,    0,    0,    0, 3296,    0,    0,    0, 3300,    0,
        0,    0, 3304,    0,    0,    0, 3308,    0,    0,    0,
     3312,    0,    0,    0, 3316,    0,    0,    0, 3320,    0,
        0,    0, 3324,    0,    0,    0, 3328,    0,    0,    0,
     3332,    0,    0,    0, 3336,    0,    0,    0, 3340,    0,
        0,    0, 3344,    0,    0,    0, 3348,    0,    0,    0,
     3352,    0,    0,    0, 3356,    0,    0,    0, 3360,    0,
        0,    0, 3364,    0,    0,    0, 3368,    0,    0,    0,
     3372,    0,    0,    0, 3376,    0,    0,    0, 3380,    0,
        0,    0, 3384,    0,    0,    0, 3388,    0,    0,    0,

     3392,    0,    0,    0, 3396,    0,    0,    0, 3400,    0,
        0,    0, 3404,    0,    0,    0, 3408,    0,    0,    0,
     3412,    0,    0,    0, 3416,    0,    0,    0, 3420,    0,
        0,    0, 3424,    0,    0,    0, 3428,    0,    0,    0,
     3432,    0,    0,    0, 3436,    0,    0,    0, 3440,    0,
        0,    0, 3444,    0,    0,    0, 3448,    0,    0,    0,
     3452,    0,    0,    0, 3456,    0,    0,    0, 3460,    0,
        0,    0, 3464,    0,    0,    0, 3468,    0,    0,    0,
     3472,    0,    0,    0, 3476,    0,    0,    0, 3480,    0,
        0,    0, 3484,    0,    0,12019, 3488,    0,    0,12019,

     3492,    0,    0,12019, 3496,    0,    0,12019, 3501, 3513,
     3525, 3537, 3549, 3561, 3573, 3585, 3597, 3609, 3621, 3633,
     3644, 3654, 3664, 3675, 3687, 3699, 3711, 3723, 3735, 3747,
     3759, 3771, 3783, 3795, 3807, 3819, 3831, 3843, 3855, 3867,
     3879, 3891, 3902, 3913, 3924, 3933, 3944, 3955, 3966, 3977,
     3988, 4000, 4012, 4024, 4035, 4045, 4051, 4060, 4071, 4083,
     4095, 4107, 4119, 4131, 4143, 4155, 4167, 4179, 4191, 4203,
     4215, 4227, 4239, 4251, 4263, 4275, 4287, 4298, 4309, 4316,
     4325, 4330, 4339, 4350, 4357, 4362, 4371, 4382, 4393, 4404,
     4411, 4421, 4433, 4440, 4449, 4458, 4470, 4482, 4494, 4506,

     4518, 4530, 4542, 4554, 4566, 4578, 4590, 4602, 4614, 4626,
     4638, 4650, 4662, 4674, 4681, 4690, 4695, 4704, 4709, 4718,
     4723, 4732, 4737, 4746, 4755, 4765, 4777, 4789, 4801, 4813,
     4825, 4837, 4849, 4861, 4873, 4885, 4897, 4909, 4921, 4933,
     4945, 4957, 4969, 4980, 4989, 4994, 5003, 5012, 5021, 5031,
     5043, 5055, 5067, 5079, 5091, 5103, 5115, 5127, 5139, 5151,
     5163, 5175, 5187, 5199, 5211, 5223, 5230, 5239, 5249, 5261,
     5273, 5285, 5297, 5309, 5321, 5333, 5345, 5357, 5369, 5381,
     5393, 5405, 5416, 5421, 5431, 5443, 5455, 5467, 5479, 5491,
     5503, 5515, 5527, 5539, 5551, 5563, 5575, 5587, 5594, 5603,

     5613, 5625, 5637, 5649, 5661, 5673, 5685, 5697, 5709, 5721,
     5733, 5745, 5757, 5769, 5780, 5790, 5802, 5814, 5826, 5838,
     5850, 5862, 5874, 5886, 5898, 5910, 5922, 5934, 5946, 5958,
     5970, 5982, 5994, 6006, 6018, 6030, 6042, 6054, 6066, 6078,
     6090, 6102, 6114, 6126, 6138, 6150, 6162, 6174, 6186, 6198,
     6210, 6222, 6234, 6246, 6258, 6270, 6282, 6294, 6306, 6318,
     6330, 6342, 6354, 6366, 6378, 6390, 6402, 6414, 6426, 6438,
     6450, 6462, 6474, 6486, 6498, 6510, 6522, 6534, 6546, 6558,
     6570, 6582, 6594, 6606, 6618, 6630, 6642, 6654, 6666, 6678,
     6690, 6702, 6714, 6726, 6738, 6750, 6762, 6774, 6786, 6798,

     6810, 6822, 6834, 6846, 6858, 6870, 6882, 6894, 6906, 6918,
     6930, 6942, 6954, 6966, 6978, 6990, 7002, 7014, 7026, 7038,
     7050, 7062, 7074, 7086, 7098, 7110, 7122, 7134, 7146, 7158,
     7170, 7182, 7194, 7206, 7218, 7230, 7242, 7254, 7266, 7278,
     7290, 7302, 7314, 7326, 7338, 7350, 7362, 7374, 7386, 7398,
     7410, 7422, 7434, 7446, 7458, 7470, 7482, 7494, 7506, 7518,
     7530, 7542, 7554, 7566, 7578, 7590, 7602, 7614, 7626, 7638,
     7650, 7662, 7674, 7686, 7698, 7710, 7722, 7734, 7746, 7758,
     7770, 7782, 7794, 7806, 7818, 7830, 7842, 7854, 7866, 7878,
     7890, 7902, 7914, 7926, 7938, 7950, 7962, 7974, 7986, 7998,

     8010, 8022, 8034, 8046, 8058, 8070, 8082, 8094, 8106, 8118,
     8130, 8142, 8154, 8166, 8178, 8190, 8202, 8214, 8226, 8238,
     8250, 8262, 8274, 8286, 8298, 8310, 8322, 8334, 8346, 8358,
     8370, 8382, 8394, 8406, 8418, 8430, 8442, 8454, 8466, 8478,
     8490, 8502, 8514, 8526, 8538, 8550, 8562, 8574, 8586, 8598,
     8610, 8622, 8634, 8646, 8658, 8670, 8682, 8694, 8706, 8718,
     8730, 8742, 8754, 8766, 8778, 8790, 8802, 8814, 8826, 8838,
     8850, 8862, 8874, 8886, 8898, 8910, 8922, 8934, 8946, 8958,
     8970, 8982, 8994, 9006, 9018, 9030, 9042, 9054, 9066, 9078,
     9090, 9102, 9114, 9126, 9138, 9150, 9162, 9174, 9186, 9198,

     9210, 9222, 9234, 9246, 9258, 9270, 9282, 9294, 9306, 9318,
     9330, 9342, 9354, 9366, 9378, 9390, 9402, 9414, 9426, 9438,
     9450, 9462, 9474, 9486, 9498, 9510, 9522, 9534, 9546, 9558,
     9570, 9582, 9594, 9606, 9618, 9630, 9642, 9654, 9666, 9678,
     9690, 9702, 9714, 9726, 9738, 9750, 9762, 9774, 9786, 9798,
     9810, 9822, 9834, 9846, 9858, 9870, 9882, 9894, 9906, 9918,
     9930, 9942, 9954, 9966, 9978, 9990,10002,10014,10026,10038,
    10050,10062,10074,10086,10098,10110,10122,10134,10146,10158,
    10170,10182,10194,10206,10218,10230,10242,10254,10266,10278,
    10290,10302,10314,10326,10338,10350,10362,10374,10386,10398,

    10410,10422,10434,10446,10458,10470,10482,10494,10506,10518,
    10530,10542,10554,10566,10578,10590,10602,10614,10626,10638,
    10650,10662,10674,10686,10698,10710,10722,10734,10746,10758,
    10770,10782,10794,10806,10818,10830,10842,10854,10866,10878,
    10890,10902,10914,10926,10938,10950,10962,10974,10986,10998,
    11010,11022,11034,11046,11058,11070,11082,11094,11106,11118,
    11130,11142,11154,11166,11178,11190,11202,11214,11226,11238,
    11250,11262,11274,11286,11298,11310,11322,11334,11346,11358,
    11370,11382,11394,11406,11418,11430,11442,11454,11466,11478,
    11490,11502,11514,11526,11538,11550,11562,11574,11586,11598,

    11610,11622,11634,11646,11658,11670,11682,11694,11706,11718,
    11730,11742,11754,11766,11778,11790,11802,11814,11826,11838,
    11850,11862,11874,11886,11898,11910,11922,11934,11946,11958,
    11970,11982,11994,12006
    } ;

static const flex_int16_t yy_def[2735] =
    {   0,
     2009, 2009, 2008,    3, 2009,    5, 2008,    7, 2010, 2010,
     2011, 2011, 2012, 2012, 2013, 2013, 2009, 2009, 2014, 2014,
     2015, 2015, 2009, 2009, 2016, 2016, 2009, 2009, 2017, 2017,
     2009, 2009, 2018, 2018, 2009, 2009, 2009,   37, 2008,   39,
     2009, 2009,    5,   43, 2008,   45,    5,   47,   47,   49,
     2008,   51, 2008,   53,   47,   55,   37,   57, 2019, 2019,
     2008, 2008, 2008, 2008, 2020, 2008, 2008, 2008, 2008, 2021,
     2008, 2022, 2022, 2022, 2008, 2008, 2008, 2008, 2023, 2024,
     2024, 2025, 2025, 2026, 2027, 2027, 2028, 2027, 2027, 2029,
     2029, 2030, 2031, 2031, 2032, 2008, 2008, 2033, 2033, 2034,

     2035, 2035, 2036, 2008, 2037, 2037, 2038, 2008, 2039, 2039,
     2040, 2008, 2041, 2041, 2042, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2043, 2008, 2008, 2008, 2044, 2008, 2008,
     2008, 2008, 2045, 2008, 2008, 2008, 2008, 2008, 2046, 2047,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2048,
     2049, 2050, 2051, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2052, 2052, 2053, 2008, 2054, 2008,
     2008, 2008, 2008, 2054, 2008, 2008, 2008, 2008, 2055, 2008,
     2056, 2056, 2056, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008,  194, 2008, 2057, 2058, 2059,

     2059, 2008, 2059, 2059, 2059, 2060, 2060, 2061, 2061, 2062,
     2062, 2063, 2062, 2062, 2063, 2062, 2062, 2064, 2064, 2065,
     2065, 2066, 2066, 2067, 2067, 2008, 2068, 2068, 2069, 2069,
     2070, 2070, 2071, 2071, 2008, 2072, 2072, 2073, 2073, 2008,
     2074, 2074, 2075, 2075, 2008, 2076, 2076, 2077, 2077, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2078, 2008, 2008, 2008, 2079, 2008, 2008, 2008,
      269, 2080, 2008, 2079, 2079, 2008, 2008, 2008, 2081, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
      289, 2082, 2008, 2008, 2008, 2083, 2084, 2008, 2084, 2084,

     2084, 2008, 2008, 2008, 2008, 2008, 2008, 2008,  307, 2008,
     2085, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
      318, 2086, 2087, 2088, 2008, 2088, 2088, 2089, 2090, 2008,
     2090, 2090, 2008, 2008, 2008, 2008, 2008, 2008, 2008,  338,
     2008, 2091, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2092, 2092, 2093,
     2093, 2008, 2008, 2008, 2008, 2008, 2094, 2008, 2008, 2095,
     2096, 2097, 2097, 2098, 2098, 2099, 2099, 2100, 2099, 2099,
     2100, 2099, 2099, 2099, 2099, 2101, 2101, 2102, 2102, 2103,
     2103, 2104, 2104, 2105, 2105, 2106, 2106, 2107, 2107, 2108,

     2108, 2008, 2109, 2109, 2110, 2110, 2008, 2111, 2111, 2112,
     2112, 2008, 2113, 2113, 2114, 2114, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2115, 2008, 2116, 2008, 2008, 2117, 2008,
     2008, 2008, 2008, 2118, 2008, 2008, 2008, 2008, 2119, 2008,
     2008, 2120, 2121, 2008, 2122, 2123, 2008, 2008, 2124, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2125, 2096, 2126, 2126, 2127, 2127, 2128, 2128,
     2129, 2128, 2128, 2129, 2128, 2128, 2128, 2128, 2128, 2128,
     2130, 2130, 2131, 2131, 2132, 2132, 2133, 2133, 2134, 2134,
     2135, 2135, 2136, 2136, 2137, 2137, 2138, 2138, 2139, 2139,

     2008, 2140, 2140, 2141, 2141, 2008, 2142, 2142, 2143, 2143,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2144, 2008,
     2145, 2008, 2008, 2008,  523, 2146, 2008, 2008, 2147, 2008,
     2148, 2008, 2149, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2096, 2150, 2150,
     2151, 2151, 2152, 2152, 2153, 2152, 2152, 2153, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2154, 2154, 2155, 2155,
     2156, 2156, 2157, 2157, 2158, 2158, 2159, 2159, 2008, 2008,
     2160, 2160, 2161, 2161, 2162, 2162, 2008, 2163, 2163, 2164,
     2164, 2008, 2165, 2165, 2166, 2166, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2167, 2008, 2008, 2008, 2008, 2168,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2096, 2169, 2169, 2170, 2170, 2171, 2171, 2172,
     2171, 2171, 2172, 2171, 2171, 2171, 2171, 2171, 2171, 2171,
     2171, 2171, 2008, 2008, 2160, 2160, 2173, 2173, 2174, 2174,
     2175, 2175, 2176, 2176, 2177, 2177, 2178, 2178, 2008, 2179,
     2179, 2180, 2180, 2008, 2181, 2181, 2182, 2182, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2183, 2008, 2008, 2008,
      679, 2184, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2185, 2185, 2186, 2186, 2187, 2187, 2188, 2187, 2187, 2188,

     2187, 2187, 2187, 2187, 2187, 2187, 2187, 2187, 2187, 2187,
     2189, 2189, 2190, 2190, 2191, 2191, 2192, 2192, 2193, 2193,
     2194, 2194, 2195, 2195, 2196, 2196, 2197, 2197, 2198, 2198,
     2008, 2008, 2008, 2008, 2008, 2199, 2008, 2200, 2008, 2008,
     2008, 2008, 2201, 2201, 2202, 2202, 2203, 2203, 2204, 2203,
     2203, 2204, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203,
     2203, 2203, 2203, 2205, 2205, 2206, 2206, 2207, 2207, 2208,
     2208, 2209, 2209, 2210, 2210, 2211, 2211, 2212, 2212, 2213,
     2213, 2214, 2214, 2008, 2008, 2008, 2008, 2008, 2008, 2215,
     2008, 2008, 2008, 2216, 2216, 2217, 2217, 2218, 2218, 2219,

     2218, 2218, 2219, 2218, 2218, 2218, 2218, 2218, 2218, 2218,
     2218, 2218, 2218, 2218, 2218, 2220, 2220, 2221, 2221, 2222,
     2222, 2223, 2223, 2224, 2224, 2225, 2225, 2226, 2226, 2227,
     2227, 2228, 2228, 2229, 2229, 2008, 2008, 2008, 2008, 2230,
     2230, 2231, 2231, 2232, 2232, 2233, 2232, 2232, 2233, 2232,
     2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232, 2232,
     2232, 2234, 2234, 2235, 2235, 2236, 2236, 2237, 2237, 2238,
     2238, 2239, 2239, 2240, 2240, 2241, 2241, 2242, 2242, 2243,
     2243, 2008, 2008, 2008, 2244, 2244, 2245, 2245, 2246, 2246,
     2247, 2246, 2246, 2247, 2246, 2246, 2246, 2246, 2246, 2246,

     2246, 2246, 2246, 2246, 2246, 2246, 2248, 2248, 2249, 2249,
     2250, 2250, 2251, 2251, 2252, 2252, 2253, 2253, 2254, 2254,
     2255, 2255, 2256, 2256, 2257, 2257, 2008, 2258, 2258, 2259,
     2259, 2260, 2260, 2261, 2260, 2260, 2261, 2260, 2260, 2260,
     2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2262,
     2262, 2263, 2263, 2264, 2264, 2265, 2265, 2266, 2266, 2267,
     2267, 2268, 2268, 2269, 2269, 2270, 2270, 2271, 2271, 2008,
     2272, 2272, 2273, 2273, 2274, 2274, 2275, 2274, 2274, 2275,
     2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274,
     2274, 2274, 2276, 2276, 2277, 2277, 2278, 2278, 2279, 2279,

     2280, 2280, 2281, 2281, 2282, 2282, 2283, 2283, 2284, 2284,
     2285, 2285, 2286, 2286, 2287, 2287, 2288, 2288, 2289, 2288,
     2288, 2289, 2288, 2288, 2288, 2288, 2288, 2288, 2288, 2288,
     2288, 2288, 2288, 2288, 2290, 2290, 2291, 2291, 2292, 2292,
     2293, 2293, 2294, 2294, 2295, 2295, 2296, 2296, 2297, 2297,
     2298, 2298, 2299, 2299, 2300, 2300, 2301, 2301, 2302, 2302,
     2303, 2302, 2302, 2303, 2302, 2302, 2302, 2302, 2302, 2302,
     2302, 2302, 2302, 2302, 2302, 2302, 2304, 2304, 2305, 2305,
     2306, 2306, 2307, 2307, 2308, 2308, 2309, 2309, 2310, 2310,
     2311, 2311, 2312, 2312, 2313, 2313, 2314, 2314, 2315, 2315,

     2316, 2316, 2317, 2316, 2316, 2317, 2316, 2316, 2316, 2316,
     2316, 2316, 2316, 2316, 2316, 2316, 2316, 2316, 2318, 2318,
     2319, 2319, 2320, 2320, 2321, 2321, 2322, 2322, 2323, 2323,
     2324, 2324, 2325, 2325, 2326, 2326, 2327, 2327, 2328, 2328,
     2329, 2329, 2330, 2330, 2331, 2330, 2330, 2331, 2330, 2330,
     2330, 2330, 2330, 2330, 2330, 2330, 2330, 2330, 2330, 2330,
     2332, 2332, 2333, 2333, 2334, 2334, 2335, 2335, 2336, 2336,
     2337, 2337, 2338, 2338, 2339, 2339, 2340, 2340, 2341, 2341,
     2342, 2342, 2343, 2343, 2008, 2008, 2344, 2008, 2008, 2344,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2345, 2345, 2346, 2346, 2347, 2347, 2348, 2348,
     2349, 2349, 2350, 2350, 2351, 2351, 2352, 2352, 2353, 2353,
     2354, 2354, 2355, 2355, 2356, 2356, 2008, 2008, 2008, 2008,
     2008, 2357, 2357, 2358, 2358, 2359, 2359, 2360, 2360, 2361,
     2361, 2362, 2362, 2363, 2363, 2364, 2364, 2365, 2365, 2366,
     2366, 2367, 2367, 2368, 2368, 2008, 2008, 2344, 2344, 2369,
     2369, 2370, 2370, 2371, 2371, 2372, 2372, 2373, 2373, 2374,
     2374, 2375, 2375, 2376, 2376, 2377, 2377, 2378, 2378, 2379,
     2379, 2380, 2380, 2381, 2381, 2382, 2382, 2383, 2383, 2384,
     2384, 2385, 2385, 2386, 2386, 2387, 2387, 2388, 2388, 2389,

     2389, 2390, 2390, 2391, 2391, 2392, 2392, 2393, 2393, 2394,
     2394, 2395, 2395, 2396, 2396, 2397, 2397, 2398, 2398, 2399,
     2399, 2400, 2400, 2401, 2401, 2402, 2402, 2403, 2403, 2404,
     2404, 2405, 2405, 2406, 2406, 2407, 2407, 2408, 2408, 2409,
     2409, 2410, 2410, 2411, 2411, 2412, 2412, 2413, 2413, 2414,
     2414, 2415, 2415, 2416, 2416, 2417, 2417, 2418, 2418, 2419,
     2419, 2420, 2420, 2421, 2421, 2422, 2422, 2423, 2423, 2424,
     2424, 2425, 2425, 2426, 2426, 2427, 2427, 2428, 2428, 2429,
     2429, 2430, 2430, 2431, 2431, 2432, 2432, 2433, 2433, 2434,
     2434, 2435, 2435, 2436, 2436, 2437, 2437, 2438, 2438, 2439,

     2439, 2440, 2440, 2441, 2441, 2442, 2442, 2443, 2443, 2444,
     2444, 2445, 2445, 2446, 2446, 2447, 2447, 2448, 2448, 2008,
     2008, 2449, 2449, 2450, 2450, 2451, 2451, 2452, 2452, 2453,
     2453, 2454, 2454, 2455, 2455, 2456, 2456, 2457, 2457, 2458,
     2458, 2459, 2459, 2460, 2460, 2461, 2461, 2462, 2462, 2463,
     2463, 2008, 2008, 2449, 2449, 2464, 2464, 2465, 2465, 2466,
     2466, 2467, 2467, 2468, 2468, 2469, 2469, 2470, 2470, 2471,
     2471, 2472, 2472, 2473, 2473, 2474, 2474, 2475, 2475, 2476,
     2476, 2477, 2477, 2478, 2478, 2479, 2479, 2480, 2480, 2481,
     2481, 2482, 2482, 2483, 2483, 2484, 2484, 2485, 2485, 2486,

     2486, 2487, 2487, 2488, 2488, 2489, 2489, 2490, 2490, 2491,
     2491, 2492, 2492, 2493, 2493, 2494, 2494, 2495, 2495, 2496,
     2496, 2497, 2497, 2498, 2498, 2499, 2499, 2500, 2500, 2501,
     2501, 2502, 2502, 2503, 2503, 2504, 2504, 2505, 2505, 2506,
     2506, 2507, 2507, 2508, 2508, 2509, 2509, 2510, 2510, 2511,
     2511, 2512, 2512, 2513, 2513, 2514, 2514, 2515, 2515, 2516,
     2516, 2517, 2517, 2518, 2518, 2519, 2519, 2520, 2520, 2521,
     2521, 2522, 2522, 2523, 2523, 2524, 2524, 2525, 2525, 2526,
     2526, 2527, 2527, 2528, 2528, 2529, 2529, 2530, 2530, 2531,
     2531, 2532, 2532, 2533, 2533, 2534, 2534, 2535, 2535, 2536,

     2536, 2537, 2537, 2538, 2538, 2539, 2539, 2540, 2540, 2541,
     2541, 2542, 2542, 2543, 2543, 2544, 2544, 2545, 2545, 2546,
     2546, 2547, 2547, 2548, 2548, 2549, 2549, 2550, 2550, 2551,
     2551, 2552, 2552, 2553, 2553, 2554, 2554, 2555, 2555, 2556,
     2556, 2557, 2557, 2558, 2558, 2559, 2559, 2560, 2560, 2561,
     2561, 2562, 2562, 2563, 2563, 2564, 2564, 2565, 2565, 2566,
     2566, 2567, 2567, 2568, 2568, 2569, 2569, 2570, 2570, 2571,
     2571, 2572, 2572, 2573, 2573, 2574, 2574, 2575, 2575, 2576,
     2576, 2577, 2577, 2578, 2578, 2579, 2579, 2580, 2580, 2581,
     2581, 2582, 2582, 2583, 2583, 2584, 2584, 2585, 2585, 2586,

     2586, 2587, 2587, 2588, 2588, 2589, 2589, 2590, 2590, 2591,
     2591, 2592, 2592, 2593, 2593, 2594, 2594, 2595, 2595, 2596,
     2596, 2597, 2597, 2598, 2598, 2599, 2599, 2600, 2600, 2601,
     2601, 2602, 2602, 2603, 2603, 2604, 2604, 2605, 2605, 2606,
     2606, 2607, 2607, 2608, 2608, 2609, 2609, 2610, 2610, 2611,
     2611, 2612, 2612, 2613, 2613, 2614, 2614, 2615, 2615, 2616,
     2616, 2617, 2617, 2618, 2618, 2619, 2619, 2620, 2620, 2621,
     2621, 2622, 2622, 2623, 2623, 2624, 2624, 2625, 2625, 2626,
     2626, 2627, 2627, 2628, 2628, 2629, 2629, 2630, 2630, 2631,
     2631, 2632, 2632, 2633, 2633, 2634, 2634, 2635, 2635, 2636,

     2636, 2637, 2637, 2638, 2638, 2639, 2639, 2640, 2640, 2641,
     2641, 2642, 2642, 2643, 2643, 2644, 2644, 2645, 2645, 2646,
     2646, 2647, 2647, 2648, 2648, 2649, 2649, 2650, 2650, 2651,
     2651, 2652, 2652, 2653, 2653, 2654, 2654, 2655, 2655, 2656,
     2656, 2657, 2657, 2658, 2658, 2659, 2659, 2660, 2660, 2661,
     2661, 2662, 2662, 2663, 2663, 2664, 2664, 2665, 2665, 2666,
     2666, 2667, 2667, 2668, 2668, 2669, 2669, 2670, 2670, 2671,
     2671, 2672, 2672, 2673, 2673, 2674, 2674, 2675, 2675, 2676,
     2676, 2677, 2677, 2678, 2678, 2679, 2679, 2680, 2680, 2681,
     2681, 2682, 2682, 2683, 2683, 2684, 2684, 2685, 2685, 2686,

     2686, 2687, 2687, 2688, 2688, 2689, 2689, 2690, 2690, 2691,
     2691, 2692, 2692, 2693, 2693, 2694, 2694, 2695, 2695, 2696,
     2696, 2697, 2697, 2698, 2698, 2699, 2699, 2700, 2700, 2701,
     2701, 2702, 2702, 2703, 2703, 2704, 2704, 2705, 2705, 2706,
     2706, 2707, 2707, 2708, 2708, 2709, 2709, 2710, 2710, 2711,
     2711, 2712, 2712, 2713, 2713, 2714, 2714, 2715, 2715, 2716,
     2716, 2717, 2717, 2718, 2718, 2719, 2719, 2720, 2720, 2721,
     2721, 2722, 2722, 2723, 2723, 2724, 2724, 2725, 2725, 2726,
     2726, 2727, 2727, 2728, 2728, 2729, 2729, 2730, 2730, 2731,
     2731, 2732, 2732, 2733, 2733, 2008, 2008, 2734, 2734, 2008,

     2008, 2734, 2734, 2008, 2008, 2734, 2734,    0, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,

     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008
    } ;

static const flex_int16_t yy_nxt[12063] =
    {   0,
     2008,   63,   64,   63,   65,   83,   64,   83,   84,   83,
       64,   83,   84,   91,   64,   91,   92,  369,  369,   86,
       64,   86,   87,  425,  425,   66,   86,   64,   86,   87,
       91,   64,   91,   92,  433,  433,   67,   68,   69,   63,
       64,   63,   65,   88,   94,   64,   94,   95, 1230,  184,
       88,  184,  441,  441,   89,   94,   64,   94,   95, 1229,
      185,   89,  185,   66,   99,   64,   99,  100,   99,   64,
       99,  100,  444,  444,   67,   68,   69,   62,   70,   64,
       70,   65,   62,   62,   62,   62,   62,   62,   62,   71,
       62,   62,   62,   62,   62,   62,   62,   62,   72,   72,

       72,   72,   73,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   74,   72,   72,   72,   62,   62,
       75,   64,   75,   65,  102,   64,  102,  103,   76,   76,
       77,  792,   78,   78,   78,   78,   78,   62,   79,   64,
       79,   65,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   81,   80,   80,   80,   80,
       96,   64,   96,   65,  102,   64,  102,  103,   96,   64,
      104,   65,   96,   64,  104,   65,  106,   64,  106,  107,

      741,  199,   97,  199,  169,   97,  106,   64,  106,  107,
       97,   96,   64,  108,   65,  687,   97,   96,   64,   96,
       65,   96,   64,  108,   65,  110,   64,  110,  111,  110,
       64,  110,  111,   96,   64,  112,   65,  620,  201,   97,
      448,  448,   97,   96,   64,  112,   65,   97,  114,   64,
      114,  115,  458,   97,  114,   64,  114,  115,   96,   64,
      116,   65,   96,   64,  116,   65,  117,  118,  117,   65,
       96,   64,   96,   65,   96,   64,   96,   65,  129,  260,
      363,  261,  129,  166,   64,  166,  167,  202,  119,  202,
      120,  319,  203,  319,  121,  122, 1230,  123,   62,  124,

       64,  124,   65,   62,   62,   62,   62,  125,  125,  126,
       62,  127,  127,  127,  127,  127,   62,   62,   62,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  130,  287,  130,  287,  131,  132,  462,  462,  133,
      134,  135,  281,  136,  136,  136,  136,  136,  137,  138,
       62,  139,   64,  139,   65,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,

      140,  140,  140,  141,  176,  141,  166,   64,  166,  167,
     1229,  142,  142,  143, 1202,  144,  144,  144,  144,  144,
      145,  191,  145,  193,  193,  193,  193,  193,  146,  146,
      147,  148,  149,  149,  149,  149,  149,   62,  150,   64,
      150,   65,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
       62,  152,   64,  152,   65,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  154,  185,  154,  185,  185,  350,  185,
      350,  155,  155,  156, 1201,  157,  157,  157,  157,  157,
      158,   64,  158,  179, 1200,  179,  169,  202,  273,  202,
      273,  159,  203,  274,  180,  207,  187,  207,  208,  276,
     1199,  188,  160,  211,  161,  211,  212,  182,  162,  163,
     1196,  164,  168,  205,  168,  169,  294,  603,  294,  183,
      194,  194,  194,  194,  194, 1194,  219,  213,  219,  220,
      223,  604,  223,  224, 1193,  295,  170,  226,  214,  226,

      169,  228, 1192,  228,  229,  518,  518,  171,  172,  173,
      189, 1191,  189,  169,  232, 1160,  232,  233,  190,  190,
      191,  617,  192,  192,  192,  192,  192,  195,  285,  195,
      285,  226, 1159,  226,  169,  618,  286,  196,  197,  192,
      192,  192,  192,  192,  235,  237, 1158,  237,  238, 1157,
      198,  198,  226, 1154,  240,  169,  242, 1152,  242,  243,
      226, 1151,  245,  169,  247, 1150,  247,  248,  198,  226,
     1149,  250,  169,  251, 1118,  251,  169,  265, 1117,  268,
      268,  268,  268,  268,  269,  269,  269,  269,  269,  289,
      289,  289,  289,  289, 1116,  252,  296,  253,  296,  169,

     1115,  254,  255, 1112,  256,  263, 1110,  263,  169,  323,
     1109,  323,  169,  264,  264,  265, 1108,  266,  266,  266,
      266,  266,  270,  281,  270,  288,  288,  288,  288,  288,
     1107,  184,  271,  184,  266,  266,  266,  266,  266,  185,
     1076,  185,  298, 1075,  298,  272,  272,  299,  300,  304,
     1074,  306,  306,  306,  306,  306,  307,  307,  307,  307,
      307,  520,  520,  272,  277, 1073,  277,  169,  328,  278,
      328,  169,  279,  280,  281, 1070,  282,  282,  282,  282,
      282,  283,  284,  290,  314,  290,  317,  317,  317,  317,
      317, 1068,  185,  291,  185,  282,  282,  282,  282,  282,

      318,  318,  318,  318,  318, 1067,  292,  292,  325,  330,
      325,  330, 1066,  326,  331,  335, 1065,  337,  337,  337,
      337,  337,  528,  528,  292,  302,  188,  302,  169,  184,
      354,  184,  355,  303,  303,  304,  356,  305,  305,  305,
      305,  305,  308, 1034,  308,  338,  338,  338,  338,  338,
      530,  530,  309,  310,  305,  305,  305,  305,  305,  359,
     1033,  359,  360,  532,  532,  311,  311,  185, 1032,  185,
      185,  185,  185,  185,  194,  194,  194,  194,  194,  195,
      185,  195,  185,  311,  312, 1031,  312,  169, 1028,  185,
      197,  185,  313,  313,  314,  315,  316,  316,  316,  316,

      316,  320,  187,  320,  364,  368,  202,  368,  202,  609,
      609,  321,  366,  316,  316,  316,  316,  316,  202,  373,
      202,  373,  374,  203,  322,  322,  199, 1026,  199,  169,
      179, 1025,  179,  169,  191, 1024,  193,  193,  193,  193,
      193,  180,  322,  333, 1023,  333,  169,  387,  992,  387,
      388,  334,  334,  335,  182,  336,  336,  336,  336,  336,
      339,  991,  339,  201,  990,  377,  183,  377,  378,  989,
      340,  341,  336,  336,  336,  336,  336,  202,  391,  202,
      391,  392,  203,  342,  342,  202,  202,  202,  202,  379,
      203,  203,  226,  986,  226,  169,  395,  984,  395,  396,

      380,  342,  343,  205,  343,  169,  399,  983,  399,  400,
      371,  982,  402,  344,  402,  404,  981,  404,  405,  226,
      949,  407,  169,  948,  345,  409,  346,  409,  410,  947,
      347,  348,  946,  349,  168,  943,  168,  169,  226,  941,
      412,  169,  414,  940,  414,  415,  226,  939,  417,  169,
      260,  265,  261,  268,  268,  268,  268,  268,  170,  269,
      269,  269,  269,  269,  270,  273,  270,  273,  938,  171,
      172,  173,  189,  927,  189,  169,  276,  427,  906,  427,
      190,  190,  191,  905,  192,  192,  192,  192,  192,  195,
      285,  195,  285,  289,  289,  289,  289,  289,  286,  196,

      197,  192,  192,  192,  192,  192,  273,  294,  273,  294,
      904,  274,  198,  198,  273,  903,  273,  276,  287,  274,
      287,  285,  428,  285,  428,  276,  295,  900,  281,  286,
      198,  195,  281,  195,  288,  288,  288,  288,  288,  676,
      676,  196,  197,  193,  193,  193,  193,  193,  287,  294,
      287,  294,  737,  737,  367,  367,  436,  296,  436,  296,
      169,  298,  298,  298,  298,  898,  299,  300,  437,  440,
      897,  440,  367,  195,  438,  195,  438,  789,  789,  299,
      300,  308,  896,  308,  197,  194,  194,  194,  194,  194,
      895,  882,  310,  298,  861,  298,  367,  367,  299,  300,

      304,  860,  306,  306,  306,  306,  306,  307,  307,  307,
      307,  307,  859,  858,  367,  204,  319,  204,  319,  204,
      204,  319,  855,  319, 2008,  853,  204,  204,  318,  318,
      318,  318,  318,  204,  204,  204,  251,  852,  251,  169,
      314,  851,  317,  317,  317,  317,  317,  320,  323,  320,
      323,  169,  325,  325,  325,  325,  850,  326,  252,  839,
      253,  325,  618,  325,  254,  255,  326,  256,  263,  604,
      263,  169,  328,  838,  328,  169,  264,  264,  265,  837,
      266,  266,  266,  266,  266,  270,  330,  270,  330,  815,
      330,  331,  330,  814,  339,  271,  339,  266,  266,  266,

      266,  266,  330,  813,  330,  341,  812,  331,  272,  272,
      335,  809,  337,  337,  337,  337,  337,  338,  338,  338,
      338,  338,  447,  350,  447,  350,  272,  270,  354,  270,
      355,  350,  807,  350,  356,  806,  461,  271,  461,  268,
      268,  268,  268,  268,  359,  805,  359,  360,  804,  793,
      424,  424,  368,  792,  368,  370,  370,  370,  370,  370,
      202,  195,  202,  195,  466,  203,  466,  467,  424,  270,
      791,  270,  197,  470,  788,  470,  471,  479,  402,  479,
      402,  269,  269,  269,  269,  269,  482,  786,  482,  483,
      785,  784,  424,  424,  763,  464,  486,  472,  486,  487,

      490,  762,  490,  491,  494,  761,  494,  495,  473,  758,
      424,  275,  270,  275,  270,  275,  275,  498,  756,  498,
      499,  226,  275,  501,  169,  503,  755,  503,  504,  275,
      275,  275,  277,  754,  277,  169,  226,  278,  506,  169,
      279,  280,  281,  753,  282,  282,  282,  282,  282,  283,
      284,  290,  508,  290,  508,  509,  226,  741,  511,  169,
      427,  291,  427,  282,  282,  282,  282,  282,  426,  426,
      426,  426,  426,  740,  292,  292,  428,  431,  428,  522,
      522,  522,  522,  522,  523,  523,  523,  523,  523,  290,
      739,  290,  292,  290,  735,  290,  434,  434,  434,  434,

      434,  734,  294,  291,  294,  288,  288,  288,  288,  288,
      436,  527,  436,  527,  733,  732,  429,  429,  438,  440,
      438,  440,  731,  710,  437,  442,  442,  442,  442,  442,
      308,  320,  308,  320,  429,  290,  447,  290,  447,  709,
      706,  310,  445,  445,  445,  445,  445,  289,  289,  289,
      289,  289,  449,  449,  449,  449,  449,  704,  429,  429,
      339,  534,  339,  534,  541,  543,  541,  543,  545,  703,
      545,  341,  461,  202,  461,  202,  429,  290,  203,  290,
      463,  463,  463,  463,  463,  430,  430,  431,  542,  432,
      432,  432,  432,  432,  301,  546,  301,  702,  301,  301,

      701,  687,  544, 2008,  548,  301,  301,  563,  195,  563,
      195,  686,  301,  301,  301,  302,  684,  302,  169,  197,
      563,  683,  563,  303,  303,  304,  618,  305,  305,  305,
      305,  305,  308,  550,  308,  550,  551,  554,  674,  554,
      555,  673,  309,  310,  305,  305,  305,  305,  305,  568,
      672,  568,  569,  671,  604,  311,  311,  565,  670,  565,
      572,  556,  572,  573,  576,  642,  576,  577,  580,  639,
      580,  581,  557,  311,  308,  584,  308,  584,  585,  226,
      637,  226,  169,  636,  309,  310,  306,  306,  306,  306,
      306,  635,  634,  587,  566,  622,  621,  439,  439,  589,

      620,  589,  590,  270,  226,  270,  226,  169,  594,  619,
      594,  595,  290,  611,  290,  439,  308,  602,  308,  592,
      226,  601,  226,  169,  527,  600,  527,  310,  307,  307,
      307,  307,  307,  320,  599,  320,  597,  598,  564,  439,
      439,  519,  519,  519,  519,  519,  521,  521,  521,  521,
      521,  529,  529,  529,  529,  529,  562,  439,  312,  561,
      312,  169,  534,  612,  534,  612,  313,  313,  314,  315,
      316,  316,  316,  316,  316,  320,  613,  320,  613,  560,
      616,  308,  616,  308,  614,  321,  614,  316,  316,  316,
      316,  316,  310,  531,  531,  531,  531,  531,  322,  322,

      533,  533,  533,  533,  533,  559,  541,  339,  541,  339,
      543,  615,  543,  545,  547,  545,  322,  320,  341,  320,
      202,  625,  202,  625,  626,  203,  638,  321,  638,  317,
      317,  317,  317,  317,  638,  640,  638,  640,  540,  539,
      443,  443,  629,  538,  629,  630,  537,  640,  644,  640,
      644,  645,  648,  623,  648,  649,  536,  535,  443,  320,
      652,  320,  652,  653,  517,  226,  631,  226,  169,  516,
      515,  318,  318,  318,  318,  318,  656,  632,  656,  657,
      514,  513,  443,  443,  641,  659,  661,  659,  661,  662,
      664,  666,  664,  666,  667,  669,  675,  669,  675,  512,

      443,  327,  524,  327,  524,  327,  327,  612,  480,  612,
     2008,  478,  327,  327,  679,  679,  679,  679,  679,  327,
      327,  327,  332,  613,  332,  613,  332,  332,  614,  477,
      614, 2008,  476,  332,  332,  610,  610,  610,  610,  610,
      332,  332,  332,  333,  475,  333,  169,  616,  685,  616,
      685,  334,  334,  335,  460,  336,  336,  336,  336,  336,
      339,  607,  339,  678,  678,  678,  678,  678,  459,  458,
      340,  341,  336,  336,  336,  336,  336,  689,  692,  689,
      692,  693,  457,  342,  342,  545,  690,  545,  690,  456,
      705,  203,  705,  455,  705,  696,  705,  696,  697,  454,

      453,  342,  339,  707,  339,  707,  707,  226,  707,  226,
      169,  452,  340,  341,  337,  337,  337,  337,  337,  698,
      712,  688,  712,  713,  451,  446,  446,  450,  357,  716,
      699,  716,  717,  720,  353,  720,  721,  659,  352,  659,
      708,  351,  435,  446,  339,  724,  339,  724,  725,  664,
      728,  664,  728,  729,  293,  341,  338,  338,  338,  338,
      338,  669,  675,  669,  675,  423,  422,  446,  446,  677,
      677,  677,  677,  677,  524,  680,  524,  680,  614,  685,
      614,  685,  545,  421,  545,  446,  343,  420,  343,  169,
      419,  689,  690,  689,  690,  418,  744,  344,  744,  745,

      748,  262,  748,  749,  757,  757,  757,  757,  345,  259,
      346,  742,  742,  258,  347,  348,  257,  349,  524,  759,
      524,  759,  385,  759,  750,  759,  384,  787,  525,  787,
      432,  432,  432,  432,  432,  751,  765,  383,  765,  766,
      382,  526,  526,  769,  365,  769,  770,  773,  364,  773,
      774,  777,  363,  777,  778,  781,  760,  781,  782,  526,
      524,  362,  524,  738,  738,  738,  738,  738,  178,  680,
      525,  680,  522,  522,  522,  522,  522,  541,  795,  541,
      795,  796,  177,  605,  605,  799,  176,  799,  800,  808,
      808,  808,  808,  810,  810,  810,  810,  817,  175,  817,

      818,  605,  524,  821,  524,  821,  822,  357,  825,  801,
      825,  826,  353,  352,  523,  523,  523,  523,  523,  829,
      802,  829,  830,  351,  293,  605,  605,  262,  259,  833,
      811,  833,  834,  836,  787,  836,  787,  790,  790,  790,
      790,  790,  258,  605,  524,  680,  524,  680,  543,  854,
      543,  854,  606,  606,  607,  257,  608,  608,  608,  608,
      608,  680,  841,  680,  841,  842,  845,  217,  845,  846,
      854,  681,  854,  608,  608,  608,  608,  608,  856,  856,
      856,  856,  216,  178,  682,  682,  856,  177,  856,  863,
      847,  863,  864,  867,  176,  867,  868,  871,  175,  871,

      872,  848,  682,  680,  875,  680,  875,  876,  879, 2008,
      879,  880,  836,  681,  836,  678,  678,  678,  678,  678,
      883, 2008,  883,  857, 2008, 2008,  736,  736,  884,  886,
      884,  886,  887,  899,  899,  899,  899,  901,  890,  901,
      890,  891, 2008, 2008,  736,  680,  901,  680,  901,  901,
      908,  901,  908,  909,  883, 2008,  883,  679,  679,  679,
      679,  679,  892,  912, 2008,  912,  913, 2008,  736,  736,
      884, 2008,  884,  893,  902,  916, 2008,  916,  917,  920,
     2008,  920,  921, 2008, 2008,  924,  736,  924,  925,  929,
     2008,  929,  930,  933, 2008,  933,  934,  942,  942,  942,

      942,  944,  944,  944,  944,  944,  951,  944,  951,  952,
      955, 2008,  955,  956, 2008, 2008,  959,  935,  959,  960,
      963, 2008,  963,  964,  967, 2008,  967,  968,  936,  970,
      972,  970,  972,  973,  976, 2008,  976,  977,  945,  985,
      985,  985,  985,  987,  987,  987,  987,  987,  994,  987,
      994,  995,  998, 2008,  998,  999, 2008, 1002,  978, 1002,
     1003, 1006, 2008, 1006, 1007, 1010, 2008, 1010, 1011,  979,
      970, 1014,  970, 1014, 1015, 1018, 2008, 1018, 1019, 1027,
      988, 1027, 1027, 1029, 1027, 1029, 1029, 1029, 1029, 1029,
     1036, 2008, 1036, 1037, 1040, 2008, 1040, 1041, 1044, 1020,

     1044, 1045, 1048, 2008, 1048, 1049, 1052, 2008, 1052, 1053,
     1021, 1056, 2008, 1056, 1057, 1060, 2008, 1060, 1061, 1069,
     1030, 1069, 1069, 1071, 1069, 1071, 1071, 1071, 1071, 1071,
     1078, 2008, 1078, 1079, 1082, 2008, 1082, 1083, 1086, 1062,
     1086, 1087, 1090, 2008, 1090, 1091, 1094, 2008, 1094, 1095,
     1063, 1098, 2008, 1098, 1099, 1102, 2008, 1102, 1103, 1111,
     1072, 1111, 1111, 1113, 1111, 1113, 1113, 1113, 1113, 1113,
     1120, 2008, 1120, 1121, 1124, 2008, 1124, 1125, 1128, 1104,
     1128, 1129, 1132, 2008, 1132, 1133, 1136, 2008, 1136, 1137,
     1105, 1140, 2008, 1140, 1141, 1144, 2008, 1144, 1145, 1153,

     1114, 1153, 1153, 1155, 1153, 1155, 1155, 1155, 1155, 1155,
     1162, 2008, 1162, 1163, 1166, 2008, 1166, 1167, 1170, 1146,
     1170, 1171, 1174, 2008, 1174, 1175, 1178, 2008, 1178, 1179,
     1147, 1182, 2008, 1182, 1183, 1186, 2008, 1186, 1187, 1195,
     1156, 1195, 1195, 1197, 1195, 1197, 1197, 1197, 1197, 1197,
     1204, 2008, 1204, 1205, 1208, 2008, 1208, 1209, 1212, 1188,
     1212, 1213, 1216, 2008, 1216, 1217, 1220, 2008, 1220, 1221,
     1189, 1224, 2008, 1224, 1225, 1227, 2008, 1227,  169, 1231,
     1198, 1231, 1231,  543, 1231,  543,  543,  543,  543,  543,
     1233, 2008, 1233, 1234, 1237, 2008, 1237, 1238, 1241, 1228,

     1241, 1242, 1245, 2008, 1245, 1246, 1249, 2008, 1249, 1250,
      171, 1253, 2008, 1253, 1254, 1227, 2008, 1227,  169, 1231,
      544, 1231, 1231, 1257, 1231, 1257, 1258, 1261, 2008, 1261,
     1262, 1265, 2008, 1265, 1266, 1269, 2008, 1269, 1270, 1228,
     1273, 2008, 1273, 1274, 1277, 2008, 1277, 1278, 2008,  226,
      171,  226,  169, 1281, 2008, 1281, 1282, 1285, 2008, 1285,
     1286, 1289, 2008, 1289, 1290, 1293, 2008, 1293, 1294, 1297,
     2008, 1297, 1298, 1301, 2008, 1301, 1302, 1305, 2008, 1305,
     1306, 1309, 2008, 1309, 1310, 1313, 2008, 1313, 1314, 1317,
     2008, 1317, 1318, 1321, 2008, 1321, 1322, 1325, 2008, 1325,

     1326, 1329, 2008, 1329, 1330, 1333, 2008, 1333, 1334, 1337,
     2008, 1337, 1338, 1341, 2008, 1341, 1342, 1345, 2008, 1345,
     1346, 1349, 2008, 1349, 1350, 1353, 2008, 1353, 1354, 1357,
     2008, 1357, 1358, 1361, 2008, 1361, 1362, 1365, 2008, 1365,
     1366, 1369, 2008, 1369, 1370, 1373, 2008, 1373, 1374, 1377,
     2008, 1377, 1378, 1381, 2008, 1381, 1382, 1385, 2008, 1385,
     1386, 1389, 2008, 1389, 1390, 1393, 2008, 1393, 1394, 1397,
     2008, 1397, 1398, 1401, 2008, 1401, 1402, 1405, 2008, 1405,
     1406, 1409, 2008, 1409, 1410, 1413, 2008, 1413, 1414, 1417,
     2008, 1417, 1418, 1421, 2008, 1421, 1422, 1425, 2008, 1425,

     1426, 1429, 2008, 1429, 1430, 1433, 2008, 1433, 1434, 1437,
     2008, 1437, 1438,  226, 2008,  226,  169, 1441, 2008, 1441,
     1442, 1445, 2008, 1445, 1446, 1449, 2008, 1449, 1450, 1453,
     2008, 1453, 1454, 1457, 2008, 1457, 1458, 1461, 2008, 1461,
     1462, 1465, 2008, 1465, 1466,  226, 2008,  226,  169, 1469,
     2008, 1469, 1470, 1473, 2008, 1473, 1474, 1477, 2008, 1477,
     1478, 1481, 2008, 1481, 1482, 1485, 2008, 1485, 1486, 1489,
     2008, 1489, 1490, 1493, 2008, 1493, 1494, 1497, 2008, 1497,
     1498, 1501, 2008, 1501, 1502, 1505, 2008, 1505, 1506, 1509,
     2008, 1509, 1510, 1513, 2008, 1513, 1514, 1517, 2008, 1517,

     1518, 1521, 2008, 1521, 1522, 1525, 2008, 1525, 1526, 1529,
     2008, 1529, 1530, 1533, 2008, 1533, 1534, 1537, 2008, 1537,
     1538, 1541, 2008, 1541, 1542, 1545, 2008, 1545, 1546, 1549,
     2008, 1549, 1550, 1553, 2008, 1553, 1554, 1557, 2008, 1557,
     1558, 1561, 2008, 1561, 1562, 1565, 2008, 1565, 1566, 1569,
     2008, 1569, 1570, 1573, 2008, 1573, 1574, 1577, 2008, 1577,
     1578, 1581, 2008, 1581, 1582, 1585, 2008, 1585, 1586, 1589,
     2008, 1589, 1590, 1593, 2008, 1593, 1594, 1597, 2008, 1597,
     1598, 1601, 2008, 1601, 1602, 1605, 2008, 1605, 1606, 1609,
     2008, 1609, 1610, 1613, 2008, 1613, 1614, 1617, 2008, 1617,

     1618, 1621, 2008, 1621, 1622, 1625, 2008, 1625, 1626, 1629,
     2008, 1629, 1630, 1633, 2008, 1633, 1634, 1637, 2008, 1637,
     1638, 1641, 2008, 1641, 1642, 1645, 2008, 1645, 1646, 1649,
     2008, 1649, 1650, 1653, 2008, 1653, 1654, 1657, 2008, 1657,
     1658, 1661, 2008, 1661, 1662, 1665, 2008, 1665, 1666, 1669,
     2008, 1669, 1670, 1673, 2008, 1673, 1674, 1677, 2008, 1677,
     1678, 1681, 2008, 1681, 1682, 1685, 2008, 1685, 1686, 1689,
     2008, 1689, 1690, 1693, 2008, 1693, 1694, 1697, 2008, 1697,
     1698, 1701, 2008, 1701, 1702, 1705, 2008, 1705, 1706, 1709,
     2008, 1709, 1710, 1713, 2008, 1713, 1714, 1717, 2008, 1717,

     1718, 1721, 2008, 1721, 1722, 1725, 2008, 1725, 1726, 1729,
     2008, 1729, 1730, 1733, 2008, 1733, 1734, 1737, 2008, 1737,
     1738, 1741, 2008, 1741, 1742, 1745, 2008, 1745, 1746, 1749,
     2008, 1749, 1750, 1753, 2008, 1753, 1754, 1757, 2008, 1757,
     1758, 1761, 2008, 1761, 1762, 1765, 2008, 1765, 1766, 1769,
     2008, 1769, 1770, 1773, 2008, 1773, 1774, 1777, 2008, 1777,
     1778, 1781, 2008, 1781, 1782, 1785, 2008, 1785, 1786, 1789,
     2008, 1789, 1790, 1793, 2008, 1793, 1794, 1797, 2008, 1797,
     1798, 1801, 2008, 1801, 1802, 1805, 2008, 1805, 1806, 1809,
     2008, 1809, 1810, 1813, 2008, 1813, 1814, 1817, 2008, 1817,

     1818, 1821, 2008, 1821, 1822, 1825, 2008, 1825, 1826, 1829,
     2008, 1829, 1830, 1833, 2008, 1833, 1834, 1837, 2008, 1837,
     1838, 1841, 2008, 1841, 1842, 1845, 2008, 1845, 1846, 1849,
     2008, 1849, 1850, 1853, 2008, 1853, 1854, 1857, 2008, 1857,
     1858, 1861, 2008, 1861, 1862, 1865, 2008, 1865, 1866, 1869,
     2008, 1869, 1870, 1873, 2008, 1873, 1874, 1877, 2008, 1877,
     1878, 1881, 2008, 1881, 1882, 1885, 2008, 1885, 1886, 1889,
     2008, 1889, 1890, 1893, 2008, 1893, 1894, 1897, 2008, 1897,
     1898, 1901, 2008, 1901, 1902, 1905, 2008, 1905, 1906, 1909,
     2008, 1909, 1910, 1913, 2008, 1913, 1914, 1917, 2008, 1917,

     1918, 1921, 2008, 1921, 1922, 1925, 2008, 1925, 1926, 1929,
     2008, 1929, 1930, 1933, 2008, 1933, 1934, 1937, 2008, 1937,
     1938, 1941, 2008, 1941, 1942, 1945, 2008, 1945, 1946, 1949,
     2008, 1949, 1950, 1953, 2008, 1953, 1954, 1957, 2008, 1957,
     1958, 1961, 2008, 1961, 1962, 1965, 2008, 1965, 1966, 1969,
     2008, 1969, 1970, 1973, 2008, 1973, 1974, 1977, 2008, 1977,
     1978, 1981, 2008, 1981, 1982, 1985, 2008, 1985, 1986, 1989,
     2008, 1989, 1990, 1993, 2008, 1993, 1994, 1997, 2008, 1997,
     1998, 2001, 2008, 2001, 2002, 2005, 2008, 2005, 2006,  226,
     2008,  226,  169,  226, 2008,  226,  169,  226, 2008,  226,

      169,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  109,  109,  109,

      109,  109,  109,  109,  109,  109,  109,  109,  109,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  174,  174, 2008,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  181, 2008,  181, 2008, 2008,
     2008, 2008,  181, 2008,  181,  186, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008,  186,  200, 2008,  200, 2008, 2008,
     2008, 2008, 2008, 2008,  200,  200,  204, 2008, 2008,  204,
      204,  204, 2008, 2008,  204,  204,  204,  206,  206, 2008,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  209,

      209, 2008,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  210,  210, 2008,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  215,  215, 2008,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  218,  218, 2008,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  221,  221, 2008,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  222,
      222, 2008,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  225,  225, 2008,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  227,  227, 2008,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  230,  230, 2008,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  231,  231, 2008,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  234,
      234, 2008,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  236,  236, 2008,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  239,  239, 2008,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  241,  241, 2008,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  244,  244, 2008,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  246,
      246, 2008,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  249,  249, 2008,  249,  249,  249,  249,  249,  249,

      249,  249,  249,  267, 2008,  267, 2008,  267,  267,  267,
     2008,  267,  267,  267,  275, 2008, 2008,  275, 2008,  275,
     2008,  275,  275,  275,  275,  288, 2008, 2008, 2008, 2008,
     2008,  288, 2008,  288,  297, 2008,  297, 2008, 2008, 2008,
     2008, 2008, 2008,  297,  297,  301, 2008, 2008,  301,  301,
      301, 2008, 2008,  301,  301,  301,  324, 2008,  324, 2008,
     2008, 2008, 2008, 2008, 2008,  324,  324,  327, 2008, 2008,
      327,  327,  327, 2008, 2008,  327,  327,  327,  329, 2008,
      329, 2008, 2008, 2008, 2008, 2008, 2008,  329,  329,  332,
     2008, 2008,  332,  332,  332, 2008, 2008,  332,  332,  332,

      358,  358, 2008,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  361,  361, 2008,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  174,  174, 2008,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  181, 2008,  181, 2008,
     2008, 2008, 2008,  181, 2008,  181,  186, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008,  186,  370,  370, 2008, 2008,
      370,  200, 2008,  200, 2008, 2008, 2008, 2008, 2008, 2008,
      200,  200,  204, 2008, 2008,  204,  204,  204, 2008, 2008,
      204,  204,  204,  372,  372, 2008,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  375,  375, 2008,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  376,  376, 2008,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  381,
      381, 2008,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  386,  386, 2008,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  389,  389, 2008,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  390,  390, 2008,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  393,  393, 2008,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  394,
      394, 2008,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  397,  397, 2008,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  398,  398, 2008,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  401,  401, 2008,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  403,  403, 2008,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  406,
      406, 2008,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  408,  408, 2008,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  411,  411, 2008,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  413,  413, 2008,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  416,  416, 2008,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  267,

     2008,  267, 2008,  267,  267,  267, 2008,  267,  267,  267,
      275, 2008, 2008,  275, 2008,  275, 2008,  275,  275,  275,
      275,  426,  426, 2008, 2008,  426,  288, 2008, 2008, 2008,
     2008, 2008,  288, 2008,  288,  434,  434, 2008, 2008,  434,
      297, 2008,  297, 2008, 2008, 2008, 2008, 2008, 2008,  297,
      297,  301, 2008, 2008,  301,  301,  301, 2008, 2008,  301,
      301,  301,  442,  442, 2008, 2008,  442,  445,  445, 2008,
     2008,  445,  324, 2008,  324, 2008, 2008, 2008, 2008, 2008,
     2008,  324,  324,  327, 2008, 2008,  327,  327,  327, 2008,
     2008,  327,  327,  327,  329, 2008,  329, 2008, 2008, 2008,

     2008, 2008, 2008,  329,  329,  332, 2008, 2008,  332,  332,
      332, 2008, 2008,  332,  332,  332,  449,  449, 2008, 2008,
      449,  358,  358, 2008,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  361,  361, 2008,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  463,  463, 2008, 2008,  463,
      370, 2008, 2008, 2008, 2008, 2008, 2008,  370,  370,  204,
     2008, 2008,  204,  204,  204, 2008, 2008,  204,  204,  204,
      465,  465, 2008,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  468,  468, 2008,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  469,  469, 2008,  469,  469,  469,

      469,  469,  469,  469,  469,  469,  474,  474, 2008,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  481,  481,
     2008,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      484,  484, 2008,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  485,  485, 2008,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  488,  488, 2008,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  489,  489, 2008,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  492,  492,
     2008,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      493,  493, 2008,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  496,  496, 2008,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  497,  497, 2008,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  500,  500, 2008,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  502,  502,
     2008,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      505,  505, 2008,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  507,  507, 2008,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  510,  510, 2008,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  519,  519, 2008, 2008,
      519,  426, 2008, 2008, 2008, 2008, 2008, 2008, 2008,  426,

      521,  521, 2008, 2008,  521,  434, 2008, 2008, 2008, 2008,
     2008, 2008, 2008,  434,  529,  529, 2008, 2008,  529,  442,
     2008, 2008, 2008, 2008, 2008, 2008,  442,  442,  531,  531,
     2008, 2008,  531,  445, 2008, 2008, 2008, 2008, 2008, 2008,
     2008,  445,  533,  533, 2008, 2008,  533,  449, 2008, 2008,
     2008, 2008, 2008, 2008,  449,  449,  463, 2008, 2008, 2008,
     2008, 2008, 2008,  463,  463,  549,  549, 2008,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  552,  552, 2008,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  553,
      553, 2008,  553,  553,  553,  553,  553,  553,  553,  553,

      553,  558,  558, 2008,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  567,  567, 2008,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  570,  570, 2008,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  571,  571, 2008,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  574,
      574, 2008,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  575,  575, 2008,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  578,  578, 2008,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  579,  579, 2008,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  582,  582, 2008,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  583,
      583, 2008,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  586,  586, 2008,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  588,  588, 2008,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  591,  591, 2008,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  593,  593, 2008,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  596,
      596, 2008,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  519, 2008, 2008, 2008, 2008, 2008, 2008, 2008,  519,
      521, 2008, 2008, 2008, 2008, 2008, 2008, 2008,  521,  610,

      610, 2008, 2008,  610,  529, 2008, 2008, 2008, 2008, 2008,
     2008,  529,  529,  531, 2008, 2008, 2008, 2008, 2008, 2008,
     2008,  531,  533, 2008, 2008, 2008, 2008, 2008, 2008,  533,
      533,  624,  624, 2008,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  627,  627, 2008,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  628,  628, 2008,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  633,  633, 2008,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  643,
      643, 2008,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  646,  646, 2008,  646,  646,  646,  646,  646,  646,

      646,  646,  646,  647,  647, 2008,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  650,  650, 2008,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  651,  651, 2008,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  654,
      654, 2008,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  174,  174, 2008,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  655,  655, 2008,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  658,  658, 2008,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  660,  660, 2008,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  663,

      663, 2008,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  665,  665, 2008,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  668,  668, 2008,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  677,  677, 2008, 2008,  677,
      610, 2008, 2008, 2008, 2008, 2008, 2008, 2008,  610,  691,
      691, 2008,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  694,  694, 2008,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  695,  695, 2008,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  700,  700, 2008,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  711,  711, 2008,

      711,  711,  711,  711,  711,  711,  711,  711,  711,  714,
      714, 2008,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  715,  715, 2008,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  718,  718, 2008,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  719,  719, 2008,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  722,  722, 2008,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  723,
      723, 2008,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  726,  726, 2008,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  727,  727, 2008,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  730,  730, 2008,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  677, 2008, 2008,
     2008, 2008, 2008, 2008, 2008,  677,  738,  738, 2008, 2008,
      738,  743,  743, 2008,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  746,  746, 2008,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  747,  747, 2008,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  752,  752, 2008,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  764,
      764, 2008,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  767,  767, 2008,  767,  767,  767,  767,  767,  767,

      767,  767,  767,  768,  768, 2008,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  771,  771, 2008,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  772,  772, 2008,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  775,
      775, 2008,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  776,  776, 2008,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  779,  779, 2008,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  780,  780, 2008,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  783,  783, 2008,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  790,

      790, 2008, 2008,  790,  738, 2008, 2008, 2008, 2008, 2008,
     2008, 2008,  738,  794,  794, 2008,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  797,  797, 2008,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  798,  798, 2008,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  803,
      803, 2008,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  816,  816, 2008,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  819,  819, 2008,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  820,  820, 2008,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  823,  823, 2008,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  824,
      824, 2008,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  827,  827, 2008,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  828,  828, 2008,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  831,  831, 2008,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  832,  832, 2008,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  835,
      835, 2008,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  790, 2008, 2008, 2008, 2008, 2008, 2008, 2008,  790,
      840,  840, 2008,  840,  840,  840,  840,  840,  840,  840,

      840,  840,  843,  843, 2008,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  844,  844, 2008,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  849,  849, 2008,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  862,  862,
     2008,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      865,  865, 2008,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  866,  866, 2008,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  869,  869, 2008,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  870,  870, 2008,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  873,  873,

     2008,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      874,  874, 2008,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  877,  877, 2008,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  878,  878, 2008,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  881,  881, 2008,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  885,  885,
     2008,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      888,  888, 2008,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  889,  889, 2008,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  894,  894, 2008,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  907,  907, 2008,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  910,  910,
     2008,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      911,  911, 2008,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  914,  914, 2008,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  915,  915, 2008,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  918,  918, 2008,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  919,  919,
     2008,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      922,  922, 2008,  922,  922,  922,  922,  922,  922,  922,

      922,  922,  923,  923, 2008,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  926,  926, 2008,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  928,  928, 2008,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  931,  931,
     2008,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      932,  932, 2008,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  937,  937, 2008,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  950,  950, 2008,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  953,  953, 2008,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  954,  954,

     2008,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      957,  957, 2008,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  958,  958, 2008,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  961,  961, 2008,  961,  961,  961,
      961,  961,  961,  961,  961,  961,  962,  962, 2008,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  965,  965,
     2008,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      966,  966, 2008,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  969,  969, 2008,  969,  969,  969,  969,  969,
      969,  969,  969,  969,  971,  971, 2008,  971,  971,  971,

      971,  971,  971,  971,  971,  971,  974,  974, 2008,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  975,  975,
     2008,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      980,  980, 2008,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  993,  993, 2008,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  996,  996, 2008,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  997,  997, 2008,  997,
      997,  997,  997,  997,  997,  997,  997,  997, 1000, 1000,
     2008, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1001, 1001, 2008, 1001, 1001, 1001, 1001, 1001, 1001, 1001,

     1001, 1001, 1004, 1004, 2008, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1005, 1005, 2008, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1008, 1008, 2008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1009, 1009,
     2008, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1012, 1012, 2008, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1013, 1013, 2008, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1016, 1016, 2008, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1017, 1017, 2008, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1022, 1022,

     2008, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1035, 1035, 2008, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1038, 1038, 2008, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1039, 1039, 2008, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1042, 1042, 2008, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1043, 1043,
     2008, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1046, 1046, 2008, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1047, 1047, 2008, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1050, 1050, 2008, 1050, 1050, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1051, 1051, 2008, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1054, 1054,
     2008, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1055, 1055, 2008, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1058, 1058, 2008, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1059, 1059, 2008, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1064, 1064, 2008, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1077, 1077,
     2008, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1080, 1080, 2008, 1080, 1080, 1080, 1080, 1080, 1080, 1080,

     1080, 1080, 1081, 1081, 2008, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1084, 1084, 2008, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1085, 1085, 2008, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1088, 1088,
     2008, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1089, 1089, 2008, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1092, 1092, 2008, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1093, 1093, 2008, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1096, 1096, 2008, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1097, 1097,

     2008, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1100, 1100, 2008, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1101, 1101, 2008, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1106, 1106, 2008, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1119, 1119, 2008, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1122, 1122,
     2008, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1123, 1123, 2008, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1126, 1126, 2008, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1127, 1127, 2008, 1127, 1127, 1127,

     1127, 1127, 1127, 1127, 1127, 1127, 1130, 1130, 2008, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1131, 1131,
     2008, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1134, 1134, 2008, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1135, 1135, 2008, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1138, 1138, 2008, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1139, 1139, 2008, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1142, 1142,
     2008, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1143, 1143, 2008, 1143, 1143, 1143, 1143, 1143, 1143, 1143,

     1143, 1143, 1148, 1148, 2008, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1161, 1161, 2008, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1164, 1164, 2008, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1165, 1165,
     2008, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1168, 1168, 2008, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1169, 1169, 2008, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1172, 1172, 2008, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1173, 1173, 2008, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1176, 1176,

     2008, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1177, 1177, 2008, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1180, 1180, 2008, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1181, 1181, 2008, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1184, 1184, 2008, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1185, 1185,
     2008, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1190, 1190, 2008, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1203, 1203, 2008, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1206, 1206, 2008, 1206, 1206, 1206,

     1206, 1206, 1206, 1206, 1206, 1206, 1207, 1207, 2008, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1210, 1210,
     2008, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1211, 1211, 2008, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1214, 1214, 2008, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1215, 1215, 2008, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1218, 1218, 2008, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1219, 1219,
     2008, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1222, 1222, 2008, 1222, 1222, 1222, 1222, 1222, 1222, 1222,

     1222, 1222, 1223, 1223, 2008, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1226, 1226, 2008, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226,  174,  174, 2008,  174,
      174,  174,  174,  174,  174,  174,  174,  174, 1232, 1232,
     2008, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1235, 1235, 2008, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1236, 1236, 2008, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1239, 1239, 2008, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1240, 1240, 2008, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1243, 1243,

     2008, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1244, 1244, 2008, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1247, 1247, 2008, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1248, 1248, 2008, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1251, 1251, 2008, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1252, 1252,
     2008, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1255, 1255, 2008, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1256, 1256, 2008, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1259, 1259, 2008, 1259, 1259, 1259,

     1259, 1259, 1259, 1259, 1259, 1259, 1260, 1260, 2008, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1263, 1263,
     2008, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1264, 1264, 2008, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1267, 1267, 2008, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1268, 1268, 2008, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1271, 1271, 2008, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1272, 1272,
     2008, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1275, 1275, 2008, 1275, 1275, 1275, 1275, 1275, 1275, 1275,

     1275, 1275, 1276, 1276, 2008, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1279, 1279, 2008, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1280, 1280, 2008, 1280,
     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1283, 1283,
     2008, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1284, 1284, 2008, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
     1284, 1284, 1287, 1287, 2008, 1287, 1287, 1287, 1287, 1287,
     1287, 1287, 1287, 1287, 1288, 1288, 2008, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1291, 1291, 2008, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1292, 1292,

     2008, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1295, 1295, 2008, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1296, 1296, 2008, 1296, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1299, 1299, 2008, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1300, 1300, 2008, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1303, 1303,
     2008, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1304, 1304, 2008, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1307, 1307, 2008, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1308, 1308, 2008, 1308, 1308, 1308,

     1308, 1308, 1308, 1308, 1308, 1308, 1311, 1311, 2008, 1311,
     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1312, 1312,
     2008, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1315, 1315, 2008, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1316, 1316, 2008, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1319, 1319, 2008, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1320, 1320, 2008, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1323, 1323,
     2008, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323,
     1324, 1324, 2008, 1324, 1324, 1324, 1324, 1324, 1324, 1324,

     1324, 1324, 1327, 1327, 2008, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1328, 1328, 2008, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1331, 1331, 2008, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1332, 1332,
     2008, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1335, 1335, 2008, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1336, 1336, 2008, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1339, 1339, 2008, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1340, 1340, 2008, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1343, 1343,

     2008, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1344, 1344, 2008, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1347, 1347, 2008, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1348, 1348, 2008, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1351, 1351, 2008, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1352, 1352,
     2008, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1355, 1355, 2008, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1356, 1356, 2008, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1359, 1359, 2008, 1359, 1359, 1359,

     1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360, 2008, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1363, 1363,
     2008, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1364, 1364, 2008, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1367, 1367, 2008, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1368, 1368, 2008, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1371, 1371, 2008, 1371,
     1371, 1371, 1371, 1371, 1371, 1371, 1371, 1371, 1372, 1372,
     2008, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1375, 1375, 2008, 1375, 1375, 1375, 1375, 1375, 1375, 1375,

     1375, 1375, 1376, 1376, 2008, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1379, 1379, 2008, 1379, 1379, 1379,
     1379, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 2008, 1380,
     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1383, 1383,
     2008, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1384, 1384, 2008, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1387, 1387, 2008, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1388, 1388, 2008, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1391, 1391, 2008, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1392, 1392,

     2008, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1395, 1395, 2008, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1396, 1396, 2008, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1399, 1399, 2008, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1400, 1400, 2008, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1403, 1403,
     2008, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1404, 1404, 2008, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1407, 1407, 2008, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1408, 1408, 2008, 1408, 1408, 1408,

     1408, 1408, 1408, 1408, 1408, 1408, 1411, 1411, 2008, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1412, 1412,
     2008, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1415, 1415, 2008, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1416, 1416, 2008, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1419, 1419, 2008, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1420, 1420, 2008, 1420,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1423, 1423,
     2008, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1424, 1424, 2008, 1424, 1424, 1424, 1424, 1424, 1424, 1424,

     1424, 1424, 1427, 1427, 2008, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1428, 1428, 2008, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1431, 1431, 2008, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1432, 1432,
     2008, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1435, 1435, 2008, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1436, 1436, 2008, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1436, 1436, 1439, 1439, 2008, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439,  174,  174, 2008,  174,
      174,  174,  174,  174,  174,  174,  174,  174, 1440, 1440,

     2008, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440, 1440,
     1443, 1443, 2008, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1444, 1444, 2008, 1444, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1444, 1447, 1447, 2008, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1448, 1448, 2008, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1451, 1451,
     2008, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1452, 1452, 2008, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1455, 1455, 2008, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1456, 1456, 2008, 1456, 1456, 1456,

     1456, 1456, 1456, 1456, 1456, 1456, 1459, 1459, 2008, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1460, 1460,
     2008, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1463, 1463, 2008, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1464, 1464, 2008, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1467, 1467, 2008, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1468, 1468, 2008, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1471, 1471,
     2008, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1472, 1472, 2008, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1475, 1475, 2008, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1476, 1476, 2008, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1479, 1479, 2008, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1480, 1480,
     2008, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480, 1480,
     1483, 1483, 2008, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1484, 1484, 2008, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1487, 1487, 2008, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1488, 1488, 2008, 1488,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1491, 1491,

     2008, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1492, 1492, 2008, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1495, 1495, 2008, 1495, 1495, 1495, 1495, 1495,
     1495, 1495, 1495, 1495, 1496, 1496, 2008, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1496, 1496, 1499, 1499, 2008, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1500, 1500,
     2008, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1503, 1503, 2008, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1503, 1504, 1504, 2008, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1507, 1507, 2008, 1507, 1507, 1507,

     1507, 1507, 1507, 1507, 1507, 1507, 1508, 1508, 2008, 1508,
     1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1511, 1511,
     2008, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1512, 1512, 2008, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1515, 1515, 2008, 1515, 1515, 1515, 1515, 1515,
     1515, 1515, 1515, 1515, 1516, 1516, 2008, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1519, 1519, 2008, 1519,
     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1520, 1520,
     2008, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1523, 1523, 2008, 1523, 1523, 1523, 1523, 1523, 1523, 1523,

     1523, 1523, 1524, 1524, 2008, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1527, 1527, 2008, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1528, 1528, 2008, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1531, 1531,
     2008, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,
     1532, 1532, 2008, 1532, 1532, 1532, 1532, 1532, 1532, 1532,
     1532, 1532, 1535, 1535, 2008, 1535, 1535, 1535, 1535, 1535,
     1535, 1535, 1535, 1535, 1536, 1536, 2008, 1536, 1536, 1536,
     1536, 1536, 1536, 1536, 1536, 1536, 1539, 1539, 2008, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1540, 1540,

     2008, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1543, 1543, 2008, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1544, 1544, 2008, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1547, 1547, 2008, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1548, 1548, 2008, 1548,
     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1551, 1551,
     2008, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1552, 1552, 2008, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1555, 1555, 2008, 1555, 1555, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1556, 1556, 2008, 1556, 1556, 1556,

     1556, 1556, 1556, 1556, 1556, 1556, 1559, 1559, 2008, 1559,
     1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1560, 1560,
     2008, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1563, 1563, 2008, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563, 1563, 1564, 1564, 2008, 1564, 1564, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1567, 1567, 2008, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1568, 1568, 2008, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1571, 1571,
     2008, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1572, 1572, 2008, 1572, 1572, 1572, 1572, 1572, 1572, 1572,

     1572, 1572, 1575, 1575, 2008, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1575, 1575, 1576, 1576, 2008, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1579, 1579, 2008, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1580, 1580,
     2008, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,
     1583, 1583, 2008, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1584, 1584, 2008, 1584, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1587, 1587, 2008, 1587, 1587, 1587,
     1587, 1587, 1587, 1587, 1587, 1587, 1588, 1588, 2008, 1588,
     1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1591, 1591,

     2008, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1592, 1592, 2008, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1595, 1595, 2008, 1595, 1595, 1595, 1595, 1595,
     1595, 1595, 1595, 1595, 1596, 1596, 2008, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1599, 1599, 2008, 1599,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1600, 1600,
     2008, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600,
     1603, 1603, 2008, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1604, 1604, 2008, 1604, 1604, 1604, 1604, 1604,
     1604, 1604, 1604, 1604, 1607, 1607, 2008, 1607, 1607, 1607,

     1607, 1607, 1607, 1607, 1607, 1607, 1608, 1608, 2008, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1611, 1611,
     2008, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611,
     1612, 1612, 2008, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1615, 1615, 2008, 1615, 1615, 1615, 1615, 1615,
     1615, 1615, 1615, 1615, 1616, 1616, 2008, 1616, 1616, 1616,
     1616, 1616, 1616, 1616, 1616, 1616, 1619, 1619, 2008, 1619,
     1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1620, 1620,
     2008, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     1623, 1623, 2008, 1623, 1623, 1623, 1623, 1623, 1623, 1623,

     1623, 1623, 1624, 1624, 2008, 1624, 1624, 1624, 1624, 1624,
     1624, 1624, 1624, 1624, 1627, 1627, 2008, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1628, 1628, 2008, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1631, 1631,
     2008, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
     1632, 1632, 2008, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1632, 1635, 1635, 2008, 1635, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635, 1636, 1636, 2008, 1636, 1636, 1636,
     1636, 1636, 1636, 1636, 1636, 1636, 1639, 1639, 2008, 1639,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1640, 1640,

     2008, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640, 1640,
     1643, 1643, 2008, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643, 1644, 1644, 2008, 1644, 1644, 1644, 1644, 1644,
     1644, 1644, 1644, 1644, 1647, 1647, 2008, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1648, 1648, 2008, 1648,
     1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1651, 1651,
     2008, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651,
     1652, 1652, 2008, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
     1652, 1652, 1655, 1655, 2008, 1655, 1655, 1655, 1655, 1655,
     1655, 1655, 1655, 1655, 1656, 1656, 2008, 1656, 1656, 1656,

     1656, 1656, 1656, 1656, 1656, 1656, 1659, 1659, 2008, 1659,
     1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1660, 1660,
     2008, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660, 1660,
     1663, 1663, 2008, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
     1663, 1663, 1664, 1664, 2008, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1664, 1667, 1667, 2008, 1667, 1667, 1667,
     1667, 1667, 1667, 1667, 1667, 1667, 1668, 1668, 2008, 1668,
     1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1671, 1671,
     2008, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671,
     1672, 1672, 2008, 1672, 1672, 1672, 1672, 1672, 1672, 1672,

     1672, 1672, 1675, 1675, 2008, 1675, 1675, 1675, 1675, 1675,
     1675, 1675, 1675, 1675, 1676, 1676, 2008, 1676, 1676, 1676,
     1676, 1676, 1676, 1676, 1676, 1676, 1679, 1679, 2008, 1679,
     1679, 1679, 1679, 1679, 1679, 1679, 1679, 1679, 1680, 1680,
     2008, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680,
     1683, 1683, 2008, 1683, 1683, 1683, 1683, 1683, 1683, 1683,
     1683, 1683, 1684, 1684, 2008, 1684, 1684, 1684, 1684, 1684,
     1684, 1684, 1684, 1684, 1687, 1687, 2008, 1687, 1687, 1687,
     1687, 1687, 1687, 1687, 1687, 1687, 1688, 1688, 2008, 1688,
     1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1691, 1691,

     2008, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
     1692, 1692, 2008, 1692, 1692, 1692, 1692, 1692, 1692, 1692,
     1692, 1692, 1695, 1695, 2008, 1695, 1695, 1695, 1695, 1695,
     1695, 1695, 1695, 1695, 1696, 1696, 2008, 1696, 1696, 1696,
     1696, 1696, 1696, 1696, 1696, 1696, 1699, 1699, 2008, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1700, 1700,
     2008, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700, 1700,
     1703, 1703, 2008, 1703, 1703, 1703, 1703, 1703, 1703, 1703,
     1703, 1703, 1704, 1704, 2008, 1704, 1704, 1704, 1704, 1704,
     1704, 1704, 1704, 1704, 1707, 1707, 2008, 1707, 1707, 1707,

     1707, 1707, 1707, 1707, 1707, 1707, 1708, 1708, 2008, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1711, 1711,
     2008, 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711,
     1712, 1712, 2008, 1712, 1712, 1712, 1712, 1712, 1712, 1712,
     1712, 1712, 1715, 1715, 2008, 1715, 1715, 1715, 1715, 1715,
     1715, 1715, 1715, 1715, 1716, 1716, 2008, 1716, 1716, 1716,
     1716, 1716, 1716, 1716, 1716, 1716, 1719, 1719, 2008, 1719,
     1719, 1719, 1719, 1719, 1719, 1719, 1719, 1719, 1720, 1720,
     2008, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720,
     1723, 1723, 2008, 1723, 1723, 1723, 1723, 1723, 1723, 1723,

     1723, 1723, 1724, 1724, 2008, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1727, 1727, 2008, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1728, 1728, 2008, 1728,
     1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1731, 1731,
     2008, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
     1732, 1732, 2008, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1735, 1735, 2008, 1735, 1735, 1735, 1735, 1735,
     1735, 1735, 1735, 1735, 1736, 1736, 2008, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1739, 1739, 2008, 1739,
     1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1740, 1740,

     2008, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740, 1740,
     1743, 1743, 2008, 1743, 1743, 1743, 1743, 1743, 1743, 1743,
     1743, 1743, 1744, 1744, 2008, 1744, 1744, 1744, 1744, 1744,
     1744, 1744, 1744, 1744, 1747, 1747, 2008, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1747, 1748, 1748, 2008, 1748,
     1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1751, 1751,
     2008, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751,
     1752, 1752, 2008, 1752, 1752, 1752, 1752, 1752, 1752, 1752,
     1752, 1752, 1755, 1755, 2008, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755, 1755, 1756, 1756, 2008, 1756, 1756, 1756,

     1756, 1756, 1756, 1756, 1756, 1756, 1759, 1759, 2008, 1759,
     1759, 1759, 1759, 1759, 1759, 1759, 1759, 1759, 1760, 1760,
     2008, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760,
     1763, 1763, 2008, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
     1763, 1763, 1764, 1764, 2008, 1764, 1764, 1764, 1764, 1764,
     1764, 1764, 1764, 1764, 1767, 1767, 2008, 1767, 1767, 1767,
     1767, 1767, 1767, 1767, 1767, 1767, 1768, 1768, 2008, 1768,
     1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1771, 1771,
     2008, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771,
     1772, 1772, 2008, 1772, 1772, 1772, 1772, 1772, 1772, 1772,

     1772, 1772, 1775, 1775, 2008, 1775, 1775, 1775, 1775, 1775,
     1775, 1775, 1775, 1775, 1776, 1776, 2008, 1776, 1776, 1776,
     1776, 1776, 1776, 1776, 1776, 1776, 1779, 1779, 2008, 1779,
     1779, 1779, 1779, 1779, 1779, 1779, 1779, 1779, 1780, 1780,
     2008, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780,
     1783, 1783, 2008, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1784, 1784, 2008, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1787, 1787, 2008, 1787, 1787, 1787,
     1787, 1787, 1787, 1787, 1787, 1787, 1788, 1788, 2008, 1788,
     1788, 1788, 1788, 1788, 1788, 1788, 1788, 1788, 1791, 1791,

     2008, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1792, 1792, 2008, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1795, 1795, 2008, 1795, 1795, 1795, 1795, 1795,
     1795, 1795, 1795, 1795, 1796, 1796, 2008, 1796, 1796, 1796,
     1796, 1796, 1796, 1796, 1796, 1796, 1799, 1799, 2008, 1799,
     1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1800, 1800,
     2008, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800,
     1803, 1803, 2008, 1803, 1803, 1803, 1803, 1803, 1803, 1803,
     1803, 1803, 1804, 1804, 2008, 1804, 1804, 1804, 1804, 1804,
     1804, 1804, 1804, 1804, 1807, 1807, 2008, 1807, 1807, 1807,

     1807, 1807, 1807, 1807, 1807, 1807, 1808, 1808, 2008, 1808,
     1808, 1808, 1808, 1808, 1808, 1808, 1808, 1808, 1811, 1811,
     2008, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811, 1811,
     1812, 1812, 2008, 1812, 1812, 1812, 1812, 1812, 1812, 1812,
     1812, 1812, 1815, 1815, 2008, 1815, 1815, 1815, 1815, 1815,
     1815, 1815, 1815, 1815, 1816, 1816, 2008, 1816, 1816, 1816,
     1816, 1816, 1816, 1816, 1816, 1816, 1819, 1819, 2008, 1819,
     1819, 1819, 1819, 1819, 1819, 1819, 1819, 1819, 1820, 1820,
     2008, 1820, 1820, 1820, 1820, 1820, 1820, 1820, 1820, 1820,
     1823, 1823, 2008, 1823, 1823, 1823, 1823, 1823, 1823, 1823,

     1823, 1823, 1824, 1824, 2008, 1824, 1824, 1824, 1824, 1824,
     1824, 1824, 1824, 1824, 1827, 1827, 2008, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1828, 1828, 2008, 1828,
     1828, 1828, 1828, 1828, 1828, 1828, 1828, 1828, 1831, 1831,
     2008, 1831, 1831, 1831, 1831, 1831, 1831, 1831, 1831, 1831,
     1832, 1832, 2008, 1832, 1832, 1832, 1832, 1832, 1832, 1832,
     1832, 1832, 1835, 1835, 2008, 1835, 1835, 1835, 1835, 1835,
     1835, 1835, 1835, 1835, 1836, 1836, 2008, 1836, 1836, 1836,
     1836, 1836, 1836, 1836, 1836, 1836, 1839, 1839, 2008, 1839,
     1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1840, 1840,

     2008, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840, 1840,
     1843, 1843, 2008, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
     1843, 1843, 1844, 1844, 2008, 1844, 1844, 1844, 1844, 1844,
     1844, 1844, 1844, 1844, 1847, 1847, 2008, 1847, 1847, 1847,
     1847, 1847, 1847, 1847, 1847, 1847, 1848, 1848, 2008, 1848,
     1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1851, 1851,
     2008, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851, 1851,
     1852, 1852, 2008, 1852, 1852, 1852, 1852, 1852, 1852, 1852,
     1852, 1852, 1855, 1855, 2008, 1855, 1855, 1855, 1855, 1855,
     1855, 1855, 1855, 1855, 1856, 1856, 2008, 1856, 1856, 1856,

     1856, 1856, 1856, 1856, 1856, 1856, 1859, 1859, 2008, 1859,
     1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1860, 1860,
     2008, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860, 1860,
     1863, 1863, 2008, 1863, 1863, 1863, 1863, 1863, 1863, 1863,
     1863, 1863, 1864, 1864, 2008, 1864, 1864, 1864, 1864, 1864,
     1864, 1864, 1864, 1864, 1867, 1867, 2008, 1867, 1867, 1867,
     1867, 1867, 1867, 1867, 1867, 1867, 1868, 1868, 2008, 1868,
     1868, 1868, 1868, 1868, 1868, 1868, 1868, 1868, 1871, 1871,
     2008, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871,
     1872, 1872, 2008, 1872, 1872, 1872, 1872, 1872, 1872, 1872,

     1872, 1872, 1875, 1875, 2008, 1875, 1875, 1875, 1875, 1875,
     1875, 1875, 1875, 1875, 1876, 1876, 2008, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1879, 1879, 2008, 1879,
     1879, 1879, 1879, 1879, 1879, 1879, 1879, 1879, 1880, 1880,
     2008, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880,
     1883, 1883, 2008, 1883, 1883, 1883, 1883, 1883, 1883, 1883,
     1883, 1883, 1884, 1884, 2008, 1884, 1884, 1884, 1884, 1884,
     1884, 1884, 1884, 1884, 1887, 1887, 2008, 1887, 1887, 1887,
     1887, 1887, 1887, 1887, 1887, 1887, 1888, 1888, 2008, 1888,
     1888, 1888, 1888, 1888, 1888, 1888, 1888, 1888, 1891, 1891,

     2008, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891,
     1892, 1892, 2008, 1892, 1892, 1892, 1892, 1892, 1892, 1892,
     1892, 1892, 1895, 1895, 2008, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1896, 1896, 2008, 1896, 1896, 1896,
     1896, 1896, 1896, 1896, 1896, 1896, 1899, 1899, 2008, 1899,
     1899, 1899, 1899, 1899, 1899, 1899, 1899, 1899, 1900, 1900,
     2008, 1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900,
     1903, 1903, 2008, 1903, 1903, 1903, 1903, 1903, 1903, 1903,
     1903, 1903, 1904, 1904, 2008, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1907, 1907, 2008, 1907, 1907, 1907,

     1907, 1907, 1907, 1907, 1907, 1907, 1908, 1908, 2008, 1908,
     1908, 1908, 1908, 1908, 1908, 1908, 1908, 1908, 1911, 1911,
     2008, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911,
     1912, 1912, 2008, 1912, 1912, 1912, 1912, 1912, 1912, 1912,
     1912, 1912, 1915, 1915, 2008, 1915, 1915, 1915, 1915, 1915,
     1915, 1915, 1915, 1915, 1916, 1916, 2008, 1916, 1916, 1916,
     1916, 1916, 1916, 1916, 1916, 1916, 1919, 1919, 2008, 1919,
     1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919, 1920, 1920,
     2008, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1923, 1923, 2008, 1923, 1923, 1923, 1923, 1923, 1923, 1923,

     1923, 1923, 1924, 1924, 2008, 1924, 1924, 1924, 1924, 1924,
     1924, 1924, 1924, 1924, 1927, 1927, 2008, 1927, 1927, 1927,
     1927, 1927, 1927, 1927, 1927, 1927, 1928, 1928, 2008, 1928,
     1928, 1928, 1928, 1928, 1928, 1928, 1928, 1928, 1931, 1931,
     2008, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931,
     1932, 1932, 2008, 1932, 1932, 1932, 1932, 1932, 1932, 1932,
     1932, 1932, 1935, 1935, 2008, 1935, 1935, 1935, 1935, 1935,
     1935, 1935, 1935, 1935, 1936, 1936, 2008, 1936, 1936, 1936,
     1936, 1936, 1936, 1936, 1936, 1936, 1939, 1939, 2008, 1939,
     1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1940, 1940,

     2008, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940, 1940,
     1943, 1943, 2008, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
     1943, 1943, 1944, 1944, 2008, 1944, 1944, 1944, 1944, 1944,
     1944, 1944, 1944, 1944, 1947, 1947, 2008, 1947, 1947, 1947,
     1947, 1947, 1947, 1947, 1947, 1947, 1948, 1948, 2008, 1948,
     1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1951, 1951,
     2008, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951, 1951,
     1952, 1952, 2008, 1952, 1952, 1952, 1952, 1952, 1952, 1952,
     1952, 1952, 1955, 1955, 2008, 1955, 1955, 1955, 1955, 1955,
     1955, 1955, 1955, 1955, 1956, 1956, 2008, 1956, 1956, 1956,

     1956, 1956, 1956, 1956, 1956, 1956, 1959, 1959, 2008, 1959,
     1959, 1959, 1959, 1959, 1959, 1959, 1959, 1959, 1960, 1960,
     2008, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960,
     1963, 1963, 2008, 1963, 1963, 1963, 1963, 1963, 1963, 1963,
     1963, 1963, 1964, 1964, 2008, 1964, 1964, 1964, 1964, 1964,
     1964, 1964, 1964, 1964, 1967, 1967, 2008, 1967, 1967, 1967,
     1967, 1967, 1967, 1967, 1967, 1967, 1968, 1968, 2008, 1968,
     1968, 1968, 1968, 1968, 1968, 1968, 1968, 1968, 1971, 1971,
     2008, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971,
     1972, 1972, 2008, 1972, 1972, 1972, 1972, 1972, 1972, 1972,

     1972, 1972, 1975, 1975, 2008, 1975, 1975, 1975, 1975, 1975,
     1975, 1975, 1975, 1975, 1976, 1976, 2008, 1976, 1976, 1976,
     1976, 1976, 1976, 1976, 1976, 1976, 1979, 1979, 2008, 1979,
     1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979, 1980, 1980,
     2008, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980,
     1983, 1983, 2008, 1983, 1983, 1983, 1983, 1983, 1983, 1983,
     1983, 1983, 1984, 1984, 2008, 1984, 1984, 1984, 1984, 1984,
     1984, 1984, 1984, 1984, 1987, 1987, 2008, 1987, 1987, 1987,
     1987, 1987, 1987, 1987, 1987, 1987, 1988, 1988, 2008, 1988,
     1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1991, 1991,

     2008, 1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991,
     1992, 1992, 2008, 1992, 1992, 1992, 1992, 1992, 1992, 1992,
     1992, 1992, 1995, 1995, 2008, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1996, 1996, 2008, 1996, 1996, 1996,
     1996, 1996, 1996, 1996, 1996, 1996, 1999, 1999, 2008, 1999,
     1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 2000, 2000,
     2008, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000,
     2003, 2003, 2008, 2003, 2003, 2003, 2003, 2003, 2003, 2003,
     2003, 2003, 2004, 2004, 2008, 2004, 2004, 2004, 2004, 2004,
     2004, 2004, 2004, 2004, 2007, 2007, 2008, 2007, 2007, 2007,

     2007, 2007, 2007, 2007, 2007, 2007,  174,  174, 2008,  174,
      174,  174,  174,  174,  174,  174,  174,  174,   61, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008
    } ;

static const flex_int16_t yy_chk[12063] =
    {   0,
        0,    1,    1,    1,    1,    9,    9,    9,    9,   10,
       10,   10,   10,   13,   13,   13,   13,  198,  198,   11,
       11,   11,   11,  272,  272,    1,   12,   12,   12,   12,
       14,   14,   14,   14,  292,  292,    1,    1,    1,    2,
        2,    2,    2,   11,   15,   15,   15,   15, 1229,   71,
       12,   71,  311,  311,   11,   16,   16,   16,   16, 1228,
       72,   12,   72,    2,   19,   19,   19,   19,   20,   20,
       20,   20,  322,  322,    2,    2,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,   21,   21,   21,   21,    5,    5,
        5, 1201,    5,    5,    5,    5,    5,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       17,   17,   17,   17,   22,   22,   22,   22,   23,   23,
       23,   23,   24,   24,   24,   24,   25,   25,   25,   25,

     1200,   79,   17,   79,   79,   17,   26,   26,   26,   26,
       17,   27,   27,   27,   27, 1199,   17,   18,   18,   18,
       18,   28,   28,   28,   28,   29,   29,   29,   29,   30,
       30,   30,   30,   31,   31,   31,   31, 1198,   79,   18,
      342,  342,   18,   32,   32,   32,   32,   18,   33,   33,
       33,   33, 1194,   18,   34,   34,   34,   34,   35,   35,
       35,   35,   36,   36,   36,   36,   37,   37,   37,   37,
       41,   41,   41,   41,   42,   42,   42,   42,   41,  122,
     1192,  122,   42,   59,   59,   59,   59,   80,   37,   80,
       37,  148,   80,  148,   37,   37, 1191,   37,   39,   39,

       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   43,  133,   43,  133,   43,   43,  367,  367,   43,
       43,   43,  133,   43,   43,   43,   43,   43,   43,   43,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   47, 1189,   47,   60,   60,   60,   60,
     1188,   47,   47,   47, 1159,   47,   47,   47,   47,   47,
       49,   76,   49,   76,   76,   76,   76,   76,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   55,   73,   55,   73,   74,  159,   74,
      159,   55,   55,   55, 1158,   55,   55,   55,   55,   55,
       57,   57,   57,   70, 1157,   70,   70,   81,  128,   81,
      128,   57,   81,  128,   70,   83,   73,   83,   83,  128,
     1156,   74,   57,   86,   57,   86,   86,   70,   57,   57,
     1152,   57,   63,   81,   63,   63,  138,  517,  138,   70,
       77,   77,   77,   77,   77, 1150,   91,   86,   91,   91,
       94,  517,   94,   94, 1149,  138,   63,   96,   86,   96,

       96,   99, 1147,   99,   99,  424,  424,   63,   63,   63,
       75, 1146,   75,   75,  102, 1117,  102,  102,   75,   75,
       75,  540,   75,   75,   75,   75,   75,   78,  132,   78,
      132,  104, 1116,  104,  104,  540,  132,   78,   78,   78,
       78,   78,   78,   78,  104,  106, 1115,  106,  106, 1114,
       78,   78,  108, 1110,  108,  108,  110, 1108,  110,  110,
      112, 1107,  112,  112,  114, 1105,  114,  114,   78,  116,
     1104,  116,  116,  117, 1075,  117,  117,  125, 1074,  125,
      125,  125,  125,  125,  126,  126,  126,  126,  126,  135,
      135,  135,  135,  135, 1073,  117,  139,  117,  139,  139,

     1072,  117,  117, 1068,  117,  124, 1066,  124,  124,  150,
     1065,  150,  150,  124,  124,  124, 1063,  124,  124,  124,
      124,  124,  127,  134,  127,  134,  134,  134,  134,  134,
     1062,  180,  127,  180,  127,  127,  127,  127,  127,  181,
     1033,  181,  140, 1032,  140,  127,  127,  140,  140,  142,
     1031,  142,  142,  142,  142,  142,  143,  143,  143,  143,
      143,  429,  429,  127,  130, 1030,  130,  130,  152,  130,
      152,  152,  130,  130,  130, 1026,  130,  130,  130,  130,
      130,  130,  130,  136,  146,  136,  146,  146,  146,  146,
      146, 1024,  183,  136,  183,  136,  136,  136,  136,  136,

      147,  147,  147,  147,  147, 1023,  136,  136,  151,  153,
      151,  153, 1021,  151,  153,  155, 1020,  155,  155,  155,
      155,  155,  439,  439,  136,  141,  183,  141,  141,  184,
      163,  184,  163,  141,  141,  141,  163,  141,  141,  141,
      141,  141,  144,  991,  144,  156,  156,  156,  156,  156,
      443,  443,  144,  144,  144,  144,  144,  144,  144,  166,
      990,  166,  166,  446,  446,  144,  144,  185,  989,  185,
      182,  186,  182,  186,  191,  191,  191,  191,  191,  195,
      188,  195,  188,  144,  145,  988,  145,  145,  984,  187,
      195,  187,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  149,  182,  149,  188,  197,  202,  197,  202,  526,
      526,  149,  187,  149,  149,  149,  149,  149,  200,  207,
      200,  207,  207,  200,  149,  149,  199,  982,  199,  199,
      179,  981,  179,  179,  190,  979,  190,  190,  190,  190,
      190,  179,  149,  154,  978,  154,  154,  219,  948,  219,
      219,  154,  154,  154,  179,  154,  154,  154,  154,  154,
      157,  947,  157,  199,  946,  211,  179,  211,  211,  945,
      157,  157,  157,  157,  157,  157,  157,  201,  223,  201,
      223,  223,  201,  157,  157,  204,  205,  204,  205,  211,
      204,  205,  226,  941,  226,  226,  228,  939,  228,  228,

      211,  157,  158,  201,  158,  158,  232,  938,  232,  232,
      205,  936,  235,  158,  235,  237,  935,  237,  237,  240,
      905,  240,  240,  904,  158,  242,  158,  242,  242,  903,
      158,  158,  902,  158,  168,  898,  168,  168,  245,  896,
      245,  245,  247,  895,  247,  247,  250,  893,  250,  250,
      255,  264,  255,  264,  264,  264,  264,  264,  168,  265,
      265,  265,  265,  265,  270,  273,  270,  273,  892,  168,
      168,  168,  189,  882,  189,  189,  273,  276,  860,  276,
      189,  189,  189,  859,  189,  189,  189,  189,  189,  192,
      278,  192,  278,  281,  281,  281,  281,  281,  278,  192,

      192,  192,  192,  192,  192,  192,  267,  284,  267,  284,
      858,  267,  192,  192,  275,  857,  275,  267,  279,  275,
      279,  285,  286,  285,  286,  275,  284,  853,  279,  285,
      192,  193,  280,  193,  280,  280,  280,  280,  280,  605,
      605,  193,  193,  193,  193,  193,  193,  193,  287,  294,
      287,  294,  682,  682,  193,  193,  295,  296,  295,  296,
      296,  297,  298,  297,  298,  851,  297,  297,  298,  310,
      850,  310,  193,  194,  300,  194,  300,  736,  736,  300,
      300,  308,  848,  308,  194,  194,  194,  194,  194,  194,
      847,  837,  308,  301,  814,  301,  194,  194,  301,  301,

      303,  813,  303,  303,  303,  303,  303,  304,  304,  304,
      304,  304,  812,  811,  194,  203,  315,  203,  315,  203,
      203,  319,  807,  319,  203,  805,  203,  203,  314,  314,
      314,  314,  314,  203,  203,  203,  251,  804,  251,  251,
      313,  802,  313,  313,  313,  313,  313,  320,  323,  320,
      323,  323,  324,  325,  324,  325,  801,  324,  251,  793,
      251,  327,  791,  327,  251,  251,  327,  251,  263,  788,
      263,  263,  328,  786,  328,  328,  263,  263,  263,  785,
      263,  263,  263,  263,  263,  266,  329,  266,  329,  763,
      330,  329,  330,  762,  339,  266,  339,  266,  266,  266,

      266,  266,  332,  761,  332,  339,  760,  332,  266,  266,
      334,  756,  334,  334,  334,  334,  334,  335,  335,  335,
      335,  335,  341,  344,  341,  344,  266,  268,  348,  268,
      348,  350,  754,  350,  348,  753,  366,  268,  366,  268,
      268,  268,  268,  268,  359,  751,  359,  359,  750,  742,
      268,  268,  368,  741,  368,  369,  369,  369,  369,  369,
      371,  370,  371,  370,  373,  371,  373,  373,  268,  269,
      739,  269,  370,  377,  735,  377,  377,  384,  402,  384,
      402,  269,  269,  269,  269,  269,  387,  733,  387,  387,
      732,  731,  269,  269,  710,  371,  391,  377,  391,  391,

      395,  709,  395,  395,  399,  708,  399,  399,  377,  704,
      269,  274,  426,  274,  426,  274,  274,  404,  702,  404,
      404,  407,  274,  407,  407,  409,  701,  409,  409,  274,
      274,  274,  277,  699,  277,  277,  412,  277,  412,  412,
      277,  277,  277,  698,  277,  277,  277,  277,  277,  277,
      277,  282,  414,  282,  414,  414,  417,  687,  417,  417,
      427,  282,  427,  282,  282,  282,  282,  282,  425,  425,
      425,  425,  425,  686,  282,  282,  428,  430,  428,  430,
      430,  430,  430,  430,  431,  431,  431,  431,  431,  434,
      684,  434,  282,  288,  674,  288,  433,  433,  433,  433,

      433,  673,  435,  288,  435,  288,  288,  288,  288,  288,
      436,  437,  436,  437,  672,  671,  288,  288,  438,  440,
      438,  440,  670,  642,  438,  441,  441,  441,  441,  441,
      442,  445,  442,  445,  288,  289,  447,  289,  447,  641,
      637,  442,  444,  444,  444,  444,  444,  289,  289,  289,
      289,  289,  448,  448,  448,  448,  448,  635,  289,  289,
      449,  450,  449,  450,  457,  458,  457,  458,  459,  634,
      459,  449,  461,  464,  461,  464,  289,  290,  464,  290,
      462,  462,  462,  462,  462,  290,  290,  290,  457,  290,
      290,  290,  290,  290,  299,  459,  299,  632,  299,  299,

      631,  620,  458,  299,  464,  299,  299,  477,  463,  477,
      463,  619,  299,  299,  299,  302,  617,  302,  302,  463,
      479,  615,  479,  302,  302,  302,  611,  302,  302,  302,
      302,  302,  305,  466,  305,  466,  466,  470,  603,  470,
      470,  602,  305,  305,  305,  305,  305,  305,  305,  482,
      601,  482,  482,  600,  599,  305,  305,  480,  598,  480,
      486,  470,  486,  486,  490,  566,  490,  490,  494,  562,
      494,  494,  470,  305,  306,  498,  306,  498,  498,  501,
      560,  501,  501,  559,  306,  306,  306,  306,  306,  306,
      306,  557,  556,  501,  480,  547,  546,  306,  306,  503,

      544,  503,  503,  519,  506,  519,  506,  506,  508,  542,
      508,  508,  521,  535,  521,  306,  307,  516,  307,  506,
      511,  515,  511,  511,  527,  514,  527,  307,  307,  307,
      307,  307,  307,  531,  513,  531,  511,  512,  478,  307,
      307,  518,  518,  518,  518,  518,  520,  520,  520,  520,
      520,  528,  528,  528,  528,  528,  476,  307,  312,  475,
      312,  312,  534,  536,  534,  536,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  316,  537,  316,  537,  473,
      539,  529,  539,  529,  538,  316,  538,  316,  316,  316,
      316,  316,  529,  530,  530,  530,  530,  530,  316,  316,

      532,  532,  532,  532,  532,  472,  541,  533,  541,  533,
      543,  538,  543,  545,  460,  545,  316,  317,  533,  317,
      548,  550,  548,  550,  550,  548,  561,  317,  561,  317,
      317,  317,  317,  317,  563,  565,  563,  565,  456,  455,
      317,  317,  554,  454,  554,  554,  453,  564,  568,  564,
      568,  568,  572,  548,  572,  572,  452,  451,  317,  318,
      576,  318,  576,  576,  423,  580,  554,  580,  580,  422,
      421,  318,  318,  318,  318,  318,  584,  554,  584,  584,
      420,  419,  318,  318,  564,  587,  589,  587,  589,  589,
      592,  594,  592,  594,  594,  597,  604,  597,  604,  418,

      318,  326,  610,  326,  610,  326,  326,  612,  385,  612,
      326,  383,  326,  326,  607,  607,  607,  607,  607,  326,
      326,  326,  331,  613,  331,  613,  331,  331,  614,  382,
      614,  331,  380,  331,  331,  609,  609,  609,  609,  609,
      331,  331,  331,  333,  379,  333,  333,  616,  618,  616,
      618,  333,  333,  333,  365,  333,  333,  333,  333,  333,
      336,  606,  336,  606,  606,  606,  606,  606,  364,  363,
      336,  336,  336,  336,  336,  336,  336,  622,  625,  622,
      625,  625,  362,  336,  336,  621,  623,  621,  623,  357,
      636,  623,  636,  356,  638,  629,  638,  629,  629,  355,

      354,  336,  337,  639,  337,  639,  640,  644,  640,  644,
      644,  353,  337,  337,  337,  337,  337,  337,  337,  629,
      648,  621,  648,  648,  352,  337,  337,  351,  349,  652,
      629,  652,  652,  656,  347,  656,  656,  659,  346,  659,
      639,  345,  293,  337,  338,  661,  338,  661,  661,  664,
      666,  664,  666,  666,  283,  338,  338,  338,  338,  338,
      338,  669,  675,  669,  675,  262,  261,  338,  338,  676,
      676,  676,  676,  676,  677,  680,  677,  680,  683,  685,
      683,  685,  688,  260,  688,  338,  343,  259,  343,  343,
      258,  689,  690,  689,  690,  257,  692,  343,  692,  692,

      696,  256,  696,  696,  703,  705,  703,  705,  343,  254,
      343,  689,  690,  253,  343,  343,  252,  343,  432,  706,
      432,  706,  217,  707,  696,  707,  216,  734,  432,  734,
      432,  432,  432,  432,  432,  696,  712,  214,  712,  712,
      213,  432,  432,  716,  178,  716,  716,  720,  177,  720,
      720,  724,  176,  724,  724,  728,  706,  728,  728,  432,
      522,  175,  522,  737,  737,  737,  737,  737,  173,  738,
      522,  738,  522,  522,  522,  522,  522,  740,  744,  740,
      744,  744,  172,  522,  522,  748,  171,  748,  748,  755,
      757,  755,  757,  758,  759,  758,  759,  765,  170,  765,

      765,  522,  523,  769,  523,  769,  769,  164,  773,  748,
      773,  773,  162,  161,  523,  523,  523,  523,  523,  777,
      748,  777,  777,  160,  137,  523,  523,  123,  121,  781,
      758,  781,  781,  784,  787,  784,  787,  789,  789,  789,
      789,  789,  120,  523,  524,  790,  524,  790,  792,  806,
      792,  806,  524,  524,  524,  119,  524,  524,  524,  524,
      524,  608,  795,  608,  795,  795,  799,   89,  799,  799,
      808,  608,  808,  608,  608,  608,  608,  608,  810,  815,
      810,  815,   88,   69,  608,  608,  809,   68,  809,  817,
      799,  817,  817,  821,   67,  821,  821,  825,   66,  825,

      825,  799,  608,  678,  829,  678,  829,  829,  833,   61,
      833,  833,  836,  678,  836,  678,  678,  678,  678,  678,
      838,    0,  838,  809,    0,    0,  678,  678,  839,  841,
      839,  841,  841,  852,  854,  852,  854,  855,  845,  855,
      845,  845,    0,    0,  678,  679,  856,  679,  856,  861,
      863,  861,  863,  863,  883,    0,  883,  679,  679,  679,
      679,  679,  845,  867,    0,  867,  867,    0,  679,  679,
      884,    0,  884,  845,  855,  871,    0,  871,  871,  875,
        0,  875,  875,    0,    0,  879,  679,  879,  879,  886,
        0,  886,  886,  890,    0,  890,  890,  897,  899,  897,

      899,  900,  901,  900,  901,  906,  908,  906,  908,  908,
      912,    0,  912,  912,    0,    0,  916,  890,  916,  916,
      920,    0,  920,  920,  924,    0,  924,  924,  890,  927,
      929,  927,  929,  929,  933,    0,  933,  933,  900,  940,
      942,  940,  942,  943,  944,  943,  944,  949,  951,  949,
      951,  951,  955,    0,  955,  955,    0,  959,  933,  959,
      959,  963,    0,  963,  963,  967,    0,  967,  967,  933,
      970,  972,  970,  972,  972,  976,    0,  976,  976,  983,
      943,  983,  985,  986,  985,  986,  987,  992,  987,  992,
      994,    0,  994,  994,  998,    0,  998,  998, 1002,  976,

     1002, 1002, 1006,    0, 1006, 1006, 1010,    0, 1010, 1010,
      976, 1014,    0, 1014, 1014, 1018,    0, 1018, 1018, 1025,
      986, 1025, 1027, 1028, 1027, 1028, 1029, 1034, 1029, 1034,
     1036,    0, 1036, 1036, 1040,    0, 1040, 1040, 1044, 1018,
     1044, 1044, 1048,    0, 1048, 1048, 1052,    0, 1052, 1052,
     1018, 1056,    0, 1056, 1056, 1060,    0, 1060, 1060, 1067,
     1028, 1067, 1069, 1070, 1069, 1070, 1071, 1076, 1071, 1076,
     1078,    0, 1078, 1078, 1082,    0, 1082, 1082, 1086, 1060,
     1086, 1086, 1090,    0, 1090, 1090, 1094,    0, 1094, 1094,
     1060, 1098,    0, 1098, 1098, 1102,    0, 1102, 1102, 1109,

     1070, 1109, 1111, 1112, 1111, 1112, 1113, 1118, 1113, 1118,
     1120,    0, 1120, 1120, 1124,    0, 1124, 1124, 1128, 1102,
     1128, 1128, 1132,    0, 1132, 1132, 1136,    0, 1136, 1136,
     1102, 1140,    0, 1140, 1140, 1144,    0, 1144, 1144, 1151,
     1112, 1151, 1153, 1154, 1153, 1154, 1155, 1160, 1155, 1160,
     1162,    0, 1162, 1162, 1166,    0, 1166, 1166, 1170, 1144,
     1170, 1170, 1174,    0, 1174, 1174, 1178,    0, 1178, 1178,
     1144, 1182,    0, 1182, 1182, 1186,    0, 1186, 1186, 1193,
     1154, 1193, 1195, 1196, 1195, 1196, 1197, 1202, 1197, 1202,
     1204,    0, 1204, 1204, 1208,    0, 1208, 1208, 1212, 1186,

     1212, 1212, 1216,    0, 1216, 1216, 1220,    0, 1220, 1220,
     1186, 1224,    0, 1224, 1224, 1227,    0, 1227, 1227, 1230,
     1196, 1230, 1231, 1233, 1231, 1233, 1233, 1237,    0, 1237,
     1237, 1241,    0, 1241, 1241, 1245,    0, 1245, 1245, 1227,
     1249,    0, 1249, 1249, 1253,    0, 1253, 1253,    0, 1257,
     1227, 1257, 1257, 1261,    0, 1261, 1261, 1265,    0, 1265,
     1265, 1269,    0, 1269, 1269, 1273,    0, 1273, 1273, 1277,
        0, 1277, 1277, 1281,    0, 1281, 1281, 1285,    0, 1285,
     1285, 1289,    0, 1289, 1289, 1293,    0, 1293, 1293, 1297,
        0, 1297, 1297, 1301,    0, 1301, 1301, 1305,    0, 1305,

     1305, 1309,    0, 1309, 1309, 1313,    0, 1313, 1313, 1317,
        0, 1317, 1317, 1321,    0, 1321, 1321, 1325,    0, 1325,
     1325, 1329,    0, 1329, 1329, 1333,    0, 1333, 1333, 1337,
        0, 1337, 1337, 1341,    0, 1341, 1341, 1345,    0, 1345,
     1345, 1349,    0, 1349, 1349, 1353,    0, 1353, 1353, 1357,
        0, 1357, 1357, 1361,    0, 1361, 1361, 1365,    0, 1365,
     1365, 1369,    0, 1369, 1369, 1373,    0, 1373, 1373, 1377,
        0, 1377, 1377, 1381,    0, 1381, 1381, 1385,    0, 1385,
     1385, 1389,    0, 1389, 1389, 1393,    0, 1393, 1393, 1397,
        0, 1397, 1397, 1401,    0, 1401, 1401, 1405,    0, 1405,

     1405, 1409,    0, 1409, 1409, 1413,    0, 1413, 1413, 1417,
        0, 1417, 1417, 1421,    0, 1421, 1421, 1425,    0, 1425,
     1425, 1429,    0, 1429, 1429, 1433,    0, 1433, 1433, 1437,
        0, 1437, 1437, 1441,    0, 1441, 1441, 1445,    0, 1445,
     1445, 1449,    0, 1449, 1449, 1453,    0, 1453, 1453, 1457,
        0, 1457, 1457, 1461,    0, 1461, 1461, 1465,    0, 1465,
     1465, 1469,    0, 1469, 1469, 1473,    0, 1473, 1473, 1477,
        0, 1477, 1477, 1481,    0, 1481, 1481, 1485,    0, 1485,
     1485, 1489,    0, 1489, 1489, 1493,    0, 1493, 1493, 1497,
        0, 1497, 1497, 1501,    0, 1501, 1501, 1505,    0, 1505,

     1505, 1509,    0, 1509, 1509, 1513,    0, 1513, 1513, 1517,
        0, 1517, 1517, 1521,    0, 1521, 1521, 1525,    0, 1525,
     1525, 1529,    0, 1529, 1529, 1533,    0, 1533, 1533, 1537,
        0, 1537, 1537, 1541,    0, 1541, 1541, 1545,    0, 1545,
     1545, 1549,    0, 1549, 1549, 1553,    0, 1553, 1553, 1557,
        0, 1557, 1557, 1561,    0, 1561, 1561, 1565,    0, 1565,
     1565, 1569,    0, 1569, 1569, 1573,    0, 1573, 1573, 1577,
        0, 1577, 1577, 1581,    0, 1581, 1581, 1585,    0, 1585,
     1585, 1589,    0, 1589, 1589, 1593,    0, 1593, 1593, 1597,
        0, 1597, 1597, 1601,    0, 1601, 1601, 1605,    0, 1605,

     1605, 1609,    0, 1609, 1609, 1613,    0, 1613, 1613, 1617,
        0, 1617, 1617, 1621,    0, 1621, 1621, 1625,    0, 1625,
     1625, 1629,    0, 1629, 1629, 1633,    0, 1633, 1633, 1637,
        0, 1637, 1637, 1641,    0, 1641, 1641, 1645,    0, 1645,
     1645, 1649,    0, 1649, 1649, 1653,    0, 1653, 1653, 1657,
        0, 1657, 1657, 1661,    0, 1661, 1661, 1665,    0, 1665,
     1665, 1669,    0, 1669, 1669, 1673,    0, 1673, 1673, 1677,
        0, 1677, 1677, 1681,    0, 1681, 1681, 1685,    0, 1685,
     1685, 1689,    0, 1689, 1689, 1693,    0, 1693, 1693, 1697,
        0, 1697, 1697, 1701,    0, 1701, 1701, 1705,    0, 1705,

     1705, 1709,    0, 1709, 1709, 1713,    0, 1713, 1713, 1717,
        0, 1717, 1717, 1721,    0, 1721, 1721, 1725,    0, 1725,
     1725, 1729,    0, 1729, 1729, 1733,    0, 1733, 1733, 1737,
        0, 1737, 1737, 1741,    0, 1741, 1741, 1745,    0, 1745,
     1745, 1749,    0, 1749, 1749, 1753,    0, 1753, 1753, 1757,
        0, 1757, 1757, 1761,    0, 1761, 1761, 1765,    0, 1765,
     1765, 1769,    0, 1769, 1769, 1773,    0, 1773, 1773, 1777,
        0, 1777, 1777, 1781,    0, 1781, 1781, 1785,    0, 1785,
     1785, 1789,    0, 1789, 1789, 1793,    0, 1793, 1793, 1797,
        0, 1797, 1797, 1801,    0, 1801, 1801, 1805,    0, 1805,

     1805, 1809,    0, 1809, 1809, 1813,    0, 1813, 1813, 1817,
        0, 1817, 1817, 1821,    0, 1821, 1821, 1825,    0, 1825,
     1825, 1829,    0, 1829, 1829, 1833,    0, 1833, 1833, 1837,
        0, 1837, 1837, 1841,    0, 1841, 1841, 1845,    0, 1845,
     1845, 1849,    0, 1849, 1849, 1853,    0, 1853, 1853, 1857,
        0, 1857, 1857, 1861,    0, 1861, 1861, 1865,    0, 1865,
     1865, 1869,    0, 1869, 1869, 1873,    0, 1873, 1873, 1877,
        0, 1877, 1877, 1881,    0, 1881, 1881, 1885,    0, 1885,
     1885, 1889,    0, 1889, 1889, 1893,    0, 1893, 1893, 1897,
        0, 1897, 1897, 1901,    0, 1901, 1901, 1905,    0, 1905,

     1905, 1909,    0, 1909, 1909, 1913,    0, 1913, 1913, 1917,
        0, 1917, 1917, 1921,    0, 1921, 1921, 1925,    0, 1925,
     1925, 1929,    0, 1929, 1929, 1933,    0, 1933, 1933, 1937,
        0, 1937, 1937, 1941,    0, 1941, 1941, 1945,    0, 1945,
     1945, 1949,    0, 1949, 1949, 1953,    0, 1953, 1953, 1957,
        0, 1957, 1957, 1961,    0, 1961, 1961, 1965,    0, 1965,
     1965, 1969,    0, 1969, 1969, 1973,    0, 1973, 1973, 1977,
        0, 1977, 1977, 1981,    0, 1981, 1981, 1985,    0, 1985,
     1985, 1989,    0, 1989, 1989, 1993,    0, 1993, 1993, 1997,
        0, 1997, 1997, 2001,    0, 2001, 2001, 2005,    0, 2005,

     2005, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009,
     2009, 2009, 2009, 2010, 2010, 2010, 2010, 2010, 2010, 2010,
     2010, 2010, 2010, 2010, 2010, 2011, 2011, 2011, 2011, 2011,
     2011, 2011, 2011, 2011, 2011, 2011, 2011, 2012, 2012, 2012,
     2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2013,
     2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013,
     2013, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014,
     2014, 2014, 2014, 2015, 2015, 2015, 2015, 2015, 2015, 2015,
     2015, 2015, 2015, 2015, 2015, 2016, 2016, 2016, 2016, 2016,
     2016, 2016, 2016, 2016, 2016, 2016, 2016, 2017, 2017, 2017,

     2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2018,
     2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018, 2018,
     2018, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,
     2019, 2019, 2019, 2020, 2020,    0, 2020, 2020, 2020, 2020,
     2020, 2020, 2020, 2020, 2020, 2021,    0, 2021,    0,    0,
        0,    0, 2021,    0, 2021, 2022,    0,    0,    0,    0,
        0,    0,    0,    0, 2022, 2023,    0, 2023,    0,    0,
        0,    0,    0,    0, 2023, 2023, 2024,    0,    0, 2024,
     2024, 2024,    0,    0, 2024, 2024, 2024, 2025, 2025,    0,
     2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2025, 2026,

     2026,    0, 2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026,
     2026, 2027, 2027,    0, 2027, 2027, 2027, 2027, 2027, 2027,
     2027, 2027, 2027, 2028, 2028,    0, 2028, 2028, 2028, 2028,
     2028, 2028, 2028, 2028, 2028, 2029, 2029,    0, 2029, 2029,
     2029, 2029, 2029, 2029, 2029, 2029, 2029, 2030, 2030,    0,
     2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2031,
     2031,    0, 2031, 2031, 2031, 2031, 2031, 2031, 2031, 2031,
     2031, 2032, 2032,    0, 2032, 2032, 2032, 2032, 2032, 2032,
     2032, 2032, 2032, 2033, 2033,    0, 2033, 2033, 2033, 2033,
     2033, 2033, 2033, 2033, 2033, 2034, 2034,    0, 2034, 2034,

     2034, 2034, 2034, 2034, 2034, 2034, 2034, 2035, 2035,    0,
     2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2035, 2036,
     2036,    0, 2036, 2036, 2036, 2036, 2036, 2036, 2036, 2036,
     2036, 2037, 2037,    0, 2037, 2037, 2037, 2037, 2037, 2037,
     2037, 2037, 2037, 2038, 2038,    0, 2038, 2038, 2038, 2038,
     2038, 2038, 2038, 2038, 2038, 2039, 2039,    0, 2039, 2039,
     2039, 2039, 2039, 2039, 2039, 2039, 2039, 2040, 2040,    0,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2041,
     2041,    0, 2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041,
     2041, 2042, 2042,    0, 2042, 2042, 2042, 2042, 2042, 2042,

     2042, 2042, 2042, 2043,    0, 2043,    0, 2043, 2043, 2043,
        0, 2043, 2043, 2043, 2044,    0,    0, 2044,    0, 2044,
        0, 2044, 2044, 2044, 2044, 2045,    0,    0,    0,    0,
        0, 2045,    0, 2045, 2046,    0, 2046,    0,    0,    0,
        0,    0,    0, 2046, 2046, 2047,    0,    0, 2047, 2047,
     2047,    0,    0, 2047, 2047, 2047, 2048,    0, 2048,    0,
        0,    0,    0,    0,    0, 2048, 2048, 2049,    0,    0,
     2049, 2049, 2049,    0,    0, 2049, 2049, 2049, 2050,    0,
     2050,    0,    0,    0,    0,    0,    0, 2050, 2050, 2051,
        0,    0, 2051, 2051, 2051,    0,    0, 2051, 2051, 2051,

     2052, 2052,    0, 2052, 2052, 2052, 2052, 2052, 2052, 2052,
     2052, 2052, 2053, 2053,    0, 2053, 2053, 2053, 2053, 2053,
     2053, 2053, 2053, 2053, 2054, 2054,    0, 2054, 2054, 2054,
     2054, 2054, 2054, 2054, 2054, 2054, 2055,    0, 2055,    0,
        0,    0,    0, 2055,    0, 2055, 2056,    0,    0,    0,
        0,    0,    0,    0,    0, 2056, 2057, 2057,    0,    0,
     2057, 2058,    0, 2058,    0,    0,    0,    0,    0,    0,
     2058, 2058, 2059,    0,    0, 2059, 2059, 2059,    0,    0,
     2059, 2059, 2059, 2060, 2060,    0, 2060, 2060, 2060, 2060,
     2060, 2060, 2060, 2060, 2060, 2061, 2061,    0, 2061, 2061,

     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2062, 2062,    0,
     2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2063,
     2063,    0, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063,
     2063, 2064, 2064,    0, 2064, 2064, 2064, 2064, 2064, 2064,
     2064, 2064, 2064, 2065, 2065,    0, 2065, 2065, 2065, 2065,
     2065, 2065, 2065, 2065, 2065, 2066, 2066,    0, 2066, 2066,
     2066, 2066, 2066, 2066, 2066, 2066, 2066, 2067, 2067,    0,
     2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2067, 2068,
     2068,    0, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068,
     2068, 2069, 2069,    0, 2069, 2069, 2069, 2069, 2069, 2069,

     2069, 2069, 2069, 2070, 2070,    0, 2070, 2070, 2070, 2070,
     2070, 2070, 2070, 2070, 2070, 2071, 2071,    0, 2071, 2071,
     2071, 2071, 2071, 2071, 2071, 2071, 2071, 2072, 2072,    0,
     2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072, 2073,
     2073,    0, 2073, 2073, 2073, 2073, 2073, 2073, 2073, 2073,
     2073, 2074, 2074,    0, 2074, 2074, 2074, 2074, 2074, 2074,
     2074, 2074, 2074, 2075, 2075,    0, 2075, 2075, 2075, 2075,
     2075, 2075, 2075, 2075, 2075, 2076, 2076,    0, 2076, 2076,
     2076, 2076, 2076, 2076, 2076, 2076, 2076, 2077, 2077,    0,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2078,

        0, 2078,    0, 2078, 2078, 2078,    0, 2078, 2078, 2078,
     2079,    0,    0, 2079,    0, 2079,    0, 2079, 2079, 2079,
     2079, 2080, 2080,    0,    0, 2080, 2081,    0,    0,    0,
        0,    0, 2081,    0, 2081, 2082, 2082,    0,    0, 2082,
     2083,    0, 2083,    0,    0,    0,    0,    0,    0, 2083,
     2083, 2084,    0,    0, 2084, 2084, 2084,    0,    0, 2084,
     2084, 2084, 2085, 2085,    0,    0, 2085, 2086, 2086,    0,
        0, 2086, 2087,    0, 2087,    0,    0,    0,    0,    0,
        0, 2087, 2087, 2088,    0,    0, 2088, 2088, 2088,    0,
        0, 2088, 2088, 2088, 2089,    0, 2089,    0,    0,    0,

        0,    0,    0, 2089, 2089, 2090,    0,    0, 2090, 2090,
     2090,    0,    0, 2090, 2090, 2090, 2091, 2091,    0,    0,
     2091, 2092, 2092,    0, 2092, 2092, 2092, 2092, 2092, 2092,
     2092, 2092, 2092, 2093, 2093,    0, 2093, 2093, 2093, 2093,
     2093, 2093, 2093, 2093, 2093, 2094, 2094,    0,    0, 2094,
     2095,    0,    0,    0,    0,    0,    0, 2095, 2095, 2096,
        0,    0, 2096, 2096, 2096,    0,    0, 2096, 2096, 2096,
     2097, 2097,    0, 2097, 2097, 2097, 2097, 2097, 2097, 2097,
     2097, 2097, 2098, 2098,    0, 2098, 2098, 2098, 2098, 2098,
     2098, 2098, 2098, 2098, 2099, 2099,    0, 2099, 2099, 2099,

     2099, 2099, 2099, 2099, 2099, 2099, 2100, 2100,    0, 2100,
     2100, 2100, 2100, 2100, 2100, 2100, 2100, 2100, 2101, 2101,
        0, 2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101,
     2102, 2102,    0, 2102, 2102, 2102, 2102, 2102, 2102, 2102,
     2102, 2102, 2103, 2103,    0, 2103, 2103, 2103, 2103, 2103,
     2103, 2103, 2103, 2103, 2104, 2104,    0, 2104, 2104, 2104,
     2104, 2104, 2104, 2104, 2104, 2104, 2105, 2105,    0, 2105,
     2105, 2105, 2105, 2105, 2105, 2105, 2105, 2105, 2106, 2106,
        0, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106, 2106,
     2107, 2107,    0, 2107, 2107, 2107, 2107, 2107, 2107, 2107,

     2107, 2107, 2108, 2108,    0, 2108, 2108, 2108, 2108, 2108,
     2108, 2108, 2108, 2108, 2109, 2109,    0, 2109, 2109, 2109,
     2109, 2109, 2109, 2109, 2109, 2109, 2110, 2110,    0, 2110,
     2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2111, 2111,
        0, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111, 2111,
     2112, 2112,    0, 2112, 2112, 2112, 2112, 2112, 2112, 2112,
     2112, 2112, 2113, 2113,    0, 2113, 2113, 2113, 2113, 2113,
     2113, 2113, 2113, 2113, 2114, 2114,    0, 2114, 2114, 2114,
     2114, 2114, 2114, 2114, 2114, 2114, 2115, 2115,    0,    0,
     2115, 2116,    0,    0,    0,    0,    0,    0,    0, 2116,

     2117, 2117,    0,    0, 2117, 2118,    0,    0,    0,    0,
        0,    0,    0, 2118, 2119, 2119,    0,    0, 2119, 2120,
        0,    0,    0,    0,    0,    0, 2120, 2120, 2121, 2121,
        0,    0, 2121, 2122,    0,    0,    0,    0,    0,    0,
        0, 2122, 2123, 2123,    0,    0, 2123, 2124,    0,    0,
        0,    0,    0,    0, 2124, 2124, 2125,    0,    0,    0,
        0,    0,    0, 2125, 2125, 2126, 2126,    0, 2126, 2126,
     2126, 2126, 2126, 2126, 2126, 2126, 2126, 2127, 2127,    0,
     2127, 2127, 2127, 2127, 2127, 2127, 2127, 2127, 2127, 2128,
     2128,    0, 2128, 2128, 2128, 2128, 2128, 2128, 2128, 2128,

     2128, 2129, 2129,    0, 2129, 2129, 2129, 2129, 2129, 2129,
     2129, 2129, 2129, 2130, 2130,    0, 2130, 2130, 2130, 2130,
     2130, 2130, 2130, 2130, 2130, 2131, 2131,    0, 2131, 2131,
     2131, 2131, 2131, 2131, 2131, 2131, 2131, 2132, 2132,    0,
     2132, 2132, 2132, 2132, 2132, 2132, 2132, 2132, 2132, 2133,
     2133,    0, 2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133,
     2133, 2134, 2134,    0, 2134, 2134, 2134, 2134, 2134, 2134,
     2134, 2134, 2134, 2135, 2135,    0, 2135, 2135, 2135, 2135,
     2135, 2135, 2135, 2135, 2135, 2136, 2136,    0, 2136, 2136,
     2136, 2136, 2136, 2136, 2136, 2136, 2136, 2137, 2137,    0,

     2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 2137, 2138,
     2138,    0, 2138, 2138, 2138, 2138, 2138, 2138, 2138, 2138,
     2138, 2139, 2139,    0, 2139, 2139, 2139, 2139, 2139, 2139,
     2139, 2139, 2139, 2140, 2140,    0, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2141, 2141,    0, 2141, 2141,
     2141, 2141, 2141, 2141, 2141, 2141, 2141, 2142, 2142,    0,
     2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2142, 2143,
     2143,    0, 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143,
     2143, 2144,    0,    0,    0,    0,    0,    0,    0, 2144,
     2145,    0,    0,    0,    0,    0,    0,    0, 2145, 2146,

     2146,    0,    0, 2146, 2147,    0,    0,    0,    0,    0,
        0, 2147, 2147, 2148,    0,    0,    0,    0,    0,    0,
        0, 2148, 2149,    0,    0,    0,    0,    0,    0, 2149,
     2149, 2150, 2150,    0, 2150, 2150, 2150, 2150, 2150, 2150,
     2150, 2150, 2150, 2151, 2151,    0, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2152, 2152,    0, 2152, 2152,
     2152, 2152, 2152, 2152, 2152, 2152, 2152, 2153, 2153,    0,
     2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2153, 2154,
     2154,    0, 2154, 2154, 2154, 2154, 2154, 2154, 2154, 2154,
     2154, 2155, 2155,    0, 2155, 2155, 2155, 2155, 2155, 2155,

     2155, 2155, 2155, 2156, 2156,    0, 2156, 2156, 2156, 2156,
     2156, 2156, 2156, 2156, 2156, 2157, 2157,    0, 2157, 2157,
     2157, 2157, 2157, 2157, 2157, 2157, 2157, 2158, 2158,    0,
     2158, 2158, 2158, 2158, 2158, 2158, 2158, 2158, 2158, 2159,
     2159,    0, 2159, 2159, 2159, 2159, 2159, 2159, 2159, 2159,
     2159, 2160, 2160,    0, 2160, 2160, 2160, 2160, 2160, 2160,
     2160, 2160, 2160, 2161, 2161,    0, 2161, 2161, 2161, 2161,
     2161, 2161, 2161, 2161, 2161, 2162, 2162,    0, 2162, 2162,
     2162, 2162, 2162, 2162, 2162, 2162, 2162, 2163, 2163,    0,
     2163, 2163, 2163, 2163, 2163, 2163, 2163, 2163, 2163, 2164,

     2164,    0, 2164, 2164, 2164, 2164, 2164, 2164, 2164, 2164,
     2164, 2165, 2165,    0, 2165, 2165, 2165, 2165, 2165, 2165,
     2165, 2165, 2165, 2166, 2166,    0, 2166, 2166, 2166, 2166,
     2166, 2166, 2166, 2166, 2166, 2167, 2167,    0,    0, 2167,
     2168,    0,    0,    0,    0,    0,    0,    0, 2168, 2169,
     2169,    0, 2169, 2169, 2169, 2169, 2169, 2169, 2169, 2169,
     2169, 2170, 2170,    0, 2170, 2170, 2170, 2170, 2170, 2170,
     2170, 2170, 2170, 2171, 2171,    0, 2171, 2171, 2171, 2171,
     2171, 2171, 2171, 2171, 2171, 2172, 2172,    0, 2172, 2172,
     2172, 2172, 2172, 2172, 2172, 2172, 2172, 2173, 2173,    0,

     2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2174,
     2174,    0, 2174, 2174, 2174, 2174, 2174, 2174, 2174, 2174,
     2174, 2175, 2175,    0, 2175, 2175, 2175, 2175, 2175, 2175,
     2175, 2175, 2175, 2176, 2176,    0, 2176, 2176, 2176, 2176,
     2176, 2176, 2176, 2176, 2176, 2177, 2177,    0, 2177, 2177,
     2177, 2177, 2177, 2177, 2177, 2177, 2177, 2178, 2178,    0,
     2178, 2178, 2178, 2178, 2178, 2178, 2178, 2178, 2178, 2179,
     2179,    0, 2179, 2179, 2179, 2179, 2179, 2179, 2179, 2179,
     2179, 2180, 2180,    0, 2180, 2180, 2180, 2180, 2180, 2180,
     2180, 2180, 2180, 2181, 2181,    0, 2181, 2181, 2181, 2181,

     2181, 2181, 2181, 2181, 2181, 2182, 2182,    0, 2182, 2182,
     2182, 2182, 2182, 2182, 2182, 2182, 2182, 2183,    0,    0,
        0,    0,    0,    0,    0, 2183, 2184, 2184,    0,    0,
     2184, 2185, 2185,    0, 2185, 2185, 2185, 2185, 2185, 2185,
     2185, 2185, 2185, 2186, 2186,    0, 2186, 2186, 2186, 2186,
     2186, 2186, 2186, 2186, 2186, 2187, 2187,    0, 2187, 2187,
     2187, 2187, 2187, 2187, 2187, 2187, 2187, 2188, 2188,    0,
     2188, 2188, 2188, 2188, 2188, 2188, 2188, 2188, 2188, 2189,
     2189,    0, 2189, 2189, 2189, 2189, 2189, 2189, 2189, 2189,
     2189, 2190, 2190,    0, 2190, 2190, 2190, 2190, 2190, 2190,

     2190, 2190, 2190, 2191, 2191,    0, 2191, 2191, 2191, 2191,
     2191, 2191, 2191, 2191, 2191, 2192, 2192,    0, 2192, 2192,
     2192, 2192, 2192, 2192, 2192, 2192, 2192, 2193, 2193,    0,
     2193, 2193, 2193, 2193, 2193, 2193, 2193, 2193, 2193, 2194,
     2194,    0, 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194,
     2194, 2195, 2195,    0, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2196, 2196,    0, 2196, 2196, 2196, 2196,
     2196, 2196, 2196, 2196, 2196, 2197, 2197,    0, 2197, 2197,
     2197, 2197, 2197, 2197, 2197, 2197, 2197, 2198, 2198,    0,
     2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2199,

     2199,    0,    0, 2199, 2200,    0,    0,    0,    0,    0,
        0,    0, 2200, 2201, 2201,    0, 2201, 2201, 2201, 2201,
     2201, 2201, 2201, 2201, 2201, 2202, 2202,    0, 2202, 2202,
     2202, 2202, 2202, 2202, 2202, 2202, 2202, 2203, 2203,    0,
     2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2203, 2204,
     2204,    0, 2204, 2204, 2204, 2204, 2204, 2204, 2204, 2204,
     2204, 2205, 2205,    0, 2205, 2205, 2205, 2205, 2205, 2205,
     2205, 2205, 2205, 2206, 2206,    0, 2206, 2206, 2206, 2206,
     2206, 2206, 2206, 2206, 2206, 2207, 2207,    0, 2207, 2207,
     2207, 2207, 2207, 2207, 2207, 2207, 2207, 2208, 2208,    0,

     2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2208, 2209,
     2209,    0, 2209, 2209, 2209, 2209, 2209, 2209, 2209, 2209,
     2209, 2210, 2210,    0, 2210, 2210, 2210, 2210, 2210, 2210,
     2210, 2210, 2210, 2211, 2211,    0, 2211, 2211, 2211, 2211,
     2211, 2211, 2211, 2211, 2211, 2212, 2212,    0, 2212, 2212,
     2212, 2212, 2212, 2212, 2212, 2212, 2212, 2213, 2213,    0,
     2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213, 2213, 2214,
     2214,    0, 2214, 2214, 2214, 2214, 2214, 2214, 2214, 2214,
     2214, 2215,    0,    0,    0,    0,    0,    0,    0, 2215,
     2216, 2216,    0, 2216, 2216, 2216, 2216, 2216, 2216, 2216,

     2216, 2216, 2217, 2217,    0, 2217, 2217, 2217, 2217, 2217,
     2217, 2217, 2217, 2217, 2218, 2218,    0, 2218, 2218, 2218,
     2218, 2218, 2218, 2218, 2218, 2218, 2219, 2219,    0, 2219,
     2219, 2219, 2219, 2219, 2219, 2219, 2219, 2219, 2220, 2220,
        0, 2220, 2220, 2220, 2220, 2220, 2220, 2220, 2220, 2220,
     2221, 2221,    0, 2221, 2221, 2221, 2221, 2221, 2221, 2221,
     2221, 2221, 2222, 2222,    0, 2222, 2222, 2222, 2222, 2222,
     2222, 2222, 2222, 2222, 2223, 2223,    0, 2223, 2223, 2223,
     2223, 2223, 2223, 2223, 2223, 2223, 2224, 2224,    0, 2224,
     2224, 2224, 2224, 2224, 2224, 2224, 2224, 2224, 2225, 2225,

        0, 2225, 2225, 2225, 2225, 2225, 2225, 2225, 2225, 2225,
     2226, 2226,    0, 2226, 2226, 2226, 2226, 2226, 2226, 2226,
     2226, 2226, 2227, 2227,    0, 2227, 2227, 2227, 2227, 2227,
     2227, 2227, 2227, 2227, 2228, 2228,    0, 2228, 2228, 2228,
     2228, 2228, 2228, 2228, 2228, 2228, 2229, 2229,    0, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2230, 2230,
        0, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230,
     2231, 2231,    0, 2231, 2231, 2231, 2231, 2231, 2231, 2231,
     2231, 2231, 2232, 2232,    0, 2232, 2232, 2232, 2232, 2232,
     2232, 2232, 2232, 2232, 2233, 2233,    0, 2233, 2233, 2233,

     2233, 2233, 2233, 2233, 2233, 2233, 2234, 2234,    0, 2234,
     2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2235, 2235,
        0, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235, 2235,
     2236, 2236,    0, 2236, 2236, 2236, 2236, 2236, 2236, 2236,
     2236, 2236, 2237, 2237,    0, 2237, 2237, 2237, 2237, 2237,
     2237, 2237, 2237, 2237, 2238, 2238,    0, 2238, 2238, 2238,
     2238, 2238, 2238, 2238, 2238, 2238, 2239, 2239,    0, 2239,
     2239, 2239, 2239, 2239, 2239, 2239, 2239, 2239, 2240, 2240,
        0, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240, 2240,
     2241, 2241,    0, 2241, 2241, 2241, 2241, 2241, 2241, 2241,

     2241, 2241, 2242, 2242,    0, 2242, 2242, 2242, 2242, 2242,
     2242, 2242, 2242, 2242, 2243, 2243,    0, 2243, 2243, 2243,
     2243, 2243, 2243, 2243, 2243, 2243, 2244, 2244,    0, 2244,
     2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2245, 2245,
        0, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2246, 2246,    0, 2246, 2246, 2246, 2246, 2246, 2246, 2246,
     2246, 2246, 2247, 2247,    0, 2247, 2247, 2247, 2247, 2247,
     2247, 2247, 2247, 2247, 2248, 2248,    0, 2248, 2248, 2248,
     2248, 2248, 2248, 2248, 2248, 2248, 2249, 2249,    0, 2249,
     2249, 2249, 2249, 2249, 2249, 2249, 2249, 2249, 2250, 2250,

        0, 2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250,
     2251, 2251,    0, 2251, 2251, 2251, 2251, 2251, 2251, 2251,
     2251, 2251, 2252, 2252,    0, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2252, 2252, 2253, 2253,    0, 2253, 2253, 2253,
     2253, 2253, 2253, 2253, 2253, 2253, 2254, 2254,    0, 2254,
     2254, 2254, 2254, 2254, 2254, 2254, 2254, 2254, 2255, 2255,
        0, 2255, 2255, 2255, 2255, 2255, 2255, 2255, 2255, 2255,
     2256, 2256,    0, 2256, 2256, 2256, 2256, 2256, 2256, 2256,
     2256, 2256, 2257, 2257,    0, 2257, 2257, 2257, 2257, 2257,
     2257, 2257, 2257, 2257, 2258, 2258,    0, 2258, 2258, 2258,

     2258, 2258, 2258, 2258, 2258, 2258, 2259, 2259,    0, 2259,
     2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2260, 2260,
        0, 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260, 2260,
     2261, 2261,    0, 2261, 2261, 2261, 2261, 2261, 2261, 2261,
     2261, 2261, 2262, 2262,    0, 2262, 2262, 2262, 2262, 2262,
     2262, 2262, 2262, 2262, 2263, 2263,    0, 2263, 2263, 2263,
     2263, 2263, 2263, 2263, 2263, 2263, 2264, 2264,    0, 2264,
     2264, 2264, 2264, 2264, 2264, 2264, 2264, 2264, 2265, 2265,
        0, 2265, 2265, 2265, 2265, 2265, 2265, 2265, 2265, 2265,
     2266, 2266,    0, 2266, 2266, 2266, 2266, 2266, 2266, 2266,

     2266, 2266, 2267, 2267,    0, 2267, 2267, 2267, 2267, 2267,
     2267, 2267, 2267, 2267, 2268, 2268,    0, 2268, 2268, 2268,
     2268, 2268, 2268, 2268, 2268, 2268, 2269, 2269,    0, 2269,
     2269, 2269, 2269, 2269, 2269, 2269, 2269, 2269, 2270, 2270,
        0, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270, 2270,
     2271, 2271,    0, 2271, 2271, 2271, 2271, 2271, 2271, 2271,
     2271, 2271, 2272, 2272,    0, 2272, 2272, 2272, 2272, 2272,
     2272, 2272, 2272, 2272, 2273, 2273,    0, 2273, 2273, 2273,
     2273, 2273, 2273, 2273, 2273, 2273, 2274, 2274,    0, 2274,
     2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2275, 2275,

        0, 2275, 2275, 2275, 2275, 2275, 2275, 2275, 2275, 2275,
     2276, 2276,    0, 2276, 2276, 2276, 2276, 2276, 2276, 2276,
     2276, 2276, 2277, 2277,    0, 2277, 2277, 2277, 2277, 2277,
     2277, 2277, 2277, 2277, 2278, 2278,    0, 2278, 2278, 2278,
     2278, 2278, 2278, 2278, 2278, 2278, 2279, 2279,    0, 2279,
     2279, 2279, 2279, 2279, 2279, 2279, 2279, 2279, 2280, 2280,
        0, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280, 2280,
     2281, 2281,    0, 2281, 2281, 2281, 2281, 2281, 2281, 2281,
     2281, 2281, 2282, 2282,    0, 2282, 2282, 2282, 2282, 2282,
     2282, 2282, 2282, 2282, 2283, 2283,    0, 2283, 2283, 2283,

     2283, 2283, 2283, 2283, 2283, 2283, 2284, 2284,    0, 2284,
     2284, 2284, 2284, 2284, 2284, 2284, 2284, 2284, 2285, 2285,
        0, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285, 2285,
     2286, 2286,    0, 2286, 2286, 2286, 2286, 2286, 2286, 2286,
     2286, 2286, 2287, 2287,    0, 2287, 2287, 2287, 2287, 2287,
     2287, 2287, 2287, 2287, 2288, 2288,    0, 2288, 2288, 2288,
     2288, 2288, 2288, 2288, 2288, 2288, 2289, 2289,    0, 2289,
     2289, 2289, 2289, 2289, 2289, 2289, 2289, 2289, 2290, 2290,
        0, 2290, 2290, 2290, 2290, 2290, 2290, 2290, 2290, 2290,
     2291, 2291,    0, 2291, 2291, 2291, 2291, 2291, 2291, 2291,

     2291, 2291, 2292, 2292,    0, 2292, 2292, 2292, 2292, 2292,
     2292, 2292, 2292, 2292, 2293, 2293,    0, 2293, 2293, 2293,
     2293, 2293, 2293, 2293, 2293, 2293, 2294, 2294,    0, 2294,
     2294, 2294, 2294, 2294, 2294, 2294, 2294, 2294, 2295, 2295,
        0, 2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295,
     2296, 2296,    0, 2296, 2296, 2296, 2296, 2296, 2296, 2296,
     2296, 2296, 2297, 2297,    0, 2297, 2297, 2297, 2297, 2297,
     2297, 2297, 2297, 2297, 2298, 2298,    0, 2298, 2298, 2298,
     2298, 2298, 2298, 2298, 2298, 2298, 2299, 2299,    0, 2299,
     2299, 2299, 2299, 2299, 2299, 2299, 2299, 2299, 2300, 2300,

        0, 2300, 2300, 2300, 2300, 2300, 2300, 2300, 2300, 2300,
     2301, 2301,    0, 2301, 2301, 2301, 2301, 2301, 2301, 2301,
     2301, 2301, 2302, 2302,    0, 2302, 2302, 2302, 2302, 2302,
     2302, 2302, 2302, 2302, 2303, 2303,    0, 2303, 2303, 2303,
     2303, 2303, 2303, 2303, 2303, 2303, 2304, 2304,    0, 2304,
     2304, 2304, 2304, 2304, 2304, 2304, 2304, 2304, 2305, 2305,
        0, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305, 2305,
     2306, 2306,    0, 2306, 2306, 2306, 2306, 2306, 2306, 2306,
     2306, 2306, 2307, 2307,    0, 2307, 2307, 2307, 2307, 2307,
     2307, 2307, 2307, 2307, 2308, 2308,    0, 2308, 2308, 2308,

     2308, 2308, 2308, 2308, 2308, 2308, 2309, 2309,    0, 2309,
     2309, 2309, 2309, 2309, 2309, 2309, 2309, 2309, 2310, 2310,
        0, 2310, 2310, 2310, 2310, 2310, 2310, 2310, 2310, 2310,
     2311, 2311,    0, 2311, 2311, 2311, 2311, 2311, 2311, 2311,
     2311, 2311, 2312, 2312,    0, 2312, 2312, 2312, 2312, 2312,
     2312, 2312, 2312, 2312, 2313, 2313,    0, 2313, 2313, 2313,
     2313, 2313, 2313, 2313, 2313, 2313, 2314, 2314,    0, 2314,
     2314, 2314, 2314, 2314, 2314, 2314, 2314, 2314, 2315, 2315,
        0, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2316, 2316,    0, 2316, 2316, 2316, 2316, 2316, 2316, 2316,

     2316, 2316, 2317, 2317,    0, 2317, 2317, 2317, 2317, 2317,
     2317, 2317, 2317, 2317, 2318, 2318,    0, 2318, 2318, 2318,
     2318, 2318, 2318, 2318, 2318, 2318, 2319, 2319,    0, 2319,
     2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319, 2320, 2320,
        0, 2320, 2320, 2320, 2320, 2320, 2320, 2320, 2320, 2320,
     2321, 2321,    0, 2321, 2321, 2321, 2321, 2321, 2321, 2321,
     2321, 2321, 2322, 2322,    0, 2322, 2322, 2322, 2322, 2322,
     2322, 2322, 2322, 2322, 2323, 2323,    0, 2323, 2323, 2323,
     2323, 2323, 2323, 2323, 2323, 2323, 2324, 2324,    0, 2324,
     2324, 2324, 2324, 2324, 2324, 2324, 2324, 2324, 2325, 2325,

        0, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2326, 2326,    0, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2327, 2327,    0, 2327, 2327, 2327, 2327, 2327,
     2327, 2327, 2327, 2327, 2328, 2328,    0, 2328, 2328, 2328,
     2328, 2328, 2328, 2328, 2328, 2328, 2329, 2329,    0, 2329,
     2329, 2329, 2329, 2329, 2329, 2329, 2329, 2329, 2330, 2330,
        0, 2330, 2330, 2330, 2330, 2330, 2330, 2330, 2330, 2330,
     2331, 2331,    0, 2331, 2331, 2331, 2331, 2331, 2331, 2331,
     2331, 2331, 2332, 2332,    0, 2332, 2332, 2332, 2332, 2332,
     2332, 2332, 2332, 2332, 2333, 2333,    0, 2333, 2333, 2333,

     2333, 2333, 2333, 2333, 2333, 2333, 2334, 2334,    0, 2334,
     2334, 2334, 2334, 2334, 2334, 2334, 2334, 2334, 2335, 2335,
        0, 2335, 2335, 2335, 2335, 2335, 2335, 2335, 2335, 2335,
     2336, 2336,    0, 2336, 2336, 2336, 2336, 2336, 2336, 2336,
     2336, 2336, 2337, 2337,    0, 2337, 2337, 2337, 2337, 2337,
     2337, 2337, 2337, 2337, 2338, 2338,    0, 2338, 2338, 2338,
     2338, 2338, 2338, 2338, 2338, 2338, 2339, 2339,    0, 2339,
     2339, 2339, 2339, 2339, 2339, 2339, 2339, 2339, 2340, 2340,
        0, 2340, 2340, 2340, 2340, 2340, 2340, 2340, 2340, 2340,
     2341, 2341,    0, 2341, 2341, 2341, 2341, 2341, 2341, 2341,

     2341, 2341, 2342, 2342,    0, 2342, 2342, 2342, 2342, 2342,
     2342, 2342, 2342, 2342, 2343, 2343,    0, 2343, 2343, 2343,
     2343, 2343, 2343, 2343, 2343, 2343, 2344, 2344,    0, 2344,
     2344, 2344, 2344, 2344, 2344, 2344, 2344, 2344, 2345, 2345,
        0, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345,
     2346, 2346,    0, 2346, 2346, 2346, 2346, 2346, 2346, 2346,
     2346, 2346, 2347, 2347,    0, 2347, 2347, 2347, 2347, 2347,
     2347, 2347, 2347, 2347, 2348, 2348,    0, 2348, 2348, 2348,
     2348, 2348, 2348, 2348, 2348, 2348, 2349, 2349,    0, 2349,
     2349, 2349, 2349, 2349, 2349, 2349, 2349, 2349, 2350, 2350,

        0, 2350, 2350, 2350, 2350, 2350, 2350, 2350, 2350, 2350,
     2351, 2351,    0, 2351, 2351, 2351, 2351, 2351, 2351, 2351,
     2351, 2351, 2352, 2352,    0, 2352, 2352, 2352, 2352, 2352,
     2352, 2352, 2352, 2352, 2353, 2353,    0, 2353, 2353, 2353,
     2353, 2353, 2353, 2353, 2353, 2353, 2354, 2354,    0, 2354,
     2354, 2354, 2354, 2354, 2354, 2354, 2354, 2354, 2355, 2355,
        0, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355, 2355,
     2356, 2356,    0, 2356, 2356, 2356, 2356, 2356, 2356, 2356,
     2356, 2356, 2357, 2357,    0, 2357, 2357, 2357, 2357, 2357,
     2357, 2357, 2357, 2357, 2358, 2358,    0, 2358, 2358, 2358,

     2358, 2358, 2358, 2358, 2358, 2358, 2359, 2359,    0, 2359,
     2359, 2359, 2359, 2359, 2359, 2359, 2359, 2359, 2360, 2360,
        0, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360, 2360,
     2361, 2361,    0, 2361, 2361, 2361, 2361, 2361, 2361, 2361,
     2361, 2361, 2362, 2362,    0, 2362, 2362, 2362, 2362, 2362,
     2362, 2362, 2362, 2362, 2363, 2363,    0, 2363, 2363, 2363,
     2363, 2363, 2363, 2363, 2363, 2363, 2364, 2364,    0, 2364,
     2364, 2364, 2364, 2364, 2364, 2364, 2364, 2364, 2365, 2365,
        0, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365, 2365,
     2366, 2366,    0, 2366, 2366, 2366, 2366, 2366, 2366, 2366,

     2366, 2366, 2367, 2367,    0, 2367, 2367, 2367, 2367, 2367,
     2367, 2367, 2367, 2367, 2368, 2368,    0, 2368, 2368, 2368,
     2368, 2368, 2368, 2368, 2368, 2368, 2369, 2369,    0, 2369,
     2369, 2369, 2369, 2369, 2369, 2369, 2369, 2369, 2370, 2370,
        0, 2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370,
     2371, 2371,    0, 2371, 2371, 2371, 2371, 2371, 2371, 2371,
     2371, 2371, 2372, 2372,    0, 2372, 2372, 2372, 2372, 2372,
     2372, 2372, 2372, 2372, 2373, 2373,    0, 2373, 2373, 2373,
     2373, 2373, 2373, 2373, 2373, 2373, 2374, 2374,    0, 2374,
     2374, 2374, 2374, 2374, 2374, 2374, 2374, 2374, 2375, 2375,

        0, 2375, 2375, 2375, 2375, 2375, 2375, 2375, 2375, 2375,
     2376, 2376,    0, 2376, 2376, 2376, 2376, 2376, 2376, 2376,
     2376, 2376, 2377, 2377,    0, 2377, 2377, 2377, 2377, 2377,
     2377, 2377, 2377, 2377, 2378, 2378,    0, 2378, 2378, 2378,
     2378, 2378, 2378, 2378, 2378, 2378, 2379, 2379,    0, 2379,
     2379, 2379, 2379, 2379, 2379, 2379, 2379, 2379, 2380, 2380,
        0, 2380, 2380, 2380, 2380, 2380, 2380, 2380, 2380, 2380,
     2381, 2381,    0, 2381, 2381, 2381, 2381, 2381, 2381, 2381,
     2381, 2381, 2382, 2382,    0, 2382, 2382, 2382, 2382, 2382,
     2382, 2382, 2382, 2382, 2383, 2383,    0, 2383, 2383, 2383,

     2383, 2383, 2383, 2383, 2383, 2383, 2384, 2384,    0, 2384,
     2384, 2384, 2384, 2384, 2384, 2384, 2384, 2384, 2385, 2385,
        0, 2385, 2385, 2385, 2385, 2385, 2385, 2385, 2385, 2385,
     2386, 2386,    0, 2386, 2386, 2386, 2386, 2386, 2386, 2386,
     2386, 2386, 2387, 2387,    0, 2387, 2387, 2387, 2387, 2387,
     2387, 2387, 2387, 2387, 2388, 2388,    0, 2388, 2388, 2388,
     2388, 2388, 2388, 2388, 2388, 2388, 2389, 2389,    0, 2389,
     2389, 2389, 2389, 2389, 2389, 2389, 2389, 2389, 2390, 2390,
        0, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390, 2390,
     2391, 2391,    0, 2391, 2391, 2391, 2391, 2391, 2391, 2391,

     2391, 2391, 2392, 2392,    0, 2392, 2392, 2392, 2392, 2392,
     2392, 2392, 2392, 2392, 2393, 2393,    0, 2393, 2393, 2393,
     2393, 2393, 2393, 2393, 2393, 2393, 2394, 2394,    0, 2394,
     2394, 2394, 2394, 2394, 2394, 2394, 2394, 2394, 2395, 2395,
        0, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395,
     2396, 2396,    0, 2396, 2396, 2396, 2396, 2396, 2396, 2396,
     2396, 2396, 2397, 2397,    0, 2397, 2397, 2397, 2397, 2397,
     2397, 2397, 2397, 2397, 2398, 2398,    0, 2398, 2398, 2398,
     2398, 2398, 2398, 2398, 2398, 2398, 2399, 2399,    0, 2399,
     2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2400, 2400,

        0, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400, 2400,
     2401, 2401,    0, 2401, 2401, 2401, 2401, 2401, 2401, 2401,
     2401, 2401, 2402, 2402,    0, 2402, 2402, 2402, 2402, 2402,
     2402, 2402, 2402, 2402, 2403, 2403,    0, 2403, 2403, 2403,
     2403, 2403, 2403, 2403, 2403, 2403, 2404, 2404,    0, 2404,
     2404, 2404, 2404, 2404, 2404, 2404, 2404, 2404, 2405, 2405,
        0, 2405, 2405, 2405, 2405, 2405, 2405, 2405, 2405, 2405,
     2406, 2406,    0, 2406, 2406, 2406, 2406, 2406, 2406, 2406,
     2406, 2406, 2407, 2407,    0, 2407, 2407, 2407, 2407, 2407,
     2407, 2407, 2407, 2407, 2408, 2408,    0, 2408, 2408, 2408,

     2408, 2408, 2408, 2408, 2408, 2408, 2409, 2409,    0, 2409,
     2409, 2409, 2409, 2409, 2409, 2409, 2409, 2409, 2410, 2410,
        0, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410, 2410,
     2411, 2411,    0, 2411, 2411, 2411, 2411, 2411, 2411, 2411,
     2411, 2411, 2412, 2412,    0, 2412, 2412, 2412, 2412, 2412,
     2412, 2412, 2412, 2412, 2413, 2413,    0, 2413, 2413, 2413,
     2413, 2413, 2413, 2413, 2413, 2413, 2414, 2414,    0, 2414,
     2414, 2414, 2414, 2414, 2414, 2414, 2414, 2414, 2415, 2415,
        0, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
     2416, 2416,    0, 2416, 2416, 2416, 2416, 2416, 2416, 2416,

     2416, 2416, 2417, 2417,    0, 2417, 2417, 2417, 2417, 2417,
     2417, 2417, 2417, 2417, 2418, 2418,    0, 2418, 2418, 2418,
     2418, 2418, 2418, 2418, 2418, 2418, 2419, 2419,    0, 2419,
     2419, 2419, 2419, 2419, 2419, 2419, 2419, 2419, 2420, 2420,
        0, 2420, 2420, 2420, 2420, 2420, 2420, 2420, 2420, 2420,
     2421, 2421,    0, 2421, 2421, 2421, 2421, 2421, 2421, 2421,
     2421, 2421, 2422, 2422,    0, 2422, 2422, 2422, 2422, 2422,
     2422, 2422, 2422, 2422, 2423, 2423,    0, 2423, 2423, 2423,
     2423, 2423, 2423, 2423, 2423, 2423, 2424, 2424,    0, 2424,
     2424, 2424, 2424, 2424, 2424, 2424, 2424, 2424, 2425, 2425,

        0, 2425, 2425, 2425, 2425, 2425, 2425, 2425, 2425, 2425,
     2426, 2426,    0, 2426, 2426, 2426, 2426, 2426, 2426, 2426,
     2426, 2426, 2427, 2427,    0, 2427, 2427, 2427, 2427, 2427,
     2427, 2427, 2427, 2427, 2428, 2428,    0, 2428, 2428, 2428,
     2428, 2428, 2428, 2428, 2428, 2428, 2429, 2429,    0, 2429,
     2429, 2429, 2429, 2429, 2429, 2429, 2429, 2429, 2430, 2430,
        0, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430, 2430,
     2431, 2431,    0, 2431, 2431, 2431, 2431, 2431, 2431, 2431,
     2431, 2431, 2432, 2432,    0, 2432, 2432, 2432, 2432, 2432,
     2432, 2432, 2432, 2432, 2433, 2433,    0, 2433, 2433, 2433,

     2433, 2433, 2433, 2433, 2433, 2433, 2434, 2434,    0, 2434,
     2434, 2434, 2434, 2434, 2434, 2434, 2434, 2434, 2435, 2435,
        0, 2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
     2436, 2436,    0, 2436, 2436, 2436, 2436, 2436, 2436, 2436,
     2436, 2436, 2437, 2437,    0, 2437, 2437, 2437, 2437, 2437,
     2437, 2437, 2437, 2437, 2438, 2438,    0, 2438, 2438, 2438,
     2438, 2438, 2438, 2438, 2438, 2438, 2439, 2439,    0, 2439,
     2439, 2439, 2439, 2439, 2439, 2439, 2439, 2439, 2440, 2440,
        0, 2440, 2440, 2440, 2440, 2440, 2440, 2440, 2440, 2440,
     2441, 2441,    0, 2441, 2441, 2441, 2441, 2441, 2441, 2441,

     2441, 2441, 2442, 2442,    0, 2442, 2442, 2442, 2442, 2442,
     2442, 2442, 2442, 2442, 2443, 2443,    0, 2443, 2443, 2443,
     2443, 2443, 2443, 2443, 2443, 2443, 2444, 2444,    0, 2444,
     2444, 2444, 2444, 2444, 2444, 2444, 2444, 2444, 2445, 2445,
        0, 2445, 2445, 2445, 2445, 2445, 2445, 2445, 2445, 2445,
     2446, 2446,    0, 2446, 2446, 2446, 2446, 2446, 2446, 2446,
     2446, 2446, 2447, 2447,    0, 2447, 2447, 2447, 2447, 2447,
     2447, 2447, 2447, 2447, 2448, 2448,    0, 2448, 2448, 2448,
     2448, 2448, 2448, 2448, 2448, 2448, 2449, 2449,    0, 2449,
     2449, 2449, 2449, 2449, 2449, 2449, 2449, 2449, 2450, 2450,

        0, 2450, 2450, 2450, 2450, 2450, 2450, 2450, 2450, 2450,
     2451, 2451,    0, 2451, 2451, 2451, 2451, 2451, 2451, 2451,
     2451, 2451, 2452, 2452,    0, 2452, 2452, 2452, 2452, 2452,
     2452, 2452, 2452, 2452, 2453, 2453,    0, 2453, 2453, 2453,
     2453, 2453, 2453, 2453, 2453, 2453, 2454, 2454,    0, 2454,
     2454, 2454, 2454, 2454, 2454, 2454, 2454, 2454, 2455, 2455,
        0, 2455, 2455, 2455, 2455, 2455, 2455, 2455, 2455, 2455,
     2456, 2456,    0, 2456, 2456, 2456, 2456, 2456, 2456, 2456,
     2456, 2456, 2457, 2457,    0, 2457, 2457, 2457, 2457, 2457,
     2457, 2457, 2457, 2457, 2458, 2458,    0, 2458, 2458, 2458,

     2458, 2458, 2458, 2458, 2458, 2458, 2459, 2459,    0, 2459,
     2459, 2459, 2459, 2459, 2459, 2459, 2459, 2459, 2460, 2460,
        0, 2460, 2460, 2460, 2460, 2460, 2460, 2460, 2460, 2460,
     2461, 2461,    0, 2461, 2461, 2461, 2461, 2461, 2461, 2461,
     2461, 2461, 2462, 2462,    0, 2462, 2462, 2462, 2462, 2462,
     2462, 2462, 2462, 2462, 2463, 2463,    0, 2463, 2463, 2463,
     2463, 2463, 2463, 2463, 2463, 2463, 2464, 2464,    0, 2464,
     2464, 2464, 2464, 2464, 2464, 2464, 2464, 2464, 2465, 2465,
        0, 2465, 2465, 2465, 2465, 2465, 2465, 2465, 2465, 2465,
     2466, 2466,    0, 2466, 2466, 2466, 2466, 2466, 2466, 2466,

     2466, 2466, 2467, 2467,    0, 2467, 2467, 2467, 2467, 2467,
     2467, 2467, 2467, 2467, 2468, 2468,    0, 2468, 2468, 2468,
     2468, 2468, 2468, 2468, 2468, 2468, 2469, 2469,    0, 2469,
     2469, 2469, 2469, 2469, 2469, 2469, 2469, 2469, 2470, 2470,
        0, 2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470,
     2471, 2471,    0, 2471, 2471, 2471, 2471, 2471, 2471, 2471,
     2471, 2471, 2472, 2472,    0, 2472, 2472, 2472, 2472, 2472,
     2472, 2472, 2472, 2472, 2473, 2473,    0, 2473, 2473, 2473,
     2473, 2473, 2473, 2473, 2473, 2473, 2474, 2474,    0, 2474,
     2474, 2474, 2474, 2474, 2474, 2474, 2474, 2474, 2475, 2475,

        0, 2475, 2475, 2475, 2475, 2475, 2475, 2475, 2475, 2475,
     2476, 2476,    0, 2476, 2476, 2476, 2476, 2476, 2476, 2476,
     2476, 2476, 2477, 2477,    0, 2477, 2477, 2477, 2477, 2477,
     2477, 2477, 2477, 2477, 2478, 2478,    0, 2478, 2478, 2478,
     2478, 2478, 2478, 2478, 2478, 2478, 2479, 2479,    0, 2479,
     2479, 2479, 2479, 2479, 2479, 2479, 2479, 2479, 2480, 2480,
        0, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480, 2480,
     2481, 2481,    0, 2481, 2481, 2481, 2481, 2481, 2481, 2481,
     2481, 2481, 2482, 2482,    0, 2482, 2482, 2482, 2482, 2482,
     2482, 2482, 2482, 2482, 2483, 2483,    0, 2483, 2483, 2483,

     2483, 2483, 2483, 2483, 2483, 2483, 2484, 2484,    0, 2484,
     2484, 2484, 2484, 2484, 2484, 2484, 2484, 2484, 2485, 2485,
        0, 2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485, 2485,
     2486, 2486,    0, 2486, 2486, 2486, 2486, 2486, 2486, 2486,
     2486, 2486, 2487, 2487,    0, 2487, 2487, 2487, 2487, 2487,
     2487, 2487, 2487, 2487, 2488, 2488,    0, 2488, 2488, 2488,
     2488, 2488, 2488, 2488, 2488, 2488, 2489, 2489,    0, 2489,
     2489, 2489, 2489, 2489, 2489, 2489, 2489, 2489, 2490, 2490,
        0, 2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490, 2490,
     2491, 2491,    0, 2491, 2491, 2491, 2491, 2491, 2491, 2491,

     2491, 2491, 2492, 2492,    0, 2492, 2492, 2492, 2492, 2492,
     2492, 2492, 2492, 2492, 2493, 2493,    0, 2493, 2493, 2493,
     2493, 2493, 2493, 2493, 2493, 2493, 2494, 2494,    0, 2494,
     2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494, 2495, 2495,
        0, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495, 2495,
     2496, 2496,    0, 2496, 2496, 2496, 2496, 2496, 2496, 2496,
     2496, 2496, 2497, 2497,    0, 2497, 2497, 2497, 2497, 2497,
     2497, 2497, 2497, 2497, 2498, 2498,    0, 2498, 2498, 2498,
     2498, 2498, 2498, 2498, 2498, 2498, 2499, 2499,    0, 2499,
     2499, 2499, 2499, 2499, 2499, 2499, 2499, 2499, 2500, 2500,

        0, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500, 2500,
     2501, 2501,    0, 2501, 2501, 2501, 2501, 2501, 2501, 2501,
     2501, 2501, 2502, 2502,    0, 2502, 2502, 2502, 2502, 2502,
     2502, 2502, 2502, 2502, 2503, 2503,    0, 2503, 2503, 2503,
     2503, 2503, 2503, 2503, 2503, 2503, 2504, 2504,    0, 2504,
     2504, 2504, 2504, 2504, 2504, 2504, 2504, 2504, 2505, 2505,
        0, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505, 2505,
     2506, 2506,    0, 2506, 2506, 2506, 2506, 2506, 2506, 2506,
     2506, 2506, 2507, 2507,    0, 2507, 2507, 2507, 2507, 2507,
     2507, 2507, 2507, 2507, 2508, 2508,    0, 2508, 2508, 2508,

     2508, 2508, 2508, 2508, 2508, 2508, 2509, 2509,    0, 2509,
     2509, 2509, 2509, 2509, 2509, 2509, 2509, 2509, 2510, 2510,
        0, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510, 2510,
     2511, 2511,    0, 2511, 2511, 2511, 2511, 2511, 2511, 2511,
     2511, 2511, 2512, 2512,    0, 2512, 2512, 2512, 2512, 2512,
     2512, 2512, 2512, 2512, 2513, 2513,    0, 2513, 2513, 2513,
     2513, 2513, 2513, 2513, 2513, 2513, 2514, 2514,    0, 2514,
     2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2515, 2515,
        0, 2515, 2515, 2515, 2515, 2515, 2515, 2515, 2515, 2515,
     2516, 2516,    0, 2516, 2516, 2516, 2516, 2516, 2516, 2516,

     2516, 2516, 2517, 2517,    0, 2517, 2517, 2517, 2517, 2517,
     2517, 2517, 2517, 2517, 2518, 2518,    0, 2518, 2518, 2518,
     2518, 2518, 2518, 2518, 2518, 2518, 2519, 2519,    0, 2519,
     2519, 2519, 2519, 2519, 2519, 2519, 2519, 2519, 2520, 2520,
        0, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520, 2520,
     2521, 2521,    0, 2521, 2521, 2521, 2521, 2521, 2521, 2521,
     2521, 2521, 2522, 2522,    0, 2522, 2522, 2522, 2522, 2522,
     2522, 2522, 2522, 2522, 2523, 2523,    0, 2523, 2523, 2523,
     2523, 2523, 2523, 2523, 2523, 2523, 2524, 2524,    0, 2524,
     2524, 2524, 2524, 2524, 2524, 2524, 2524, 2524, 2525, 2525,

        0, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525,
     2526, 2526,    0, 2526, 2526, 2526, 2526, 2526, 2526, 2526,
     2526, 2526, 2527, 2527,    0, 2527, 2527, 2527, 2527, 2527,
     2527, 2527, 2527, 2527, 2528, 2528,    0, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2529, 2529,    0, 2529,
     2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2530, 2530,
        0, 2530, 2530, 2530, 2530, 2530, 2530, 2530, 2530, 2530,
     2531, 2531,    0, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2532, 2532,    0, 2532, 2532, 2532, 2532, 2532,
     2532, 2532, 2532, 2532, 2533, 2533,    0, 2533, 2533, 2533,

     2533, 2533, 2533, 2533, 2533, 2533, 2534, 2534,    0, 2534,
     2534, 2534, 2534, 2534, 2534, 2534, 2534, 2534, 2535, 2535,
        0, 2535, 2535, 2535, 2535, 2535, 2535, 2535, 2535, 2535,
     2536, 2536,    0, 2536, 2536, 2536, 2536, 2536, 2536, 2536,
     2536, 2536, 2537, 2537,    0, 2537, 2537, 2537, 2537, 2537,
     2537, 2537, 2537, 2537, 2538, 2538,    0, 2538, 2538, 2538,
     2538, 2538, 2538, 2538, 2538, 2538, 2539, 2539,    0, 2539,
     2539, 2539, 2539, 2539, 2539, 2539, 2539, 2539, 2540, 2540,
        0, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540, 2540,
     2541, 2541,    0, 2541, 2541, 2541, 2541, 2541, 2541, 2541,

     2541, 2541, 2542, 2542,    0, 2542, 2542, 2542, 2542, 2542,
     2542, 2542, 2542, 2542, 2543, 2543,    0, 2543, 2543, 2543,
     2543, 2543, 2543, 2543, 2543, 2543, 2544, 2544,    0, 2544,
     2544, 2544, 2544, 2544, 2544, 2544, 2544, 2544, 2545, 2545,
        0, 2545, 2545, 2545, 2545, 2545, 2545, 2545, 2545, 2545,
     2546, 2546,    0, 2546, 2546, 2546, 2546, 2546, 2546, 2546,
     2546, 2546, 2547, 2547,    0, 2547, 2547, 2547, 2547, 2547,
     2547, 2547, 2547, 2547, 2548, 2548,    0, 2548, 2548, 2548,
     2548, 2548, 2548, 2548, 2548, 2548, 2549, 2549,    0, 2549,
     2549, 2549, 2549, 2549, 2549, 2549, 2549, 2549, 2550, 2550,

        0, 2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550,
     2551, 2551,    0, 2551, 2551, 2551, 2551, 2551, 2551, 2551,
     2551, 2551, 2552, 2552,    0, 2552, 2552, 2552, 2552, 2552,
     2552, 2552, 2552, 2552, 2553, 2553,    0, 2553, 2553, 2553,
     2553, 2553, 2553, 2553, 2553, 2553, 2554, 2554,    0, 2554,
     2554, 2554, 2554, 2554, 2554, 2554, 2554, 2554, 2555, 2555,
        0, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555, 2555,
     2556, 2556,    0, 2556, 2556, 2556, 2556, 2556, 2556, 2556,
     2556, 2556, 2557, 2557,    0, 2557, 2557, 2557, 2557, 2557,
     2557, 2557, 2557, 2557, 2558, 2558,    0, 2558, 2558, 2558,

     2558, 2558, 2558, 2558, 2558, 2558, 2559, 2559,    0, 2559,
     2559, 2559, 2559, 2559, 2559, 2559, 2559, 2559, 2560, 2560,
        0, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560, 2560,
     2561, 2561,    0, 2561, 2561, 2561, 2561, 2561, 2561, 2561,
     2561, 2561, 2562, 2562,    0, 2562, 2562, 2562, 2562, 2562,
     2562, 2562, 2562, 2562, 2563, 2563,    0, 2563, 2563, 2563,
     2563, 2563, 2563, 2563, 2563, 2563, 2564, 2564,    0, 2564,
     2564, 2564, 2564, 2564, 2564, 2564, 2564, 2564, 2565, 2565,
        0, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565, 2565,
     2566, 2566,    0, 2566, 2566, 2566, 2566, 2566, 2566, 2566,

     2566, 2566, 2567, 2567,    0, 2567, 2567, 2567, 2567, 2567,
     2567, 2567, 2567, 2567, 2568, 2568,    0, 2568, 2568, 2568,
     2568, 2568, 2568, 2568, 2568, 2568, 2569, 2569,    0, 2569,
     2569, 2569, 2569, 2569, 2569, 2569, 2569, 2569, 2570, 2570,
        0, 2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570, 2570,
     2571, 2571,    0, 2571, 2571, 2571, 2571, 2571, 2571, 2571,
     2571, 2571, 2572, 2572,    0, 2572, 2572, 2572, 2572, 2572,
     2572, 2572, 2572, 2572, 2573, 2573,    0, 2573, 2573, 2573,
     2573, 2573, 2573, 2573, 2573, 2573, 2574, 2574,    0, 2574,
     2574, 2574, 2574, 2574, 2574, 2574, 2574, 2574, 2575, 2575,

        0, 2575, 2575, 2575, 2575, 2575, 2575, 2575, 2575, 2575,
     2576, 2576,    0, 2576, 2576, 2576, 2576, 2576, 2576, 2576,
     2576, 2576, 2577, 2577,    0, 2577, 2577, 2577, 2577, 2577,
     2577, 2577, 2577, 2577, 2578, 2578,    0, 2578, 2578, 2578,
     2578, 2578, 2578, 2578, 2578, 2578, 2579, 2579,    0, 2579,
     2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2580, 2580,
        0, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580, 2580,
     2581, 2581,    0, 2581, 2581, 2581, 2581, 2581, 2581, 2581,
     2581, 2581, 2582, 2582,    0, 2582, 2582, 2582, 2582, 2582,
     2582, 2582, 2582, 2582, 2583, 2583,    0, 2583, 2583, 2583,

     2583, 2583, 2583, 2583, 2583, 2583, 2584, 2584,    0, 2584,
     2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2585, 2585,
        0, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585, 2585,
     2586, 2586,    0, 2586, 2586, 2586, 2586, 2586, 2586, 2586,
     2586, 2586, 2587, 2587,    0, 2587, 2587, 2587, 2587, 2587,
     2587, 2587, 2587, 2587, 2588, 2588,    0, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2589, 2589,    0, 2589,
     2589, 2589, 2589, 2589, 2589, 2589, 2589, 2589, 2590, 2590,
        0, 2590, 2590, 2590, 2590, 2590, 2590, 2590, 2590, 2590,
     2591, 2591,    0, 2591, 2591, 2591, 2591, 2591, 2591, 2591,

     2591, 2591, 2592, 2592,    0, 2592, 2592, 2592, 2592, 2592,
     2592, 2592, 2592, 2592, 2593, 2593,    0, 2593, 2593, 2593,
     2593, 2593, 2593, 2593, 2593, 2593, 2594, 2594,    0, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2595, 2595,
        0, 2595, 2595, 2595, 2595, 2595, 2595, 2595, 2595, 2595,
     2596, 2596,    0, 2596, 2596, 2596, 2596, 2596, 2596, 2596,
     2596, 2596, 2597, 2597,    0, 2597, 2597, 2597, 2597, 2597,
     2597, 2597, 2597, 2597, 2598, 2598,    0, 2598, 2598, 2598,
     2598, 2598, 2598, 2598, 2598, 2598, 2599, 2599,    0, 2599,
     2599, 2599, 2599, 2599, 2599, 2599, 2599, 2599, 2600, 2600,

        0, 2600, 2600, 2600, 2600, 2600, 2600, 2600, 2600, 2600,
     2601, 2601,    0, 2601, 2601, 2601, 2601, 2601, 2601, 2601,
     2601, 2601, 2602, 2602,    0, 2602, 2602, 2602, 2602, 2602,
     2602, 2602, 2602, 2602, 2603, 2603,    0, 2603, 2603, 2603,
     2603, 2603, 2603, 2603, 2603, 2603, 2604, 2604,    0, 2604,
     2604, 2604, 2604, 2604, 2604, 2604, 2604, 2604, 2605, 2605,
        0, 2605, 2605, 2605, 2605, 2605, 2605, 2605, 2605, 2605,
     2606, 2606,    0, 2606, 2606, 2606, 2606, 2606, 2606, 2606,
     2606, 2606, 2607, 2607,    0, 2607, 2607, 2607, 2607, 2607,
     2607, 2607, 2607, 2607, 2608, 2608,    0, 2608, 2608, 2608,

     2608, 2608, 2608, 2608, 2608, 2608, 2609, 2609,    0, 2609,
     2609, 2609, 2609, 2609, 2609, 2609, 2609, 2609, 2610, 2610,
        0, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610, 2610,
     2611, 2611,    0, 2611, 2611, 2611, 2611, 2611, 2611, 2611,
     2611, 2611, 2612, 2612,    0, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2612, 2612, 2613, 2613,    0, 2613, 2613, 2613,
     2613, 2613, 2613, 2613, 2613, 2613, 2614, 2614,    0, 2614,
     2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2615, 2615,
        0, 2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615,
     2616, 2616,    0, 2616, 2616, 2616, 2616, 2616, 2616, 2616,

     2616, 2616, 2617, 2617,    0, 2617, 2617, 2617, 2617, 2617,
     2617, 2617, 2617, 2617, 2618, 2618,    0, 2618, 2618, 2618,
     2618, 2618, 2618, 2618, 2618, 2618, 2619, 2619,    0, 2619,
     2619, 2619, 2619, 2619, 2619, 2619, 2619, 2619, 2620, 2620,
        0, 2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620,
     2621, 2621,    0, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2621, 2621, 2622, 2622,    0, 2622, 2622, 2622, 2622, 2622,
     2622, 2622, 2622, 2622, 2623, 2623,    0, 2623, 2623, 2623,
     2623, 2623, 2623, 2623, 2623, 2623, 2624, 2624,    0, 2624,
     2624, 2624, 2624, 2624, 2624, 2624, 2624, 2624, 2625, 2625,

        0, 2625, 2625, 2625, 2625, 2625, 2625, 2625, 2625, 2625,
     2626, 2626,    0, 2626, 2626, 2626, 2626, 2626, 2626, 2626,
     2626, 2626, 2627, 2627,    0, 2627, 2627, 2627, 2627, 2627,
     2627, 2627, 2627, 2627, 2628, 2628,    0, 2628, 2628, 2628,
     2628, 2628, 2628, 2628, 2628, 2628, 2629, 2629,    0, 2629,
     2629, 2629, 2629, 2629, 2629, 2629, 2629, 2629, 2630, 2630,
        0, 2630, 2630, 2630, 2630, 2630, 2630, 2630, 2630, 2630,
     2631, 2631,    0, 2631, 2631, 2631, 2631, 2631, 2631, 2631,
     2631, 2631, 2632, 2632,    0, 2632, 2632, 2632, 2632, 2632,
     2632, 2632, 2632, 2632, 2633, 2633,    0, 2633, 2633, 2633,

     2633, 2633, 2633, 2633, 2633, 2633, 2634, 2634,    0, 2634,
     2634, 2634, 2634, 2634, 2634, 2634, 2634, 2634, 2635, 2635,
        0, 2635, 2635, 2635, 2635, 2635, 2635, 2635, 2635, 2635,
     2636, 2636,    0, 2636, 2636, 2636, 2636, 2636, 2636, 2636,
     2636, 2636, 2637, 2637,    0, 2637, 2637, 2637, 2637, 2637,
     2637, 2637, 2637, 2637, 2638, 2638,    0, 2638, 2638, 2638,
     2638, 2638, 2638, 2638, 2638, 2638, 2639, 2639,    0, 2639,
     2639, 2639, 2639, 2639, 2639, 2639, 2639, 2639, 2640, 2640,
        0, 2640, 2640, 2640, 2640, 2640, 2640, 2640, 2640, 2640,
     2641, 2641,    0, 2641, 2641, 2641, 2641, 2641, 2641, 2641,

     2641, 2641, 2642, 2642,    0, 2642, 2642, 2642, 2642, 2642,
     2642, 2642, 2642, 2642, 2643, 2643,    0, 2643, 2643, 2643,
     2643, 2643, 2643, 2643, 2643, 2643, 2644, 2644,    0, 2644,
     2644, 2644, 2644, 2644, 2644, 2644, 2644, 2644, 2645, 2645,
        0, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645, 2645,
     2646, 2646,    0, 2646, 2646, 2646, 2646, 2646, 2646, 2646,
     2646, 2646, 2647, 2647,    0, 2647, 2647, 2647, 2647, 2647,
     2647, 2647, 2647, 2647, 2648, 2648,    0, 2648, 2648, 2648,
     2648, 2648, 2648, 2648, 2648, 2648, 2649, 2649,    0, 2649,
     2649, 2649, 2649, 2649, 2649, 2649, 2649, 2649, 2650, 2650,

        0, 2650, 2650, 2650, 2650, 2650, 2650, 2650, 2650, 2650,
     2651, 2651,    0, 2651, 2651, 2651, 2651, 2651, 2651, 2651,
     2651, 2651, 2652, 2652,    0, 2652, 2652, 2652, 2652, 2652,
     2652, 2652, 2652, 2652, 2653, 2653,    0, 2653, 2653, 2653,
     2653, 2653, 2653, 2653, 2653, 2653, 2654, 2654,    0, 2654,
     2654, 2654, 2654, 2654, 2654, 2654, 2654, 2654, 2655, 2655,
        0, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655,
     2656, 2656,    0, 2656, 2656, 2656, 2656, 2656, 2656, 2656,
     2656, 2656, 2657, 2657,    0, 2657, 2657, 2657, 2657, 2657,
     2657, 2657, 2657, 2657, 2658, 2658,    0, 2658, 2658, 2658,

     2658, 2658, 2658, 2658, 2658, 2658, 2659, 2659,    0, 2659,
     2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2660, 2660,
        0, 2660, 2660, 2660, 2660, 2660, 2660, 2660, 2660, 2660,
     2661, 2661,    0, 2661, 2661, 2661, 2661, 2661, 2661, 2661,
     2661, 2661, 2662, 2662,    0, 2662, 2662, 2662, 2662, 2662,
     2662, 2662, 2662, 2662, 2663, 2663,    0, 2663, 2663, 2663,
     2663, 2663, 2663, 2663, 2663, 2663, 2664, 2664,    0, 2664,
     2664, 2664, 2664, 2664, 2664, 2664, 2664, 2664, 2665, 2665,
        0, 2665, 2665, 2665, 2665, 2665, 2665, 2665, 2665, 2665,
     2666, 2666,    0, 2666, 2666, 2666, 2666, 2666, 2666, 2666,

     2666, 2666, 2667, 2667,    0, 2667, 2667, 2667, 2667, 2667,
     2667, 2667, 2667, 2667, 2668, 2668,    0, 2668, 2668, 2668,
     2668, 2668, 2668, 2668, 2668, 2668, 2669, 2669,    0, 2669,
     2669, 2669, 2669, 2669, 2669, 2669, 2669, 2669, 2670, 2670,
        0, 2670, 2670, 2670, 2670, 2670, 2670, 2670, 2670, 2670,
     2671, 2671,    0, 2671, 2671, 2671, 2671, 2671, 2671, 2671,
     2671, 2671, 2672, 2672,    0, 2672, 2672, 2672, 2672, 2672,
     2672, 2672, 2672, 2672, 2673, 2673,    0, 2673, 2673, 2673,
     2673, 2673, 2673, 2673, 2673, 2673, 2674, 2674,    0, 2674,
     2674, 2674, 2674, 2674, 2674, 2674, 2674, 2674, 2675, 2675,

        0, 2675, 2675, 2675, 2675, 2675, 2675, 2675, 2675, 2675,
     2676, 2676,    0, 2676, 2676, 2676, 2676, 2676, 2676, 2676,
     2676, 2676, 2677, 2677,    0, 2677, 2677, 2677, 2677, 2677,
     2677, 2677, 2677, 2677, 2678, 2678,    0, 2678, 2678, 2678,
     2678, 2678, 2678, 2678, 2678, 2678, 2679, 2679,    0, 2679,
     2679, 2679, 2679, 2679, 2679, 2679, 2679, 2679, 2680, 2680,
        0, 2680, 2680, 2680, 2680, 2680, 2680, 2680, 2680, 2680,
     2681, 2681,    0, 2681, 2681, 2681, 2681, 2681, 2681, 2681,
     2681, 2681, 2682, 2682,    0, 2682, 2682, 2682, 2682, 2682,
     2682, 2682, 2682, 2682, 2683, 2683,    0, 2683, 2683, 2683,

     2683, 2683, 2683, 2683, 2683, 2683, 2684, 2684,    0, 2684,
     2684, 2684, 2684, 2684, 2684, 2684, 2684, 2684, 2685, 2685,
        0, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685, 2685,
     2686, 2686,    0, 2686, 2686, 2686, 2686, 2686, 2686, 2686,
     2686, 2686, 2687, 2687,    0, 2687, 2687, 2687, 2687, 2687,
     2687, 2687, 2687, 2687, 2688, 2688,    0, 2688, 2688, 2688,
     2688, 2688, 2688, 2688, 2688, 2688, 2689, 2689,    0, 2689,
     2689, 2689, 2689, 2689, 2689, 2689, 2689, 2689, 2690, 2690,
        0, 2690, 2690, 2690, 2690, 2690, 2690, 2690, 2690, 2690,
     2691, 2691,    0, 2691, 2691, 2691, 2691, 2691, 2691, 2691,

     2691, 2691, 2692, 2692,    0, 2692, 2692, 2692, 2692, 2692,
     2692, 2692, 2692, 2692, 2693, 2693,    0, 2693, 2693, 2693,
     2693, 2693, 2693, 2693, 2693, 2693, 2694, 2694,    0, 2694,
     2694, 2694, 2694, 2694, 2694, 2694, 2694, 2694, 2695, 2695,
        0, 2695, 2695, 2695, 2695, 2695, 2695, 2695, 2695, 2695,
     2696, 2696,    0, 2696, 2696, 2696, 2696, 2696, 2696, 2696,
     2696, 2696, 2697, 2697,    0, 2697, 2697, 2697, 2697, 2697,
     2697, 2697, 2697, 2697, 2698, 2698,    0, 2698, 2698, 2698,
     2698, 2698, 2698, 2698, 2698, 2698, 2699, 2699,    0, 2699,
     2699, 2699, 2699, 2699, 2699, 2699, 2699, 2699, 2700, 2700,

        0, 2700, 2700, 2700, 2700, 2700, 2700, 2700, 2700, 2700,
     2701, 2701,    0, 2701, 2701, 2701, 2701, 2701, 2701, 2701,
     2701, 2701, 2702, 2702,    0, 2702, 2702, 2702, 2702, 2702,
     2702, 2702, 2702, 2702, 2703, 2703,    0, 2703, 2703, 2703,
     2703, 2703, 2703, 2703, 2703, 2703, 2704, 2704,    0, 2704,
     2704, 2704, 2704, 2704, 2704, 2704, 2704, 2704, 2705, 2705,
        0, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705,
     2706, 2706,    0, 2706, 2706, 2706, 2706, 2706, 2706, 2706,
     2706, 2706, 2707, 2707,    0, 2707, 2707, 2707, 2707, 2707,
     2707, 2707, 2707, 2707, 2708, 2708,    0, 2708, 2708, 2708,

     2708, 2708, 2708, 2708, 2708, 2708, 2709, 2709,    0, 2709,
     2709, 2709, 2709, 2709, 2709, 2709, 2709, 2709, 2710, 2710,
        0, 2710, 2710, 2710, 2710, 2710, 2710, 2710, 2710, 2710,
     2711, 2711,    0, 2711, 2711, 2711, 2711, 2711, 2711, 2711,
     2711, 2711, 2712, 2712,    0, 2712, 2712, 2712, 2712, 2712,
     2712, 2712, 2712, 2712, 2713, 2713,    0, 2713, 2713, 2713,
     2713, 2713, 2713, 2713, 2713, 2713, 2714, 2714,    0, 2714,
     2714, 2714, 2714, 2714, 2714, 2714, 2714, 2714, 2715, 2715,
        0, 2715, 2715, 2715, 2715, 2715, 2715, 2715, 2715, 2715,
     2716, 2716,    0, 2716, 2716, 2716, 2716, 2716, 2716, 2716,

     2716, 2716, 2717, 2717,    0, 2717, 2717, 2717, 2717, 2717,
     2717, 2717, 2717, 2717, 2718, 2718,    0, 2718, 2718, 2718,
     2718, 2718, 2718, 2718, 2718, 2718, 2719, 2719,    0, 2719,
     2719, 2719, 2719, 2719, 2719, 2719, 2719, 2719, 2720, 2720,
        0, 2720, 2720, 2720, 2720, 2720, 2720, 2720, 2720, 2720,
     2721, 2721,    0, 2721, 2721, 2721, 2721, 2721, 2721, 2721,
     2721, 2721, 2722, 2722,    0, 2722, 2722, 2722, 2722, 2722,
     2722, 2722, 2722, 2722, 2723, 2723,    0, 2723, 2723, 2723,
     2723, 2723, 2723, 2723, 2723, 2723, 2724, 2724,    0, 2724,
     2724, 2724, 2724, 2724, 2724, 2724, 2724, 2724, 2725, 2725,

        0, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725, 2725,
     2726, 2726,    0, 2726, 2726, 2726, 2726, 2726, 2726, 2726,
     2726, 2726, 2727, 2727,    0, 2727, 2727, 2727, 2727, 2727,
     2727, 2727, 2727, 2727, 2728, 2728,    0, 2728, 2728, 2728,
     2728, 2728, 2728, 2728, 2728, 2728, 2729, 2729,    0, 2729,
     2729, 2729, 2729, 2729, 2729, 2729, 2729, 2729, 2730, 2730,
        0, 2730, 2730, 2730, 2730, 2730, 2730, 2730, 2730, 2730,
     2731, 2731,    0, 2731, 2731, 2731, 2731, 2731, 2731, 2731,
     2731, 2731, 2732, 2732,    0, 2732, 2732, 2732, 2732, 2732,
     2732, 2732, 2732, 2732, 2733, 2733,    0, 2733, 2733, 2733,

     2733, 2733, 2733, 2733, 2733, 2733, 2734, 2734,    0, 2734,
     2734, 2734, 2734, 2734, 2734, 2734, 2734, 2734, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008,
     2008, 2008
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Copyright (C) 2011-2019 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/
#line 27 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"

#undef yyFlexLexer

#include <chemkinReader.hxx>

#include <error.hxx>
#include <IStringStream.hxx>
// For EOF only
#include <cstdio>

// flex input buffer size
int tnbLib::chemkinReader::yyBufSize = YY_BUF_SIZE;

// Dummy yyFlexLexer::yylex() to keep the linker happy. It is not called
//! \cond dummy
int yyFlexLexer::yylex()
{
    FatalErrorInFunction
        << "should not have called this function"
        << abort(tnbLib::FatalError);

    return 0;
}
//! \endcond


// Dummy yywrap to keep yylex happy at compile time.
// It is called by yylex but is not used as the mechanism to change file.
// See <<EOF>>
//! \cond dummy
#if YY_FLEX_MINOR_VERSION < 6 && YY_FLEX_SUBMINOR_VERSION < 34
extern "C" int yywrap()
#else
int yyFlexLexer::yywrap()
#endif
{
    return 1;
}
//! \endcond


tnbLib::string foamSpecieString(const char* YYText)
{
    tnbLib::string specieString(YYText);
    return specieString;
}


tnbLib::word foamName(const char* YYText)
{
    tnbLib::string fn(YYText);
    tnbLib::string::stripInvalid<tnbLib::word>(fn);
    return fn;
}


tnbLib::word foamName(const tnbLib::string& s)
{
    tnbLib::string fn(s);
    tnbLib::string::stripInvalid<tnbLib::word>(fn);
    return fn;
}


 /* ------------------------------------------------------------------------- *\
   ------ cppLexer::yylex()
 \* ------------------------------------------------------------------------- */

#define YY_DECL int tnbLib::chemkinReader::lex()

#line 4084 "chemkinLexer.cxx"
#line 170 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
 /* ------------------------------------------------------------------------- *\
                      -----  Exclusive start states -----
 \* ------------------------------------------------------------------------- */





























#line 4118 "chemkinLexer.cxx"

#define INITIAL 0
#define readElements 1
#define readIsotopeMolW 2
#define readSpecies 3
#define readThermoAll 4
#define readThermoSpecieName 5
#define readThermoDate 6
#define readThermoFormula 7
#define readThermoPhase 8
#define readThermoTemps 9
#define readThermoFormula2 10
#define readThermoLineLabel1 11
#define readThermoCoeff1 12
#define readThermoLineLabel2 13
#define readThermoCoeff2 14
#define readThermoLineLabel3 15
#define readThermoCoeff3 16
#define readThermoLineLabel4 17
#define readReactionsUnits 18
#define readReactionKeyword 19
#define readSpecieNamePlus 20
#define readReactionDelimiter 21
#define readPDependentSpecie 22
#define readThirdBodyEfficiency 23
#define readReactionCoeffs 24
#define readTdepSpecie 25
#define readReactionOrderSpecie 26
#define readReactionOrder 27
#define readReactionUnit 28
#define CHEMKINError 29

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 206 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"




static const char* stateNames[30] =
{
    "reading CHEMKIN III file",
    "reading elements",
    "reading isotope molecular weight",
    "reading species",
    "reading all thermodynamic data temperatures",
    "reading thermodynamic specie name",
    "reading thermodynamic data date",
    "reading thermodynamic data specie formula",
    "reading thermodynamic data specie phase",
    "reading thermodynamic data temperatures",
    "reading thermodynamic data specie formula (supplement)",
    "reading thermodynamic data line label 1",
    "reading thermodynamic data coefficient set 1",
    "reading thermodynamic data line label 2",
    "reading thermodynamic data coefficient set 2",
    "reading thermodynamic data line label 3",
    "reading thermodynamic data coefficient set 3",
    "reading thermodynamic data line label 4",
    "reading reaction units",
    "reading reaction specie/keyword",
    "reading reaction specie",
    "reading reaction delimiter",
    "reading reaction pressure dependent specie",
    "reading third-body efficiency",
    "reading reaction coeff",
    "reading temperature dependent specie name",
    "reading reaction order specie name",
    "reading reaction order",
    "reading reaction unit",
    "error"
};

static const char* stateExpects[30] =
{
    "'ELEMENTS' or 'ELEM', 'SPECIES' or 'SPEC', 'THERMO' or 'THERMO ALL', 'REACTIONS'",
    "<elementName>, <isotopeName> / or 'END'",
    "<scalar>/",
    "<specieName> or 'END'",
    "<scalar><scalar><scalar> (3F10.0)",
    "<word> (18A1)",
    "<word> (6A1)",
    "<word><label><word><label><word><label><word><label> (4(2A1,I3))",
    "<char> (A1)",
    "<scalar><scalar><scalar> (E10.0E10.0E8.0)",
    "<word><label> (2A1,I3)",
    "'1' (I1)",
    "<scalar><scalar><scalar><scalar><scalar> (5(E15.0))",
    "'2' (I1)",
    "<scalar><scalar><scalar><scalar><scalar> (5(E15.0))",
    "'3' (I1)",
    "<scalar><scalar><scalar><scalar> (4(E15.0))",
    "'4' (I1)",
    "'CAL/MOLE', 'KCAL/MOLE', 'JOULES/MOLE', 'KELVINS', 'EVOLTS', 'MOLES' or 'MOLECULES'",
    "<word> or <label>",
    "'+'",
    "'+', '=', '<=>', '=>', '(+<word>', '<scalar> <scalar> <scalar>'",
    "<word>')'",
    "<scalar>'/'",
    "<scalar>",
    "<word>",
    "<word>",
    "<scalar>",
    "'MOLE', 'MOLECULE', 'CAL', 'KCAL', 'JOUL', 'KJOU', 'KELV', 'KELVIN', 'EVOL' or 'EVOLTS'",
    ""
};

string startError;

static const scalar RRjoule = 8.31451; // J/kg-mol-K
static const scalar RRcal = 1.987316;  // cal/g-mol-K

scalar RRreactions = RRcal;
scalar RRreaction = RRcal;

scalar allCommonT = 1000.0;

word currentElementName;
label currentElementIndex = 0;

word currentSpecieName;
label currentSpecieIndex = 0;
label nSpecieElements = 0;
List<specieElement> currentSpecieComposition(5);

scalar currentLowT = 0;
scalar currentHighT = 0;
scalar currentCommonT = 0;
gasHThermoPhysics::coeffArray highCpCoeffs(scalarList(7));
gasHThermoPhysics::coeffArray lowCpCoeffs(scalarList(7));

specieCoeffs currentSpecieCoeff;

DynamicList<specieCoeffs> lhs;
DynamicList<specieCoeffs> rhs;

scalarList ArrheniusCoeffs(3);
DynamicList<scalar> reactionCoeffs;
scalarList thirdBodyEfficiencies;
label currentThirdBodyIndex = -1;

word reactionCoeffsName = word::null;
HashTable<scalarList> reactionCoeffsTable;

DynamicList<specieCoeffs> *lrhsPtr = &lhs;

reactionType rType = unknownReactionType;
reactionRateType rrType = Arrhenius;
fallOffFunctionType fofType = unknownFallOffFunctionType;
word pDependentSpecieName = word::null;
label lhsThirdBodyCounter = 0;
label rhsThirdBodyCounter = 0;

bool finishReaction = false;



 /* ------------------------------------------------------------------------- *\
                            ------ Start Lexing ------
 \* ------------------------------------------------------------------------- */

 /* ------------------------------------------------------------------------- *\
    ------ Discard comments being careful to count comments
 \* ------------------------------------------------------------------------- */

#line 4502 "chemkinLexer.cxx"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2009 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 12019 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 336 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{ // Remove one line comments
    }
	YY_BREAK
/* ------------------------------------------------------------------------- *\
    ------ Read elements
 \* ------------------------------------------------------------------------- */
case 2:
YY_RULE_SETUP
#line 343 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        BEGIN(readElements);
    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 347 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        currentElementName = foamName(YYText());
        correctElementName(currentElementName);

        if (!elementIndices_.found(currentElementName))
        {
            elementIndices_.insert(currentElementName, currentElementIndex++);
            elementNames_.append(currentElementName);
        }
        else
        {
            WarningInFunction
                << "element " << currentElementName
                << " already in table." << endl;
        }
    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 364 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        BEGIN(readIsotopeMolW);
    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 368 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        isotopeAtomicWts_.insert(currentElementName, stringToScalar(YYText()));
        BEGIN(readElements);
    }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 373 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        BEGIN(INITIAL);
    }
	YY_BREAK
/* ------------------------------------------------------------------------- *\
    ------ Read species
 \* ------------------------------------------------------------------------- */
case 7:
YY_RULE_SETUP
#line 381 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        BEGIN(readSpecies);
    }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 385 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        word specieName(foamName(foamSpecieString(YYText())));

        if (specieName == "THERMO")
        {
            specieNames_.shrink();
            speciesTable_ = specieNames_;
            thirdBodyEfficiencies.setSize(specieNames_.size());
            thirdBodyEfficiencies = 1.0;
            BEGIN(readThermoSpecieName);
        }
        else if (specieName == "END")
        {
            specieNames_.shrink();
            speciesTable_ = specieNames_;
            thirdBodyEfficiencies.setSize(specieNames_.size());
            thirdBodyEfficiencies = 1.0;
            BEGIN(INITIAL);
        }
        else
        {
            if (!specieIndices_.found(specieName))
            {
                specieNames_.append(specieName);
                specieIndices_.insert(specieName, currentSpecieIndex++);
            }
            else
            {
                WarningInFunction
                    << "specie " << specieName
                    << " already in table." << endl;
            }
        }
    }
	YY_BREAK
/* ------------------------------------------------------------------------- *\
    ------ Read thermo
 \* ------------------------------------------------------------------------- */
case 9:
YY_RULE_SETUP
#line 424 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        BEGIN(readThermoSpecieName);
    }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 428 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        BEGIN(readThermoAll);
    }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 432 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        string temperaturesString(YYText());
        // scalar lowestT(stringToScalar(temperaturesString(0, 10)));
        allCommonT = stringToScalar(temperaturesString(10, 10));
        // scalar highestT(stringToScalar(temperaturesString(20, 10)));
        BEGIN(readThermoSpecieName);
    }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 440 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        string specieString(foamSpecieString(YYText()));
        if (newFormat_)
        {
            specieString.replaceAll(" ", "_");
            size_t strEnd = specieString.find_last_not_of('_');
            currentSpecieName = specieString.substr(0, strEnd + 1);
        }
        else
        {
            size_t spacePos = specieString.find(' ');
            if (spacePos != string::npos)
            {
                currentSpecieName = specieString(0, spacePos);
            }
            else
            {
                currentSpecieName = specieString;
            }
        }

        BEGIN(readThermoDate);
    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 464 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        // string thermoDate(YYText());
        // Date is not currently used
        BEGIN(readThermoFormula);
    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 470 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        string thermoFormula(YYText());

        nSpecieElements = 0;
        currentSpecieComposition.setSize(5);

        for (int i=0; i<4; i++)
        {
            word elementName(foamName(thermoFormula(5*i, 2)));
            label nAtoms = atoi(thermoFormula(5*i + 2, 3).c_str());

            if (elementName.size() && nAtoms)
            {
                correctElementName(elementName);
                currentSpecieComposition[nSpecieElements].name() =
                    elementName;
                currentSpecieComposition[nSpecieElements++].nAtoms() = nAtoms;
            }
        }

        BEGIN(readThermoPhase);
    }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 493 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        char phaseChar = YYText()[0];

        switch (phaseChar)
        {
            case 'S':
                speciePhase_.insert(currentSpecieName, solid);
            break;

            case 'L':
                speciePhase_.insert(currentSpecieName, liquid);
            break;

            case 'G':
                speciePhase_.insert(currentSpecieName, gas);
            break;
        }

        BEGIN(readThermoTemps);
    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 514 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        string temperaturesString(YYText());
        currentLowT = stringToScalar(temperaturesString(0, 10));
        currentHighT = stringToScalar(temperaturesString(10, 10));
        currentCommonT = stringToScalar(temperaturesString(20, 8));

        if (currentCommonT < SMALL)
        {
            currentCommonT = allCommonT;
        }

        BEGIN(readThermoFormula2);
    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 528 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        string thermoFormula(YYText());
        word elementName(foamName(thermoFormula(0, 2)));
        label nAtoms = atoi(thermoFormula(2, 3).c_str());

        if
        (
            elementName.size()
         && elementName.find('0') == string::npos
         && nAtoms
        )
        {
            correctElementName(elementName);
            currentSpecieComposition[nSpecieElements].name() =
                elementName;
            currentSpecieComposition[nSpecieElements++].nAtoms() = nAtoms;
        }

        currentSpecieComposition.setSize(nSpecieElements);

        speciesCompositionTable::iterator specieCompositionIter
        (
            speciesComposition_.find(currentSpecieName)
        );

        if (specieCompositionIter != speciesComposition_.end())
        {
            speciesComposition_.erase(specieCompositionIter);
        }

        speciesComposition_.insert
        (
            currentSpecieName,
            currentSpecieComposition
        );

        BEGIN(readThermoLineLabel1);
    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 567 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        BEGIN(readThermoCoeff1);
    }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 571 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        string thermoCoeffString(YYText());

        highCpCoeffs[0] = stringToScalar(thermoCoeffString(0, 15));
        highCpCoeffs[1] = stringToScalar(thermoCoeffString(15, 15));
        highCpCoeffs[2] = stringToScalar(thermoCoeffString(30, 15));
        highCpCoeffs[3] = stringToScalar(thermoCoeffString(45, 15));
        highCpCoeffs[4] = stringToScalar(thermoCoeffString(60, 15));

        BEGIN(readThermoLineLabel2);
    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 583 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        BEGIN(readThermoCoeff2);
    }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 587 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        string thermoCoeffString(YYText());

        highCpCoeffs[5] = stringToScalar(thermoCoeffString(0, 15));
        highCpCoeffs[6] = stringToScalar(thermoCoeffString(15, 15));

        lowCpCoeffs[0] = stringToScalar(thermoCoeffString(30, 15));
        lowCpCoeffs[1] = stringToScalar(thermoCoeffString(45, 15));
        lowCpCoeffs[2] = stringToScalar(thermoCoeffString(60, 15));

        BEGIN(readThermoLineLabel3);
    }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 600 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        BEGIN(readThermoCoeff3);
    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 604 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        string thermoCoeffString(YYText());

        lowCpCoeffs[3] = stringToScalar(thermoCoeffString(0, 15));
        lowCpCoeffs[4] = stringToScalar(thermoCoeffString(15, 15));
        lowCpCoeffs[5] = stringToScalar(thermoCoeffString(30, 15));
        lowCpCoeffs[6] = stringToScalar(thermoCoeffString(45, 15));

        BEGIN(readThermoLineLabel4);
    }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 615 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{

        HashPtrTable<gasHThermoPhysics>::iterator specieThermoIter
        (
            speciesThermo_.find(currentSpecieName)
        );

        if (specieThermoIter != speciesThermo_.end())
        {
            speciesThermo_.erase(specieThermoIter);
        }

        speciesThermo_.insert
        (
            currentSpecieName,
            new gasHThermoPhysics
            (
                janafThermo<perfectGas<specie>>
                (
                    specie
                    (
                        currentSpecieName,
                        1.0,
                        molecularWeight(currentSpecieComposition)
                    ),
                    currentLowT,
                    currentHighT,
                    currentCommonT,
                    highCpCoeffs,
                    lowCpCoeffs,
                    true
                ),
                transportDict_.subDict(currentSpecieName)
            )
        );

        BEGIN(readThermoSpecieName);
    }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 654 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        Reaction<gasHThermoPhysics>::TlowDefault = max
        (
            Reaction<gasHThermoPhysics>::TlowDefault,
            currentLowT
        );

        Reaction<gasHThermoPhysics>::ThighDefault = min
        (
            Reaction<gasHThermoPhysics>::ThighDefault,
            currentHighT
        );

        BEGIN(INITIAL);
    }
	YY_BREAK
/* ------------------------------------------------------------------------- *\
    ------ Read reactions
 \* ------------------------------------------------------------------------- */
case 26:
YY_RULE_SETUP
#line 674 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        currentSpecieCoeff.stoichCoeff = 1.0;
        currentSpecieCoeff.exponent = currentSpecieCoeff.stoichCoeff;
        BEGIN(readReactionsUnits);
    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 680 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        RRreactions = RRcal;
    }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 684 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        RRreactions = RRcal/1000.0;
    }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 688 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        RRreactions = RRjoule;
    }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 692 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        RRreactions = 1.0;
    }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 696 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
    }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 699 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        lineNo_++;
        BEGIN(readReactionKeyword);
    }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 704 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        currentSpecieCoeff.stoichCoeff = atof(YYText());
        currentSpecieCoeff.exponent = currentSpecieCoeff.stoichCoeff;
    }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 709 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{

        word keyword(foamName(YYText()));

        HashTable<int>::iterator reactionKeywordIter
        (
            reactionKeywordTable_.find(keyword)
        );

        if (reactionKeywordIter != reactionKeywordTable_.end())
        {
            switch(reactionKeywordIter())
            {
                case duplicateReactionType:
                {
                    BEGIN(readReactionKeyword);
                    break;
                }

                case thirdBodyReactionType:
                {
                    if (rrType != Arrhenius && rrType != thirdBodyArrhenius)
                    {
                        FatalErrorInFunction
                            << "Attempt to set reaction rate type to"
                               " thirdBodyArrhenius when it is already set to "
                            << reactionRateTypeNames[rrType]
                            << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    if (pDependentSpecieName.size())
                    {
                        FatalErrorInFunction
                            << "A non-pressure dependent third-body appears in"
                               " the pressure dependent reaction on line "
                            << lineNo_
                            << exit(FatalError);
                    }

                    rrType = thirdBodyArrhenius;

                    if (lrhsPtr == &lhs)
                    {
                        lhsThirdBodyCounter++;
                    }
                    else
                    {
                        rhsThirdBodyCounter++;
                    }

                    BEGIN(readReactionDelimiter);
                    break;
                }

                case plasmaMomentumTransfer:
                {
                    FatalErrorInFunction
                        << "Plasma momentum-transfer in reaction on line "
                        << lineNo_ << "not yet supported"
                        << exit(FatalError);

                    BEGIN(readReactionKeyword);
                    break;
                }

                case collisionCrossSection:
                {
                    FatalErrorInFunction
                        << "Collision cross-section in reaction on line "
                        << lineNo_ << "not yet supported"
                        << exit(FatalError);

                    BEGIN(readReactionKeyword);
                    break;
                }

                case end:
                {
                    BEGIN(INITIAL);
                    addReaction
                    (
                        lhs,
                        rhs,
                        thirdBodyEfficiencies,
                        rType,
                        rrType,
                        fofType,
                        ArrheniusCoeffs,
                        reactionCoeffsTable,
                        RRreaction
                    );
                    finishReaction = false;
                    rType = unknownReactionType;
                    rrType = Arrhenius;
                    fofType = unknownFallOffFunctionType;
                    thirdBodyEfficiencies = 1.0;
                    pDependentSpecieName = word::null;
                    lrhsPtr = &lhs;
                    break;
                }

                default:
                {
                    FatalErrorInFunction
                        << "keyword " << keyword
                        << " should be followed by parameters"
                        << " on line " << lineNo_
                        << exit(FatalError);
                }
            }
        }
        else
        {
            currentSpecieName = foamName(foamSpecieString(YYText()));

            HashTable<label>::iterator specieIndexIter
            (
                specieIndices_.find(currentSpecieName)
            );

            if (specieIndexIter != specieIndices_.end())
            {
                if (finishReaction)
                {
                    addReaction
                    (
                        lhs,
                        rhs,
                        thirdBodyEfficiencies,
                        rType,
                        rrType,
                        fofType,
                        ArrheniusCoeffs,
                        reactionCoeffsTable,
                        RRreaction
                    );
                    finishReaction = false;
                    rType = unknownReactionType;
                    rrType = Arrhenius;
                    fofType = unknownFallOffFunctionType;
                    thirdBodyEfficiencies = 1.0;
                    pDependentSpecieName = word::null;
                    lrhsPtr = &lhs;
                }

                currentSpecieCoeff.index = specieIndexIter();
                lrhsPtr->append(currentSpecieCoeff);

                BEGIN(readReactionDelimiter);
            }
            else
            {
                BEGIN(readSpecieNamePlus);
            }
        }
    }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 867 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{

        word keyword(foamName(YYText()));

        HashTable<int>::iterator reactionKeywordIter
        (
            reactionKeywordTable_.find(keyword)
        );

        if (reactionKeywordIter != reactionKeywordTable_.end())
        {
            switch(reactionKeywordIter())
            {
                case unimolecularFallOffReactionType:
                {
                    if (!pDependentSpecieName.size())
                    {
                        FatalErrorInFunction
                            << "LOW keyword given for a unimolecular fall-off"
                               " reaction which does not contain a pressure"
                               " dependent specie" << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    if (rrType == Arrhenius)
                    {
                        rrType = unimolecularFallOff;
                    }
                    else
                    {
                        FatalErrorInFunction
                            << "Attempt to set reaction rate type to"
                               " unimolecularFallOff when it is already set to "
                            << reactionRateTypeNames[rrType]
                            << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    if (fofType == unknownFallOffFunctionType)
                    {
                        fofType = Lindemann;
                    }

                    reactionCoeffsName = reactionRateTypeNames[rrType];
                    BEGIN(readReactionCoeffs);
                    break;
                }

                case chemicallyActivatedBimolecularReactionType:
                {
                    if (!pDependentSpecieName.size())
                    {
                        FatalErrorInFunction
                            << "HIGH keyword given for a chemically"
                               " activated bimolecular reaction which does not"
                               " contain a pressure dependent specie"
                            << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    if (rrType == Arrhenius)
                    {
                        rrType = chemicallyActivatedBimolecular;
                    }
                    else
                    {
                        FatalErrorInFunction
                            << "Attempt to set reaction rate type to"
                               " chemicallyActivatedBimolecular when it is"
                               " already set to "
                            << reactionRateTypeNames[rrType]
                            << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    if (fofType == unknownFallOffFunctionType)
                    {
                        fofType = Lindemann;
                    }

                    reactionCoeffsName = reactionRateTypeNames[rrType];
                    BEGIN(readReactionCoeffs);
                    break;
                }

                case TroeReactionType:
                {
                    if (!pDependentSpecieName.size())
                    {
                        FatalErrorInFunction
                            << "TROE keyword given for a"
                               " reaction which does not contain a pressure"
                               " dependent specie" << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    if
                    (
                        fofType == unknownFallOffFunctionType
                     || fofType == Lindemann
                    )
                    {
                        fofType = Troe;
                    }
                    else
                    {
                        FatalErrorInFunction
                            << "Attempt to set fall-off function type to Troe"
                               " when it is already set to "
                            << fallOffFunctionNames[fofType]
                            << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    reactionCoeffsName = fallOffFunctionNames[fofType];
                    BEGIN(readReactionCoeffs);
                    break;
                }

                case SRIReactionType:
                {
                    if (!pDependentSpecieName.size())
                    {
                        FatalErrorInFunction
                            << "SRI keyword given for a"
                               " reaction which does not contain a pressure"
                               " dependent specie" << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    if
                    (
                        fofType == unknownFallOffFunctionType
                     || fofType == Lindemann
                    )
                    {
                        fofType = SRI;
                    }
                    else
                    {
                        FatalErrorInFunction
                            << "Attempt to set fall-off function type to SRI"
                               " when it is already set to "
                            << fallOffFunctionNames[fofType]
                            << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    reactionCoeffsName = fallOffFunctionNames[fofType];
                    BEGIN(readReactionCoeffs);
                    break;
                }

                case LandauTellerReactionType:
                {
                    if (pDependentSpecieName.size())
                    {
                        FatalErrorInFunction
                            << "Landau-Teller reaction rate cannot be used"
                               " for the pressure-dependent reaction on line "
                            << lineNo_
                            << exit(FatalError);
                    }

                    if (rrType == Arrhenius)
                    {
                        rrType = LandauTeller;
                    }
                    else
                    {
                        FatalErrorInFunction
                            << "Attempt to set reaction rate type to"
                               " LandauTeller when it is already set to "
                            << reactionRateTypeNames[rrType]
                            << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    rrType = LandauTeller;
                    reactionCoeffsName = reactionRateTypeNames[rrType];
                    BEGIN(readReactionCoeffs);
                    break;
                }

                case reverseLandauTellerReactionType:
                {
                    if (pDependentSpecieName.size())
                    {
                        FatalErrorInFunction
                            << "Non-equilibrium Landau-Teller reaction rate"
                               " cannot be used"
                               " for the pressure-dependent reaction on line "
                            << lineNo_
                            << exit(FatalError);
                    }

                    if (rType != nonEquilibriumReversible)
                    {
                        FatalErrorInFunction
                            << "Reverse reaction Arrhenius coefficients not"
                               " given for reverse LandauTeller reaction."
                               " Please reorder 'REV' keyword to precede 'RLT'"
                            << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    rrType = LandauTeller;
                    reactionCoeffsName =
                        word(reactionTypeNames[rType])
                      + reactionRateTypeNames[rrType];
                    BEGIN(readReactionCoeffs);
                    break;
                }

                case JanevReactionType:
                {
                    if (rrType == Arrhenius)
                    {
                        rrType = Janev;
                    }
                    else
                    {
                        FatalErrorInFunction
                            << "Attempt to set reaction rate type to"
                               " Janev when it is already set to "
                            << reactionRateTypeNames[rrType]
                            << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    reactionCoeffsName = reactionRateTypeNames[rrType];
                    BEGIN(readReactionCoeffs);
                    break;
                }

                case powerSeriesReactionRateType:
                {
                    if (rrType == Arrhenius)
                    {
                        rrType = powerSeries;
                    }
                    else
                    {
                        FatalErrorInFunction
                            << "Attempt to set reaction rate type to"
                               " powerSeries when it is already set to "
                            << reactionRateTypeNames[rrType]
                            << " on line " << lineNo_
                            << exit(FatalError);
                    }

                    reactionCoeffsName = reactionRateTypeNames[rrType];
                    BEGIN(readReactionCoeffs);
                    break;
                }

                case radiationActivatedReactionType:
                {
                    FatalErrorInFunction
                        << "Radiation activated reaction on line "
                        << lineNo_ << "not yet supported"
                        << exit(FatalError);
                    // reactionCoeffsName = reactionRateTypeNames[rrType];
                    BEGIN(readReactionCoeffs);
                    break;
                }

                case energyLossReactionType:
                {
                    FatalErrorInFunction
                        << "Energy loss in reaction on line "
                        << lineNo_ << "not yet supported"
                        << exit(FatalError);
                    // reactionCoeffsName = reactionRateTypeNames[rrType];
                    BEGIN(readReactionCoeffs);
                    break;
                }

                case nonEquilibriumReversibleReactionType:
                {
                    rType = nonEquilibriumReversible;
                    reactionCoeffsName = reactionTypeNames[rType];
                    BEGIN(readReactionCoeffs);
                    break;
                }

                case speciesOrderForward:
                {
                    lrhsPtr = &lhs;
                    BEGIN(readReactionOrderSpecie);
                    break;
                }

                case speciesOrderReverse:
                {
                    lrhsPtr = &rhs;
                    BEGIN(readReactionOrderSpecie);
                    break;
                }

                case UnitsOfReaction:
                {
                    BEGIN(readReactionUnit);
                    break;
                }

                default:
                {
                    FatalErrorInFunction
                        << "unknown reaction keyword " << keyword
                        << " on line " << lineNo_
                        << exit(FatalError);
                }
            }
        }
        else
        {
            HashTable<label>::iterator specieIndexIter
            (
                specieIndices_.find(keyword)
            );

            if (specieIndexIter != specieIndices_.end())
            {
                currentThirdBodyIndex = specieIndexIter();
            }
            else
            {
                FatalErrorInFunction
                    << "unknown third-body specie " << keyword
                    << " on line " << lineNo_ << nl
                    << "Valid species are : " << nl
                    << specieIndices_.toc() << endl
                    << exit(FatalError);
            }

            BEGIN(readThirdBodyEfficiency);
        }
    }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1207 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        currentSpecieName += "+";

        HashTable<label>::iterator specieIndexIter
        (
            specieIndices_.find(currentSpecieName)
        );

        if (specieIndexIter != specieIndices_.end())
        {
            if (finishReaction)
            {
                addReaction
                (
                    lhs,
                    rhs,
                    thirdBodyEfficiencies,
                    rType,
                    rrType,
                    fofType,
                    ArrheniusCoeffs,
                    reactionCoeffsTable,
                    RRreaction
                );
                finishReaction = false;
                rType = unknownReactionType;
                rrType = Arrhenius;
                fofType = unknownFallOffFunctionType;
                thirdBodyEfficiencies = 1.0;
                pDependentSpecieName = word::null;
                lrhsPtr = &lhs;
            }

            currentSpecieCoeff.index = specieIndexIter();
            lrhsPtr->append(currentSpecieCoeff);

            BEGIN(readReactionDelimiter);
        }
        else
        {
            FatalErrorInFunction
                << "unknown specie " << currentSpecieName
                << " on line " << lineNo_ << nl
                << "Valid species are : " << nl
                << specieIndices_.toc() << endl
                << exit(FatalError);
        }
    }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1256 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        currentSpecieCoeff.stoichCoeff = 1.0;
        currentSpecieCoeff.exponent = currentSpecieCoeff.stoichCoeff;
        BEGIN(readReactionKeyword);
    }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1262 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        currentSpecieCoeff.stoichCoeff = 1.0;
        currentSpecieCoeff.exponent = currentSpecieCoeff.stoichCoeff;
        rType = irreversible;
        lrhsPtr = &rhs;
        BEGIN(readReactionKeyword);
    }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1270 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        currentSpecieCoeff.stoichCoeff = 1.0;
        currentSpecieCoeff.exponent = currentSpecieCoeff.stoichCoeff;
        rType = reversible;
        lrhsPtr = &rhs;
        BEGIN(readReactionKeyword);
    }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1278 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
    }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1281 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        string reactionCoeffsString(YYText());
        reactionCoeffsString.replaceAll("d", "e");
        reactionCoeffsString.replaceAll("D", "e");
        IStringStream reactionCoeffsStream(reactionCoeffsString);
        reactionCoeffsStream.lineNumber() = lineNo_;

        reactionCoeffsStream
            >> ArrheniusCoeffs[0]
            >> ArrheniusCoeffs[1]
            >> ArrheniusCoeffs[2];

        finishReaction = true;
        currentSpecieCoeff.stoichCoeff = 1.0;
        currentSpecieCoeff.exponent = currentSpecieCoeff.stoichCoeff;
        RRreaction = RRreactions;

        if (lhsThirdBodyCounter || rhsThirdBodyCounter)
        {
            if (!lhsThirdBodyCounter || !rhsThirdBodyCounter)
            {
                FatalErrorInFunction
                    << "Third body not present on both sides of reaction"
                       " on line " << lineNo_
                << exit(FatalError);
            }

            if (lhsThirdBodyCounter != 1)
            {
                FatalErrorInFunction
                    << "More than 1 third body present on l.h.s. side"
                       " of reaction on line " << lineNo_
                    << exit(FatalError);
            }

            if (rhsThirdBodyCounter != 1)
            {
                FatalErrorInFunction
                    << "More than 1 third body present on r.h.s. side"
                       " of reaction on line " << lineNo_
                    << exit(FatalError);
            }

            lhsThirdBodyCounter = 0;
            rhsThirdBodyCounter = 0;
        }

        BEGIN(readReactionKeyword);
    }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1332 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        thirdBodyEfficiencies[currentThirdBodyIndex] = stringToScalar(YYText());
        BEGIN(readReactionKeyword);
    }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 1337 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        BEGIN(readPDependentSpecie);
    }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 1341 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{

        word rhsPDependentSpecieName = pDependentSpecieName;
        pDependentSpecieName =
            foamName(foamSpecieString(YYText()));
        pDependentSpecieName =
            pDependentSpecieName(0, pDependentSpecieName.size() - 1);

        if (rrType == thirdBodyArrhenius)
        {
            FatalErrorInFunction
                << "The pressure-dependent third-body '"
                << pDependentSpecieName
                << "' is given in non-pressure-dependent third-body reaction"
                << " on line " << lineNo_
                << exit(FatalError);
        }

        if (lrhsPtr == &lhs)
        {
            lhsThirdBodyCounter++;
        }
        else
        {
            if (pDependentSpecieName != rhsPDependentSpecieName)
            {
                FatalErrorInFunction
                    << "The third-body reactant '"
                    << pDependentSpecieName
                    << "' is not the same as the third-body product '"
                    << rhsPDependentSpecieName
                    << "' in pressure-dependent reaction on line " << lineNo_
                    << exit(FatalError);
            }

            rhsThirdBodyCounter++;
        }

        if (pDependentSpecieName != "M")
        {
            HashTable<label>::iterator specieIndexIter
            (
                specieIndices_.find(pDependentSpecieName)
            );

            if (specieIndexIter != specieIndices_.end())
            {
                thirdBodyEfficiencies = 0.0;
                thirdBodyEfficiencies[specieIndexIter()] = 1.0;
            }
            else
            {
                FatalErrorInFunction
                    << "unknown third-body specie " << pDependentSpecieName
                    << " on line " << lineNo_ << nl
                    << "Valid species are : " << nl
                    << specieIndices_.toc() << endl
                    << exit(FatalError);
            }
        }

        BEGIN(readReactionDelimiter);
    }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 1405 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        reactionCoeffs.append(stringToScalar(YYText()));
    }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1409 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        reactionCoeffsTable.insert(reactionCoeffsName, reactionCoeffs.shrink());
        reactionCoeffs.clear();
        BEGIN(readReactionKeyword);
    }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1415 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        word specieName(foamName(foamSpecieString(YYText())));
        FatalErrorInFunction
            << "Temperature-dependent reaction on line "
            << lineNo_ << "not yet supported"
            << exit(FatalError);
        BEGIN(readReactionKeyword);
    }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 1424 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        currentSpecieName =
            word(foamName(foamSpecieString(YYText())));

        HashTable<label>::iterator specieIndexIter
        (
            specieIndices_.find(currentSpecieName)
        );

        if (specieIndexIter != specieIndices_.end())
        {
            currentSpecieIndex = specieIndexIter();
        }
        else
        {
            FatalErrorInFunction
                << "unknown specie " << currentSpecieName
                << " given in reaction-order specification"
                << " on line " << lineNo_ << nl
                << "Valid species are : " << nl
                << specieIndices_.toc() << endl
                << exit(FatalError);
        }

        BEGIN(readReactionOrder);
    }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1451 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{

        DynamicList<specieCoeffs>& lrhs = *lrhsPtr;

        bool found = false;

        forAll(lrhs, i)
        {
            if (lrhs[i].index == currentSpecieIndex)
            {
                lrhs[i].exponent = stringToScalar(YYText());
                found = true;
                break;
            }
        }

        if (!found)
        {
            word side("l.h.s.");

            if (lrhsPtr == &rhs)
            {
                side = "r.h.s.";
            }

            FatalErrorInFunction
                << "Specie " << currentSpecieName
                << " on line " << lineNo_
                << " not present in " << side << " of reaction " << nl << lrhs
                << exit(FatalError);
        }

        BEGIN(readReactionKeyword);
    }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1486 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        RRreaction = RRcal;
    }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1490 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        RRreaction = RRcal/1000.0;
    }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1494 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        RRreaction = RRjoule;
    }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1498 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        RRreaction = RRjoule/1000.0;
    }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1502 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        RRreaction = 1.0;
    }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 1506 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
    }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1509 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        BEGIN(readReactionKeyword);
    }
	YY_BREAK
/* ------------------ Ignore remaining space and \n s. --------------------- */
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1516 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{ lineNo_++; }
	YY_BREAK
/* ------ Ignore remaining space and \n s.  Any other characters are errors. */
case 58:
YY_RULE_SETUP
#line 1520 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        startError = YYText();
        yy_push_state(CHEMKINError);
    }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1525 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        yy_pop_state();
        FatalErrorInFunction
            << "while " << stateNames[YY_START] << " on line " << lineNo_ << nl
            << "    expected " << stateExpects[YY_START]
            << " but found '" << startError << YYText() << "'"
            << exit(FatalError);
    }
	YY_BREAK
/*  ------------------------ On EOF terminate. ----------------------------  */
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(readElements):
case YY_STATE_EOF(readIsotopeMolW):
case YY_STATE_EOF(readSpecies):
case YY_STATE_EOF(readThermoAll):
case YY_STATE_EOF(readThermoSpecieName):
case YY_STATE_EOF(readThermoDate):
case YY_STATE_EOF(readThermoFormula):
case YY_STATE_EOF(readThermoPhase):
case YY_STATE_EOF(readThermoTemps):
case YY_STATE_EOF(readThermoFormula2):
case YY_STATE_EOF(readThermoLineLabel1):
case YY_STATE_EOF(readThermoCoeff1):
case YY_STATE_EOF(readThermoLineLabel2):
case YY_STATE_EOF(readThermoCoeff2):
case YY_STATE_EOF(readThermoLineLabel3):
case YY_STATE_EOF(readThermoCoeff3):
case YY_STATE_EOF(readThermoLineLabel4):
case YY_STATE_EOF(readReactionsUnits):
case YY_STATE_EOF(readReactionKeyword):
case YY_STATE_EOF(readSpecieNamePlus):
case YY_STATE_EOF(readReactionDelimiter):
case YY_STATE_EOF(readPDependentSpecie):
case YY_STATE_EOF(readThirdBodyEfficiency):
case YY_STATE_EOF(readReactionCoeffs):
case YY_STATE_EOF(readTdepSpecie):
case YY_STATE_EOF(readReactionOrderSpecie):
case YY_STATE_EOF(readReactionOrder):
case YY_STATE_EOF(readReactionUnit):
case YY_STATE_EOF(CHEMKINError):
#line 1537 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
{
        if (finishReaction)
        {
            addReaction
            (
                lhs,
                rhs,
                thirdBodyEfficiencies,
                rType,
                rrType,
                fofType,
                ArrheniusCoeffs,
                reactionCoeffsTable,
                RRreaction
            );
        }
        yyterminate();
    }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 1555 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"
ECHO;
	YY_BREAK
#line 5990 "chemkinLexer.cxx"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2009 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2009 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2008);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes(yystr,(int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1555 "TnbLib\\thermophysicalModels\\reactionThermo\\chemistryReaders\\chemkinReader\\chemkinLexer.L"


 /* ------------------------------------------------------------------------- *\
    ------ End of chemkinLexer.L
 \* ------------------------------------------------------------------------- */

